generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 

  // url = "postgresql://fasalbazar:fasal123@localhost:5432/fasalbazar_db"
}

model Farmer {
  id                  Int                 @id @default(autoincrement())
  name                String
  address             String
  contactNo           String
  email               String?
  password            String
  landSize            Float               @default(0)
  crops               Crop[]              @relation("FarmerCrops")
  contracts           Contract[]
  fulfilledContracts  Int                 @default(0)
  farmerScore         Float               @default(0)
  avatar              String?             
  posts               Post[]
  messagesSent        Message[]           @relation("FarmerMessagesSent")
  messagesReceived    Message[]           @relation("FarmerMessagesReceived")
  likes               Like[]              @relation("FarmerLikes")
  scoreCalculations   ScoreCalculation[]  @relation("FarmerScoreCalculations")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model Contractor {
  id                  Int                 @id @default(autoincrement())
  name                String
  contactNo           String
  password            String
  email               String?
  address             String
  contracts           Contract[]
  fulfilledContracts  Int                 @default(0)
  contractorScore     Float               @default(0)
  avatar              String?
  posts               Post[]
  messagesSent        Message[]           @relation("ContractorMessagesSent")
  messagesReceived    Message[]           @relation("ContractorMessagesReceived")
  likes               Like[]              @relation("ContractorLikes")
  scoreCalculations   ScoreCalculation[]  @relation("ContractorScoreCalculations")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

enum cropSeason{
  RABI
  KHARIF
  YEARLY
}

model Crop {
  id         Int        @id @default(autoincrement())
  name       String     
  season     cropSeason 
  farmers    Farmer[]   @relation("FarmerCrops")
  contracts  Contract[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum cropStatus{
  SIGNED
  SOWN
  GREEN
  MATURE
  HARVESTED
}

model Contract {
  id               Int        @id @default(autoincrement())
  farmerId         Int
  contractorId     Int
  cropId           Int
  landSize         Float
  amount           Float
  advancePayment   Float
  expectedYield    Float
  prefixedPrice    Float
  startDate        DateTime
  endDate          DateTime
  insuranceFactors String
  status            cropStatus @default(SIGNED)
  contractStatus   String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  farmer           Farmer     @relation(fields: [farmerId], references: [id])
  contractor       Contractor @relation(fields: [contractorId], references: [id])
  crop             Crop       @relation(fields: [cropId], references: [id])
}

model ScoreCalculation {
  id               Int        @id @default(autoincrement())
  farmerId         Int?
  contractorId     Int?
  score            Float
  calculationDate  DateTime   @default(now())
  criteria         String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  farmer           Farmer?    @relation("FarmerScoreCalculations", fields: [farmerId], references: [id])
  contractor       Contractor? @relation("ContractorScoreCalculations", fields: [contractorId], references: [id])
}

model Message {
  id                 Int        @id @default(autoincrement())
  content            String
  senderId           Int
  receiverId         Int
  createdAt          DateTime   @default(now())

  senderFarmer       Farmer?    @relation("FarmerMessagesSent", fields: [senderId], references: [id], onDelete: Cascade, map: "Message_FarmerSenderId_fkey")
  receiverFarmer     Farmer?    @relation("FarmerMessagesReceived", fields: [receiverId], references: [id], onDelete: Cascade, map: "Message_FarmerReceiverId_fkey")
  senderContractor   Contractor? @relation("ContractorMessagesSent", fields: [senderId], references: [id], onDelete: Cascade, map: "Message_ContractorSenderId_fkey")
  receiverContractor Contractor? @relation("ContractorMessagesReceived", fields: [receiverId], references: [id], onDelete: Cascade, map: "Message_ContractorReceiverId_fkey")
}

model Post {
  id          Int   @id @default(autoincrement())
  content     String
  imageUrl    String?
  farmerId    Int?
  contractorId Int?
  likes       Like[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  farmer      Farmer?    @relation(fields: [farmerId], references: [id])
  contractor  Contractor? @relation(fields: [contractorId], references: [id])
}

model Like {
  id         Int        @id @default(autoincrement())
  postId     Int
  userId     Int        // Can be a farmer or a contractor
  createdAt  DateTime   @default(now())

  post       Post       @relation(fields: [postId], references: [id])
  farmer     Farmer?    @relation("FarmerLikes", fields: [userId], references: [id], onDelete: Cascade, map: "Like_Farmer_userId_fkey")
  contractor Contractor? @relation("ContractorLikes", fields: [userId], references: [id], onDelete: Cascade, map: "Like_Contractor_userId_fkey")
}
