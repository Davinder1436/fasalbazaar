
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Farmer
 * 
 */
export type Farmer = $Result.DefaultSelection<Prisma.$FarmerPayload>
/**
 * Model Contractor
 * 
 */
export type Contractor = $Result.DefaultSelection<Prisma.$ContractorPayload>
/**
 * Model Crop
 * 
 */
export type Crop = $Result.DefaultSelection<Prisma.$CropPayload>
/**
 * Model Contract
 * 
 */
export type Contract = $Result.DefaultSelection<Prisma.$ContractPayload>
/**
 * Model ScoreCalculation
 * 
 */
export type ScoreCalculation = $Result.DefaultSelection<Prisma.$ScoreCalculationPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model Like
 * 
 */
export type Like = $Result.DefaultSelection<Prisma.$LikePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const cropSeason: {
  RABI: 'RABI',
  KHARIF: 'KHARIF',
  YEARLY: 'YEARLY'
};

export type cropSeason = (typeof cropSeason)[keyof typeof cropSeason]


export const cropStatus: {
  SIGNED: 'SIGNED',
  SOWN: 'SOWN',
  GREEN: 'GREEN',
  MATURE: 'MATURE',
  HARVESTED: 'HARVESTED'
};

export type cropStatus = (typeof cropStatus)[keyof typeof cropStatus]

}

export type cropSeason = $Enums.cropSeason

export const cropSeason: typeof $Enums.cropSeason

export type cropStatus = $Enums.cropStatus

export const cropStatus: typeof $Enums.cropStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Farmers
 * const farmers = await prisma.farmer.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Farmers
   * const farmers = await prisma.farmer.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.farmer`: Exposes CRUD operations for the **Farmer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Farmers
    * const farmers = await prisma.farmer.findMany()
    * ```
    */
  get farmer(): Prisma.FarmerDelegate<ExtArgs>;

  /**
   * `prisma.contractor`: Exposes CRUD operations for the **Contractor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contractors
    * const contractors = await prisma.contractor.findMany()
    * ```
    */
  get contractor(): Prisma.ContractorDelegate<ExtArgs>;

  /**
   * `prisma.crop`: Exposes CRUD operations for the **Crop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Crops
    * const crops = await prisma.crop.findMany()
    * ```
    */
  get crop(): Prisma.CropDelegate<ExtArgs>;

  /**
   * `prisma.contract`: Exposes CRUD operations for the **Contract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contracts
    * const contracts = await prisma.contract.findMany()
    * ```
    */
  get contract(): Prisma.ContractDelegate<ExtArgs>;

  /**
   * `prisma.scoreCalculation`: Exposes CRUD operations for the **ScoreCalculation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScoreCalculations
    * const scoreCalculations = await prisma.scoreCalculation.findMany()
    * ```
    */
  get scoreCalculation(): Prisma.ScoreCalculationDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs>;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.LikeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.1
   * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Farmer: 'Farmer',
    Contractor: 'Contractor',
    Crop: 'Crop',
    Contract: 'Contract',
    ScoreCalculation: 'ScoreCalculation',
    Message: 'Message',
    Post: 'Post',
    Like: 'Like'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "farmer" | "contractor" | "crop" | "contract" | "scoreCalculation" | "message" | "post" | "like"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Farmer: {
        payload: Prisma.$FarmerPayload<ExtArgs>
        fields: Prisma.FarmerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FarmerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FarmerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          findFirst: {
            args: Prisma.FarmerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FarmerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          findMany: {
            args: Prisma.FarmerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>[]
          }
          create: {
            args: Prisma.FarmerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          createMany: {
            args: Prisma.FarmerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FarmerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>[]
          }
          delete: {
            args: Prisma.FarmerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          update: {
            args: Prisma.FarmerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          deleteMany: {
            args: Prisma.FarmerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FarmerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FarmerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          aggregate: {
            args: Prisma.FarmerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFarmer>
          }
          groupBy: {
            args: Prisma.FarmerGroupByArgs<ExtArgs>
            result: $Utils.Optional<FarmerGroupByOutputType>[]
          }
          count: {
            args: Prisma.FarmerCountArgs<ExtArgs>
            result: $Utils.Optional<FarmerCountAggregateOutputType> | number
          }
        }
      }
      Contractor: {
        payload: Prisma.$ContractorPayload<ExtArgs>
        fields: Prisma.ContractorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          findFirst: {
            args: Prisma.ContractorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          findMany: {
            args: Prisma.ContractorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>[]
          }
          create: {
            args: Prisma.ContractorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          createMany: {
            args: Prisma.ContractorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>[]
          }
          delete: {
            args: Prisma.ContractorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          update: {
            args: Prisma.ContractorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          deleteMany: {
            args: Prisma.ContractorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContractorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          aggregate: {
            args: Prisma.ContractorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContractor>
          }
          groupBy: {
            args: Prisma.ContractorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractorCountArgs<ExtArgs>
            result: $Utils.Optional<ContractorCountAggregateOutputType> | number
          }
        }
      }
      Crop: {
        payload: Prisma.$CropPayload<ExtArgs>
        fields: Prisma.CropFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CropFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CropFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropPayload>
          }
          findFirst: {
            args: Prisma.CropFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CropFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropPayload>
          }
          findMany: {
            args: Prisma.CropFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropPayload>[]
          }
          create: {
            args: Prisma.CropCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropPayload>
          }
          createMany: {
            args: Prisma.CropCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CropCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropPayload>[]
          }
          delete: {
            args: Prisma.CropDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropPayload>
          }
          update: {
            args: Prisma.CropUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropPayload>
          }
          deleteMany: {
            args: Prisma.CropDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CropUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CropUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropPayload>
          }
          aggregate: {
            args: Prisma.CropAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCrop>
          }
          groupBy: {
            args: Prisma.CropGroupByArgs<ExtArgs>
            result: $Utils.Optional<CropGroupByOutputType>[]
          }
          count: {
            args: Prisma.CropCountArgs<ExtArgs>
            result: $Utils.Optional<CropCountAggregateOutputType> | number
          }
        }
      }
      Contract: {
        payload: Prisma.$ContractPayload<ExtArgs>
        fields: Prisma.ContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findFirst: {
            args: Prisma.ContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findMany: {
            args: Prisma.ContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          create: {
            args: Prisma.ContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          createMany: {
            args: Prisma.ContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          delete: {
            args: Prisma.ContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          update: {
            args: Prisma.ContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          deleteMany: {
            args: Prisma.ContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          aggregate: {
            args: Prisma.ContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContract>
          }
          groupBy: {
            args: Prisma.ContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractCountArgs<ExtArgs>
            result: $Utils.Optional<ContractCountAggregateOutputType> | number
          }
        }
      }
      ScoreCalculation: {
        payload: Prisma.$ScoreCalculationPayload<ExtArgs>
        fields: Prisma.ScoreCalculationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScoreCalculationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCalculationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScoreCalculationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCalculationPayload>
          }
          findFirst: {
            args: Prisma.ScoreCalculationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCalculationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScoreCalculationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCalculationPayload>
          }
          findMany: {
            args: Prisma.ScoreCalculationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCalculationPayload>[]
          }
          create: {
            args: Prisma.ScoreCalculationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCalculationPayload>
          }
          createMany: {
            args: Prisma.ScoreCalculationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScoreCalculationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCalculationPayload>[]
          }
          delete: {
            args: Prisma.ScoreCalculationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCalculationPayload>
          }
          update: {
            args: Prisma.ScoreCalculationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCalculationPayload>
          }
          deleteMany: {
            args: Prisma.ScoreCalculationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScoreCalculationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScoreCalculationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCalculationPayload>
          }
          aggregate: {
            args: Prisma.ScoreCalculationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScoreCalculation>
          }
          groupBy: {
            args: Prisma.ScoreCalculationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScoreCalculationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScoreCalculationCountArgs<ExtArgs>
            result: $Utils.Optional<ScoreCalculationCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      Like: {
        payload: Prisma.$LikePayload<ExtArgs>
        fields: Prisma.LikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findFirst: {
            args: Prisma.LikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findMany: {
            args: Prisma.LikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          create: {
            args: Prisma.LikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          createMany: {
            args: Prisma.LikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          delete: {
            args: Prisma.LikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          update: {
            args: Prisma.LikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          deleteMany: {
            args: Prisma.LikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          aggregate: {
            args: Prisma.LikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLike>
          }
          groupBy: {
            args: Prisma.LikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeCountArgs<ExtArgs>
            result: $Utils.Optional<LikeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FarmerCountOutputType
   */

  export type FarmerCountOutputType = {
    crops: number
    contracts: number
    posts: number
    messagesSent: number
    messagesReceived: number
    likes: number
    scoreCalculations: number
  }

  export type FarmerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    crops?: boolean | FarmerCountOutputTypeCountCropsArgs
    contracts?: boolean | FarmerCountOutputTypeCountContractsArgs
    posts?: boolean | FarmerCountOutputTypeCountPostsArgs
    messagesSent?: boolean | FarmerCountOutputTypeCountMessagesSentArgs
    messagesReceived?: boolean | FarmerCountOutputTypeCountMessagesReceivedArgs
    likes?: boolean | FarmerCountOutputTypeCountLikesArgs
    scoreCalculations?: boolean | FarmerCountOutputTypeCountScoreCalculationsArgs
  }

  // Custom InputTypes
  /**
   * FarmerCountOutputType without action
   */
  export type FarmerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FarmerCountOutputType
     */
    select?: FarmerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FarmerCountOutputType without action
   */
  export type FarmerCountOutputTypeCountCropsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CropWhereInput
  }

  /**
   * FarmerCountOutputType without action
   */
  export type FarmerCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * FarmerCountOutputType without action
   */
  export type FarmerCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * FarmerCountOutputType without action
   */
  export type FarmerCountOutputTypeCountMessagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * FarmerCountOutputType without action
   */
  export type FarmerCountOutputTypeCountMessagesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * FarmerCountOutputType without action
   */
  export type FarmerCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * FarmerCountOutputType without action
   */
  export type FarmerCountOutputTypeCountScoreCalculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreCalculationWhereInput
  }


  /**
   * Count Type ContractorCountOutputType
   */

  export type ContractorCountOutputType = {
    contracts: number
    posts: number
    messagesSent: number
    messagesReceived: number
    likes: number
    scoreCalculations: number
  }

  export type ContractorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | ContractorCountOutputTypeCountContractsArgs
    posts?: boolean | ContractorCountOutputTypeCountPostsArgs
    messagesSent?: boolean | ContractorCountOutputTypeCountMessagesSentArgs
    messagesReceived?: boolean | ContractorCountOutputTypeCountMessagesReceivedArgs
    likes?: boolean | ContractorCountOutputTypeCountLikesArgs
    scoreCalculations?: boolean | ContractorCountOutputTypeCountScoreCalculationsArgs
  }

  // Custom InputTypes
  /**
   * ContractorCountOutputType without action
   */
  export type ContractorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorCountOutputType
     */
    select?: ContractorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContractorCountOutputType without action
   */
  export type ContractorCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * ContractorCountOutputType without action
   */
  export type ContractorCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * ContractorCountOutputType without action
   */
  export type ContractorCountOutputTypeCountMessagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * ContractorCountOutputType without action
   */
  export type ContractorCountOutputTypeCountMessagesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * ContractorCountOutputType without action
   */
  export type ContractorCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * ContractorCountOutputType without action
   */
  export type ContractorCountOutputTypeCountScoreCalculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreCalculationWhereInput
  }


  /**
   * Count Type CropCountOutputType
   */

  export type CropCountOutputType = {
    farmers: number
    contracts: number
  }

  export type CropCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmers?: boolean | CropCountOutputTypeCountFarmersArgs
    contracts?: boolean | CropCountOutputTypeCountContractsArgs
  }

  // Custom InputTypes
  /**
   * CropCountOutputType without action
   */
  export type CropCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropCountOutputType
     */
    select?: CropCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CropCountOutputType without action
   */
  export type CropCountOutputTypeCountFarmersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FarmerWhereInput
  }

  /**
   * CropCountOutputType without action
   */
  export type CropCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    likes: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    likes?: boolean | PostCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Farmer
   */

  export type AggregateFarmer = {
    _count: FarmerCountAggregateOutputType | null
    _avg: FarmerAvgAggregateOutputType | null
    _sum: FarmerSumAggregateOutputType | null
    _min: FarmerMinAggregateOutputType | null
    _max: FarmerMaxAggregateOutputType | null
  }

  export type FarmerAvgAggregateOutputType = {
    id: number | null
    landSize: number | null
    fulfilledContracts: number | null
    farmerScore: number | null
  }

  export type FarmerSumAggregateOutputType = {
    id: number | null
    landSize: number | null
    fulfilledContracts: number | null
    farmerScore: number | null
  }

  export type FarmerMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    contactNo: string | null
    email: string | null
    password: string | null
    landSize: number | null
    fulfilledContracts: number | null
    farmerScore: number | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FarmerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    contactNo: string | null
    email: string | null
    password: string | null
    landSize: number | null
    fulfilledContracts: number | null
    farmerScore: number | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FarmerCountAggregateOutputType = {
    id: number
    name: number
    address: number
    contactNo: number
    email: number
    password: number
    landSize: number
    fulfilledContracts: number
    farmerScore: number
    avatar: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FarmerAvgAggregateInputType = {
    id?: true
    landSize?: true
    fulfilledContracts?: true
    farmerScore?: true
  }

  export type FarmerSumAggregateInputType = {
    id?: true
    landSize?: true
    fulfilledContracts?: true
    farmerScore?: true
  }

  export type FarmerMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contactNo?: true
    email?: true
    password?: true
    landSize?: true
    fulfilledContracts?: true
    farmerScore?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FarmerMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contactNo?: true
    email?: true
    password?: true
    landSize?: true
    fulfilledContracts?: true
    farmerScore?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FarmerCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contactNo?: true
    email?: true
    password?: true
    landSize?: true
    fulfilledContracts?: true
    farmerScore?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FarmerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Farmer to aggregate.
     */
    where?: FarmerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Farmers to fetch.
     */
    orderBy?: FarmerOrderByWithRelationInput | FarmerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FarmerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Farmers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Farmers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Farmers
    **/
    _count?: true | FarmerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FarmerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FarmerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FarmerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FarmerMaxAggregateInputType
  }

  export type GetFarmerAggregateType<T extends FarmerAggregateArgs> = {
        [P in keyof T & keyof AggregateFarmer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFarmer[P]>
      : GetScalarType<T[P], AggregateFarmer[P]>
  }




  export type FarmerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FarmerWhereInput
    orderBy?: FarmerOrderByWithAggregationInput | FarmerOrderByWithAggregationInput[]
    by: FarmerScalarFieldEnum[] | FarmerScalarFieldEnum
    having?: FarmerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FarmerCountAggregateInputType | true
    _avg?: FarmerAvgAggregateInputType
    _sum?: FarmerSumAggregateInputType
    _min?: FarmerMinAggregateInputType
    _max?: FarmerMaxAggregateInputType
  }

  export type FarmerGroupByOutputType = {
    id: number
    name: string
    address: string
    contactNo: string
    email: string | null
    password: string
    landSize: number
    fulfilledContracts: number
    farmerScore: number
    avatar: string | null
    createdAt: Date
    updatedAt: Date
    _count: FarmerCountAggregateOutputType | null
    _avg: FarmerAvgAggregateOutputType | null
    _sum: FarmerSumAggregateOutputType | null
    _min: FarmerMinAggregateOutputType | null
    _max: FarmerMaxAggregateOutputType | null
  }

  type GetFarmerGroupByPayload<T extends FarmerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FarmerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FarmerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FarmerGroupByOutputType[P]>
            : GetScalarType<T[P], FarmerGroupByOutputType[P]>
        }
      >
    >


  export type FarmerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    contactNo?: boolean
    email?: boolean
    password?: boolean
    landSize?: boolean
    fulfilledContracts?: boolean
    farmerScore?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    crops?: boolean | Farmer$cropsArgs<ExtArgs>
    contracts?: boolean | Farmer$contractsArgs<ExtArgs>
    posts?: boolean | Farmer$postsArgs<ExtArgs>
    messagesSent?: boolean | Farmer$messagesSentArgs<ExtArgs>
    messagesReceived?: boolean | Farmer$messagesReceivedArgs<ExtArgs>
    likes?: boolean | Farmer$likesArgs<ExtArgs>
    scoreCalculations?: boolean | Farmer$scoreCalculationsArgs<ExtArgs>
    _count?: boolean | FarmerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["farmer"]>

  export type FarmerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    contactNo?: boolean
    email?: boolean
    password?: boolean
    landSize?: boolean
    fulfilledContracts?: boolean
    farmerScore?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["farmer"]>

  export type FarmerSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    contactNo?: boolean
    email?: boolean
    password?: boolean
    landSize?: boolean
    fulfilledContracts?: boolean
    farmerScore?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FarmerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    crops?: boolean | Farmer$cropsArgs<ExtArgs>
    contracts?: boolean | Farmer$contractsArgs<ExtArgs>
    posts?: boolean | Farmer$postsArgs<ExtArgs>
    messagesSent?: boolean | Farmer$messagesSentArgs<ExtArgs>
    messagesReceived?: boolean | Farmer$messagesReceivedArgs<ExtArgs>
    likes?: boolean | Farmer$likesArgs<ExtArgs>
    scoreCalculations?: boolean | Farmer$scoreCalculationsArgs<ExtArgs>
    _count?: boolean | FarmerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FarmerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FarmerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Farmer"
    objects: {
      crops: Prisma.$CropPayload<ExtArgs>[]
      contracts: Prisma.$ContractPayload<ExtArgs>[]
      posts: Prisma.$PostPayload<ExtArgs>[]
      messagesSent: Prisma.$MessagePayload<ExtArgs>[]
      messagesReceived: Prisma.$MessagePayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
      scoreCalculations: Prisma.$ScoreCalculationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      contactNo: string
      email: string | null
      password: string
      landSize: number
      fulfilledContracts: number
      farmerScore: number
      avatar: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["farmer"]>
    composites: {}
  }

  type FarmerGetPayload<S extends boolean | null | undefined | FarmerDefaultArgs> = $Result.GetResult<Prisma.$FarmerPayload, S>

  type FarmerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FarmerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FarmerCountAggregateInputType | true
    }

  export interface FarmerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Farmer'], meta: { name: 'Farmer' } }
    /**
     * Find zero or one Farmer that matches the filter.
     * @param {FarmerFindUniqueArgs} args - Arguments to find a Farmer
     * @example
     * // Get one Farmer
     * const farmer = await prisma.farmer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FarmerFindUniqueArgs>(args: SelectSubset<T, FarmerFindUniqueArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Farmer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FarmerFindUniqueOrThrowArgs} args - Arguments to find a Farmer
     * @example
     * // Get one Farmer
     * const farmer = await prisma.farmer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FarmerFindUniqueOrThrowArgs>(args: SelectSubset<T, FarmerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Farmer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerFindFirstArgs} args - Arguments to find a Farmer
     * @example
     * // Get one Farmer
     * const farmer = await prisma.farmer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FarmerFindFirstArgs>(args?: SelectSubset<T, FarmerFindFirstArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Farmer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerFindFirstOrThrowArgs} args - Arguments to find a Farmer
     * @example
     * // Get one Farmer
     * const farmer = await prisma.farmer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FarmerFindFirstOrThrowArgs>(args?: SelectSubset<T, FarmerFindFirstOrThrowArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Farmers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Farmers
     * const farmers = await prisma.farmer.findMany()
     * 
     * // Get first 10 Farmers
     * const farmers = await prisma.farmer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const farmerWithIdOnly = await prisma.farmer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FarmerFindManyArgs>(args?: SelectSubset<T, FarmerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Farmer.
     * @param {FarmerCreateArgs} args - Arguments to create a Farmer.
     * @example
     * // Create one Farmer
     * const Farmer = await prisma.farmer.create({
     *   data: {
     *     // ... data to create a Farmer
     *   }
     * })
     * 
     */
    create<T extends FarmerCreateArgs>(args: SelectSubset<T, FarmerCreateArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Farmers.
     * @param {FarmerCreateManyArgs} args - Arguments to create many Farmers.
     * @example
     * // Create many Farmers
     * const farmer = await prisma.farmer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FarmerCreateManyArgs>(args?: SelectSubset<T, FarmerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Farmers and returns the data saved in the database.
     * @param {FarmerCreateManyAndReturnArgs} args - Arguments to create many Farmers.
     * @example
     * // Create many Farmers
     * const farmer = await prisma.farmer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Farmers and only return the `id`
     * const farmerWithIdOnly = await prisma.farmer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FarmerCreateManyAndReturnArgs>(args?: SelectSubset<T, FarmerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Farmer.
     * @param {FarmerDeleteArgs} args - Arguments to delete one Farmer.
     * @example
     * // Delete one Farmer
     * const Farmer = await prisma.farmer.delete({
     *   where: {
     *     // ... filter to delete one Farmer
     *   }
     * })
     * 
     */
    delete<T extends FarmerDeleteArgs>(args: SelectSubset<T, FarmerDeleteArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Farmer.
     * @param {FarmerUpdateArgs} args - Arguments to update one Farmer.
     * @example
     * // Update one Farmer
     * const farmer = await prisma.farmer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FarmerUpdateArgs>(args: SelectSubset<T, FarmerUpdateArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Farmers.
     * @param {FarmerDeleteManyArgs} args - Arguments to filter Farmers to delete.
     * @example
     * // Delete a few Farmers
     * const { count } = await prisma.farmer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FarmerDeleteManyArgs>(args?: SelectSubset<T, FarmerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Farmers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Farmers
     * const farmer = await prisma.farmer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FarmerUpdateManyArgs>(args: SelectSubset<T, FarmerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Farmer.
     * @param {FarmerUpsertArgs} args - Arguments to update or create a Farmer.
     * @example
     * // Update or create a Farmer
     * const farmer = await prisma.farmer.upsert({
     *   create: {
     *     // ... data to create a Farmer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Farmer we want to update
     *   }
     * })
     */
    upsert<T extends FarmerUpsertArgs>(args: SelectSubset<T, FarmerUpsertArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Farmers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerCountArgs} args - Arguments to filter Farmers to count.
     * @example
     * // Count the number of Farmers
     * const count = await prisma.farmer.count({
     *   where: {
     *     // ... the filter for the Farmers we want to count
     *   }
     * })
    **/
    count<T extends FarmerCountArgs>(
      args?: Subset<T, FarmerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FarmerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Farmer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FarmerAggregateArgs>(args: Subset<T, FarmerAggregateArgs>): Prisma.PrismaPromise<GetFarmerAggregateType<T>>

    /**
     * Group by Farmer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FarmerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FarmerGroupByArgs['orderBy'] }
        : { orderBy?: FarmerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FarmerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFarmerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Farmer model
   */
  readonly fields: FarmerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Farmer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FarmerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    crops<T extends Farmer$cropsArgs<ExtArgs> = {}>(args?: Subset<T, Farmer$cropsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "findMany"> | Null>
    contracts<T extends Farmer$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Farmer$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany"> | Null>
    posts<T extends Farmer$postsArgs<ExtArgs> = {}>(args?: Subset<T, Farmer$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany"> | Null>
    messagesSent<T extends Farmer$messagesSentArgs<ExtArgs> = {}>(args?: Subset<T, Farmer$messagesSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    messagesReceived<T extends Farmer$messagesReceivedArgs<ExtArgs> = {}>(args?: Subset<T, Farmer$messagesReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends Farmer$likesArgs<ExtArgs> = {}>(args?: Subset<T, Farmer$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany"> | Null>
    scoreCalculations<T extends Farmer$scoreCalculationsArgs<ExtArgs> = {}>(args?: Subset<T, Farmer$scoreCalculationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Farmer model
   */ 
  interface FarmerFieldRefs {
    readonly id: FieldRef<"Farmer", 'Int'>
    readonly name: FieldRef<"Farmer", 'String'>
    readonly address: FieldRef<"Farmer", 'String'>
    readonly contactNo: FieldRef<"Farmer", 'String'>
    readonly email: FieldRef<"Farmer", 'String'>
    readonly password: FieldRef<"Farmer", 'String'>
    readonly landSize: FieldRef<"Farmer", 'Float'>
    readonly fulfilledContracts: FieldRef<"Farmer", 'Int'>
    readonly farmerScore: FieldRef<"Farmer", 'Float'>
    readonly avatar: FieldRef<"Farmer", 'String'>
    readonly createdAt: FieldRef<"Farmer", 'DateTime'>
    readonly updatedAt: FieldRef<"Farmer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Farmer findUnique
   */
  export type FarmerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter, which Farmer to fetch.
     */
    where: FarmerWhereUniqueInput
  }

  /**
   * Farmer findUniqueOrThrow
   */
  export type FarmerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter, which Farmer to fetch.
     */
    where: FarmerWhereUniqueInput
  }

  /**
   * Farmer findFirst
   */
  export type FarmerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter, which Farmer to fetch.
     */
    where?: FarmerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Farmers to fetch.
     */
    orderBy?: FarmerOrderByWithRelationInput | FarmerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Farmers.
     */
    cursor?: FarmerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Farmers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Farmers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Farmers.
     */
    distinct?: FarmerScalarFieldEnum | FarmerScalarFieldEnum[]
  }

  /**
   * Farmer findFirstOrThrow
   */
  export type FarmerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter, which Farmer to fetch.
     */
    where?: FarmerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Farmers to fetch.
     */
    orderBy?: FarmerOrderByWithRelationInput | FarmerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Farmers.
     */
    cursor?: FarmerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Farmers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Farmers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Farmers.
     */
    distinct?: FarmerScalarFieldEnum | FarmerScalarFieldEnum[]
  }

  /**
   * Farmer findMany
   */
  export type FarmerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter, which Farmers to fetch.
     */
    where?: FarmerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Farmers to fetch.
     */
    orderBy?: FarmerOrderByWithRelationInput | FarmerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Farmers.
     */
    cursor?: FarmerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Farmers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Farmers.
     */
    skip?: number
    distinct?: FarmerScalarFieldEnum | FarmerScalarFieldEnum[]
  }

  /**
   * Farmer create
   */
  export type FarmerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * The data needed to create a Farmer.
     */
    data: XOR<FarmerCreateInput, FarmerUncheckedCreateInput>
  }

  /**
   * Farmer createMany
   */
  export type FarmerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Farmers.
     */
    data: FarmerCreateManyInput | FarmerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Farmer createManyAndReturn
   */
  export type FarmerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Farmers.
     */
    data: FarmerCreateManyInput | FarmerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Farmer update
   */
  export type FarmerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * The data needed to update a Farmer.
     */
    data: XOR<FarmerUpdateInput, FarmerUncheckedUpdateInput>
    /**
     * Choose, which Farmer to update.
     */
    where: FarmerWhereUniqueInput
  }

  /**
   * Farmer updateMany
   */
  export type FarmerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Farmers.
     */
    data: XOR<FarmerUpdateManyMutationInput, FarmerUncheckedUpdateManyInput>
    /**
     * Filter which Farmers to update
     */
    where?: FarmerWhereInput
  }

  /**
   * Farmer upsert
   */
  export type FarmerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * The filter to search for the Farmer to update in case it exists.
     */
    where: FarmerWhereUniqueInput
    /**
     * In case the Farmer found by the `where` argument doesn't exist, create a new Farmer with this data.
     */
    create: XOR<FarmerCreateInput, FarmerUncheckedCreateInput>
    /**
     * In case the Farmer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FarmerUpdateInput, FarmerUncheckedUpdateInput>
  }

  /**
   * Farmer delete
   */
  export type FarmerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter which Farmer to delete.
     */
    where: FarmerWhereUniqueInput
  }

  /**
   * Farmer deleteMany
   */
  export type FarmerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Farmers to delete
     */
    where?: FarmerWhereInput
  }

  /**
   * Farmer.crops
   */
  export type Farmer$cropsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropInclude<ExtArgs> | null
    where?: CropWhereInput
    orderBy?: CropOrderByWithRelationInput | CropOrderByWithRelationInput[]
    cursor?: CropWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CropScalarFieldEnum | CropScalarFieldEnum[]
  }

  /**
   * Farmer.contracts
   */
  export type Farmer$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Farmer.posts
   */
  export type Farmer$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Farmer.messagesSent
   */
  export type Farmer$messagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Farmer.messagesReceived
   */
  export type Farmer$messagesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Farmer.likes
   */
  export type Farmer$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Farmer.scoreCalculations
   */
  export type Farmer$scoreCalculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
    where?: ScoreCalculationWhereInput
    orderBy?: ScoreCalculationOrderByWithRelationInput | ScoreCalculationOrderByWithRelationInput[]
    cursor?: ScoreCalculationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreCalculationScalarFieldEnum | ScoreCalculationScalarFieldEnum[]
  }

  /**
   * Farmer without action
   */
  export type FarmerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
  }


  /**
   * Model Contractor
   */

  export type AggregateContractor = {
    _count: ContractorCountAggregateOutputType | null
    _avg: ContractorAvgAggregateOutputType | null
    _sum: ContractorSumAggregateOutputType | null
    _min: ContractorMinAggregateOutputType | null
    _max: ContractorMaxAggregateOutputType | null
  }

  export type ContractorAvgAggregateOutputType = {
    id: number | null
    fulfilledContracts: number | null
    contractorScore: number | null
  }

  export type ContractorSumAggregateOutputType = {
    id: number | null
    fulfilledContracts: number | null
    contractorScore: number | null
  }

  export type ContractorMinAggregateOutputType = {
    id: number | null
    name: string | null
    contactNo: string | null
    password: string | null
    email: string | null
    address: string | null
    fulfilledContracts: number | null
    contractorScore: number | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    contactNo: string | null
    password: string | null
    email: string | null
    address: string | null
    fulfilledContracts: number | null
    contractorScore: number | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractorCountAggregateOutputType = {
    id: number
    name: number
    contactNo: number
    password: number
    email: number
    address: number
    fulfilledContracts: number
    contractorScore: number
    avatar: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContractorAvgAggregateInputType = {
    id?: true
    fulfilledContracts?: true
    contractorScore?: true
  }

  export type ContractorSumAggregateInputType = {
    id?: true
    fulfilledContracts?: true
    contractorScore?: true
  }

  export type ContractorMinAggregateInputType = {
    id?: true
    name?: true
    contactNo?: true
    password?: true
    email?: true
    address?: true
    fulfilledContracts?: true
    contractorScore?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractorMaxAggregateInputType = {
    id?: true
    name?: true
    contactNo?: true
    password?: true
    email?: true
    address?: true
    fulfilledContracts?: true
    contractorScore?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractorCountAggregateInputType = {
    id?: true
    name?: true
    contactNo?: true
    password?: true
    email?: true
    address?: true
    fulfilledContracts?: true
    contractorScore?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContractorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contractor to aggregate.
     */
    where?: ContractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contractors to fetch.
     */
    orderBy?: ContractorOrderByWithRelationInput | ContractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contractors
    **/
    _count?: true | ContractorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractorMaxAggregateInputType
  }

  export type GetContractorAggregateType<T extends ContractorAggregateArgs> = {
        [P in keyof T & keyof AggregateContractor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContractor[P]>
      : GetScalarType<T[P], AggregateContractor[P]>
  }




  export type ContractorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractorWhereInput
    orderBy?: ContractorOrderByWithAggregationInput | ContractorOrderByWithAggregationInput[]
    by: ContractorScalarFieldEnum[] | ContractorScalarFieldEnum
    having?: ContractorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractorCountAggregateInputType | true
    _avg?: ContractorAvgAggregateInputType
    _sum?: ContractorSumAggregateInputType
    _min?: ContractorMinAggregateInputType
    _max?: ContractorMaxAggregateInputType
  }

  export type ContractorGroupByOutputType = {
    id: number
    name: string
    contactNo: string
    password: string
    email: string | null
    address: string
    fulfilledContracts: number
    contractorScore: number
    avatar: string | null
    createdAt: Date
    updatedAt: Date
    _count: ContractorCountAggregateOutputType | null
    _avg: ContractorAvgAggregateOutputType | null
    _sum: ContractorSumAggregateOutputType | null
    _min: ContractorMinAggregateOutputType | null
    _max: ContractorMaxAggregateOutputType | null
  }

  type GetContractorGroupByPayload<T extends ContractorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractorGroupByOutputType[P]>
            : GetScalarType<T[P], ContractorGroupByOutputType[P]>
        }
      >
    >


  export type ContractorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactNo?: boolean
    password?: boolean
    email?: boolean
    address?: boolean
    fulfilledContracts?: boolean
    contractorScore?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contracts?: boolean | Contractor$contractsArgs<ExtArgs>
    posts?: boolean | Contractor$postsArgs<ExtArgs>
    messagesSent?: boolean | Contractor$messagesSentArgs<ExtArgs>
    messagesReceived?: boolean | Contractor$messagesReceivedArgs<ExtArgs>
    likes?: boolean | Contractor$likesArgs<ExtArgs>
    scoreCalculations?: boolean | Contractor$scoreCalculationsArgs<ExtArgs>
    _count?: boolean | ContractorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractor"]>

  export type ContractorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactNo?: boolean
    password?: boolean
    email?: boolean
    address?: boolean
    fulfilledContracts?: boolean
    contractorScore?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["contractor"]>

  export type ContractorSelectScalar = {
    id?: boolean
    name?: boolean
    contactNo?: boolean
    password?: boolean
    email?: boolean
    address?: boolean
    fulfilledContracts?: boolean
    contractorScore?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContractorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | Contractor$contractsArgs<ExtArgs>
    posts?: boolean | Contractor$postsArgs<ExtArgs>
    messagesSent?: boolean | Contractor$messagesSentArgs<ExtArgs>
    messagesReceived?: boolean | Contractor$messagesReceivedArgs<ExtArgs>
    likes?: boolean | Contractor$likesArgs<ExtArgs>
    scoreCalculations?: boolean | Contractor$scoreCalculationsArgs<ExtArgs>
    _count?: boolean | ContractorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContractorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ContractorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contractor"
    objects: {
      contracts: Prisma.$ContractPayload<ExtArgs>[]
      posts: Prisma.$PostPayload<ExtArgs>[]
      messagesSent: Prisma.$MessagePayload<ExtArgs>[]
      messagesReceived: Prisma.$MessagePayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
      scoreCalculations: Prisma.$ScoreCalculationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      contactNo: string
      password: string
      email: string | null
      address: string
      fulfilledContracts: number
      contractorScore: number
      avatar: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contractor"]>
    composites: {}
  }

  type ContractorGetPayload<S extends boolean | null | undefined | ContractorDefaultArgs> = $Result.GetResult<Prisma.$ContractorPayload, S>

  type ContractorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContractorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContractorCountAggregateInputType | true
    }

  export interface ContractorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contractor'], meta: { name: 'Contractor' } }
    /**
     * Find zero or one Contractor that matches the filter.
     * @param {ContractorFindUniqueArgs} args - Arguments to find a Contractor
     * @example
     * // Get one Contractor
     * const contractor = await prisma.contractor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractorFindUniqueArgs>(args: SelectSubset<T, ContractorFindUniqueArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contractor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContractorFindUniqueOrThrowArgs} args - Arguments to find a Contractor
     * @example
     * // Get one Contractor
     * const contractor = await prisma.contractor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractorFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contractor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorFindFirstArgs} args - Arguments to find a Contractor
     * @example
     * // Get one Contractor
     * const contractor = await prisma.contractor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractorFindFirstArgs>(args?: SelectSubset<T, ContractorFindFirstArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contractor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorFindFirstOrThrowArgs} args - Arguments to find a Contractor
     * @example
     * // Get one Contractor
     * const contractor = await prisma.contractor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractorFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contractors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contractors
     * const contractors = await prisma.contractor.findMany()
     * 
     * // Get first 10 Contractors
     * const contractors = await prisma.contractor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractorWithIdOnly = await prisma.contractor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractorFindManyArgs>(args?: SelectSubset<T, ContractorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contractor.
     * @param {ContractorCreateArgs} args - Arguments to create a Contractor.
     * @example
     * // Create one Contractor
     * const Contractor = await prisma.contractor.create({
     *   data: {
     *     // ... data to create a Contractor
     *   }
     * })
     * 
     */
    create<T extends ContractorCreateArgs>(args: SelectSubset<T, ContractorCreateArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contractors.
     * @param {ContractorCreateManyArgs} args - Arguments to create many Contractors.
     * @example
     * // Create many Contractors
     * const contractor = await prisma.contractor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractorCreateManyArgs>(args?: SelectSubset<T, ContractorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contractors and returns the data saved in the database.
     * @param {ContractorCreateManyAndReturnArgs} args - Arguments to create many Contractors.
     * @example
     * // Create many Contractors
     * const contractor = await prisma.contractor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contractors and only return the `id`
     * const contractorWithIdOnly = await prisma.contractor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractorCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contractor.
     * @param {ContractorDeleteArgs} args - Arguments to delete one Contractor.
     * @example
     * // Delete one Contractor
     * const Contractor = await prisma.contractor.delete({
     *   where: {
     *     // ... filter to delete one Contractor
     *   }
     * })
     * 
     */
    delete<T extends ContractorDeleteArgs>(args: SelectSubset<T, ContractorDeleteArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contractor.
     * @param {ContractorUpdateArgs} args - Arguments to update one Contractor.
     * @example
     * // Update one Contractor
     * const contractor = await prisma.contractor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractorUpdateArgs>(args: SelectSubset<T, ContractorUpdateArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contractors.
     * @param {ContractorDeleteManyArgs} args - Arguments to filter Contractors to delete.
     * @example
     * // Delete a few Contractors
     * const { count } = await prisma.contractor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractorDeleteManyArgs>(args?: SelectSubset<T, ContractorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contractors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contractors
     * const contractor = await prisma.contractor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractorUpdateManyArgs>(args: SelectSubset<T, ContractorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contractor.
     * @param {ContractorUpsertArgs} args - Arguments to update or create a Contractor.
     * @example
     * // Update or create a Contractor
     * const contractor = await prisma.contractor.upsert({
     *   create: {
     *     // ... data to create a Contractor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contractor we want to update
     *   }
     * })
     */
    upsert<T extends ContractorUpsertArgs>(args: SelectSubset<T, ContractorUpsertArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contractors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorCountArgs} args - Arguments to filter Contractors to count.
     * @example
     * // Count the number of Contractors
     * const count = await prisma.contractor.count({
     *   where: {
     *     // ... the filter for the Contractors we want to count
     *   }
     * })
    **/
    count<T extends ContractorCountArgs>(
      args?: Subset<T, ContractorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contractor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractorAggregateArgs>(args: Subset<T, ContractorAggregateArgs>): Prisma.PrismaPromise<GetContractorAggregateType<T>>

    /**
     * Group by Contractor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractorGroupByArgs['orderBy'] }
        : { orderBy?: ContractorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contractor model
   */
  readonly fields: ContractorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contractor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contracts<T extends Contractor$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Contractor$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany"> | Null>
    posts<T extends Contractor$postsArgs<ExtArgs> = {}>(args?: Subset<T, Contractor$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany"> | Null>
    messagesSent<T extends Contractor$messagesSentArgs<ExtArgs> = {}>(args?: Subset<T, Contractor$messagesSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    messagesReceived<T extends Contractor$messagesReceivedArgs<ExtArgs> = {}>(args?: Subset<T, Contractor$messagesReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends Contractor$likesArgs<ExtArgs> = {}>(args?: Subset<T, Contractor$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany"> | Null>
    scoreCalculations<T extends Contractor$scoreCalculationsArgs<ExtArgs> = {}>(args?: Subset<T, Contractor$scoreCalculationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contractor model
   */ 
  interface ContractorFieldRefs {
    readonly id: FieldRef<"Contractor", 'Int'>
    readonly name: FieldRef<"Contractor", 'String'>
    readonly contactNo: FieldRef<"Contractor", 'String'>
    readonly password: FieldRef<"Contractor", 'String'>
    readonly email: FieldRef<"Contractor", 'String'>
    readonly address: FieldRef<"Contractor", 'String'>
    readonly fulfilledContracts: FieldRef<"Contractor", 'Int'>
    readonly contractorScore: FieldRef<"Contractor", 'Float'>
    readonly avatar: FieldRef<"Contractor", 'String'>
    readonly createdAt: FieldRef<"Contractor", 'DateTime'>
    readonly updatedAt: FieldRef<"Contractor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contractor findUnique
   */
  export type ContractorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter, which Contractor to fetch.
     */
    where: ContractorWhereUniqueInput
  }

  /**
   * Contractor findUniqueOrThrow
   */
  export type ContractorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter, which Contractor to fetch.
     */
    where: ContractorWhereUniqueInput
  }

  /**
   * Contractor findFirst
   */
  export type ContractorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter, which Contractor to fetch.
     */
    where?: ContractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contractors to fetch.
     */
    orderBy?: ContractorOrderByWithRelationInput | ContractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contractors.
     */
    cursor?: ContractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contractors.
     */
    distinct?: ContractorScalarFieldEnum | ContractorScalarFieldEnum[]
  }

  /**
   * Contractor findFirstOrThrow
   */
  export type ContractorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter, which Contractor to fetch.
     */
    where?: ContractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contractors to fetch.
     */
    orderBy?: ContractorOrderByWithRelationInput | ContractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contractors.
     */
    cursor?: ContractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contractors.
     */
    distinct?: ContractorScalarFieldEnum | ContractorScalarFieldEnum[]
  }

  /**
   * Contractor findMany
   */
  export type ContractorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter, which Contractors to fetch.
     */
    where?: ContractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contractors to fetch.
     */
    orderBy?: ContractorOrderByWithRelationInput | ContractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contractors.
     */
    cursor?: ContractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contractors.
     */
    skip?: number
    distinct?: ContractorScalarFieldEnum | ContractorScalarFieldEnum[]
  }

  /**
   * Contractor create
   */
  export type ContractorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * The data needed to create a Contractor.
     */
    data: XOR<ContractorCreateInput, ContractorUncheckedCreateInput>
  }

  /**
   * Contractor createMany
   */
  export type ContractorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contractors.
     */
    data: ContractorCreateManyInput | ContractorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contractor createManyAndReturn
   */
  export type ContractorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Contractors.
     */
    data: ContractorCreateManyInput | ContractorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contractor update
   */
  export type ContractorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * The data needed to update a Contractor.
     */
    data: XOR<ContractorUpdateInput, ContractorUncheckedUpdateInput>
    /**
     * Choose, which Contractor to update.
     */
    where: ContractorWhereUniqueInput
  }

  /**
   * Contractor updateMany
   */
  export type ContractorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contractors.
     */
    data: XOR<ContractorUpdateManyMutationInput, ContractorUncheckedUpdateManyInput>
    /**
     * Filter which Contractors to update
     */
    where?: ContractorWhereInput
  }

  /**
   * Contractor upsert
   */
  export type ContractorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * The filter to search for the Contractor to update in case it exists.
     */
    where: ContractorWhereUniqueInput
    /**
     * In case the Contractor found by the `where` argument doesn't exist, create a new Contractor with this data.
     */
    create: XOR<ContractorCreateInput, ContractorUncheckedCreateInput>
    /**
     * In case the Contractor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractorUpdateInput, ContractorUncheckedUpdateInput>
  }

  /**
   * Contractor delete
   */
  export type ContractorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter which Contractor to delete.
     */
    where: ContractorWhereUniqueInput
  }

  /**
   * Contractor deleteMany
   */
  export type ContractorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contractors to delete
     */
    where?: ContractorWhereInput
  }

  /**
   * Contractor.contracts
   */
  export type Contractor$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contractor.posts
   */
  export type Contractor$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Contractor.messagesSent
   */
  export type Contractor$messagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Contractor.messagesReceived
   */
  export type Contractor$messagesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Contractor.likes
   */
  export type Contractor$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Contractor.scoreCalculations
   */
  export type Contractor$scoreCalculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
    where?: ScoreCalculationWhereInput
    orderBy?: ScoreCalculationOrderByWithRelationInput | ScoreCalculationOrderByWithRelationInput[]
    cursor?: ScoreCalculationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreCalculationScalarFieldEnum | ScoreCalculationScalarFieldEnum[]
  }

  /**
   * Contractor without action
   */
  export type ContractorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
  }


  /**
   * Model Crop
   */

  export type AggregateCrop = {
    _count: CropCountAggregateOutputType | null
    _avg: CropAvgAggregateOutputType | null
    _sum: CropSumAggregateOutputType | null
    _min: CropMinAggregateOutputType | null
    _max: CropMaxAggregateOutputType | null
  }

  export type CropAvgAggregateOutputType = {
    id: number | null
  }

  export type CropSumAggregateOutputType = {
    id: number | null
  }

  export type CropMinAggregateOutputType = {
    id: number | null
    name: string | null
    season: $Enums.cropSeason | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CropMaxAggregateOutputType = {
    id: number | null
    name: string | null
    season: $Enums.cropSeason | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CropCountAggregateOutputType = {
    id: number
    name: number
    season: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CropAvgAggregateInputType = {
    id?: true
  }

  export type CropSumAggregateInputType = {
    id?: true
  }

  export type CropMinAggregateInputType = {
    id?: true
    name?: true
    season?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CropMaxAggregateInputType = {
    id?: true
    name?: true
    season?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CropCountAggregateInputType = {
    id?: true
    name?: true
    season?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CropAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Crop to aggregate.
     */
    where?: CropWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Crops to fetch.
     */
    orderBy?: CropOrderByWithRelationInput | CropOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CropWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Crops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Crops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Crops
    **/
    _count?: true | CropCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CropAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CropSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CropMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CropMaxAggregateInputType
  }

  export type GetCropAggregateType<T extends CropAggregateArgs> = {
        [P in keyof T & keyof AggregateCrop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCrop[P]>
      : GetScalarType<T[P], AggregateCrop[P]>
  }




  export type CropGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CropWhereInput
    orderBy?: CropOrderByWithAggregationInput | CropOrderByWithAggregationInput[]
    by: CropScalarFieldEnum[] | CropScalarFieldEnum
    having?: CropScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CropCountAggregateInputType | true
    _avg?: CropAvgAggregateInputType
    _sum?: CropSumAggregateInputType
    _min?: CropMinAggregateInputType
    _max?: CropMaxAggregateInputType
  }

  export type CropGroupByOutputType = {
    id: number
    name: string
    season: $Enums.cropSeason
    createdAt: Date
    updatedAt: Date
    _count: CropCountAggregateOutputType | null
    _avg: CropAvgAggregateOutputType | null
    _sum: CropSumAggregateOutputType | null
    _min: CropMinAggregateOutputType | null
    _max: CropMaxAggregateOutputType | null
  }

  type GetCropGroupByPayload<T extends CropGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CropGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CropGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CropGroupByOutputType[P]>
            : GetScalarType<T[P], CropGroupByOutputType[P]>
        }
      >
    >


  export type CropSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    season?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    farmers?: boolean | Crop$farmersArgs<ExtArgs>
    contracts?: boolean | Crop$contractsArgs<ExtArgs>
    _count?: boolean | CropCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["crop"]>

  export type CropSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    season?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["crop"]>

  export type CropSelectScalar = {
    id?: boolean
    name?: boolean
    season?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CropInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmers?: boolean | Crop$farmersArgs<ExtArgs>
    contracts?: boolean | Crop$contractsArgs<ExtArgs>
    _count?: boolean | CropCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CropIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CropPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Crop"
    objects: {
      farmers: Prisma.$FarmerPayload<ExtArgs>[]
      contracts: Prisma.$ContractPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      season: $Enums.cropSeason
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["crop"]>
    composites: {}
  }

  type CropGetPayload<S extends boolean | null | undefined | CropDefaultArgs> = $Result.GetResult<Prisma.$CropPayload, S>

  type CropCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CropFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CropCountAggregateInputType | true
    }

  export interface CropDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Crop'], meta: { name: 'Crop' } }
    /**
     * Find zero or one Crop that matches the filter.
     * @param {CropFindUniqueArgs} args - Arguments to find a Crop
     * @example
     * // Get one Crop
     * const crop = await prisma.crop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CropFindUniqueArgs>(args: SelectSubset<T, CropFindUniqueArgs<ExtArgs>>): Prisma__CropClient<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Crop that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CropFindUniqueOrThrowArgs} args - Arguments to find a Crop
     * @example
     * // Get one Crop
     * const crop = await prisma.crop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CropFindUniqueOrThrowArgs>(args: SelectSubset<T, CropFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CropClient<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Crop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropFindFirstArgs} args - Arguments to find a Crop
     * @example
     * // Get one Crop
     * const crop = await prisma.crop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CropFindFirstArgs>(args?: SelectSubset<T, CropFindFirstArgs<ExtArgs>>): Prisma__CropClient<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Crop that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropFindFirstOrThrowArgs} args - Arguments to find a Crop
     * @example
     * // Get one Crop
     * const crop = await prisma.crop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CropFindFirstOrThrowArgs>(args?: SelectSubset<T, CropFindFirstOrThrowArgs<ExtArgs>>): Prisma__CropClient<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Crops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Crops
     * const crops = await prisma.crop.findMany()
     * 
     * // Get first 10 Crops
     * const crops = await prisma.crop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cropWithIdOnly = await prisma.crop.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CropFindManyArgs>(args?: SelectSubset<T, CropFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Crop.
     * @param {CropCreateArgs} args - Arguments to create a Crop.
     * @example
     * // Create one Crop
     * const Crop = await prisma.crop.create({
     *   data: {
     *     // ... data to create a Crop
     *   }
     * })
     * 
     */
    create<T extends CropCreateArgs>(args: SelectSubset<T, CropCreateArgs<ExtArgs>>): Prisma__CropClient<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Crops.
     * @param {CropCreateManyArgs} args - Arguments to create many Crops.
     * @example
     * // Create many Crops
     * const crop = await prisma.crop.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CropCreateManyArgs>(args?: SelectSubset<T, CropCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Crops and returns the data saved in the database.
     * @param {CropCreateManyAndReturnArgs} args - Arguments to create many Crops.
     * @example
     * // Create many Crops
     * const crop = await prisma.crop.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Crops and only return the `id`
     * const cropWithIdOnly = await prisma.crop.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CropCreateManyAndReturnArgs>(args?: SelectSubset<T, CropCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Crop.
     * @param {CropDeleteArgs} args - Arguments to delete one Crop.
     * @example
     * // Delete one Crop
     * const Crop = await prisma.crop.delete({
     *   where: {
     *     // ... filter to delete one Crop
     *   }
     * })
     * 
     */
    delete<T extends CropDeleteArgs>(args: SelectSubset<T, CropDeleteArgs<ExtArgs>>): Prisma__CropClient<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Crop.
     * @param {CropUpdateArgs} args - Arguments to update one Crop.
     * @example
     * // Update one Crop
     * const crop = await prisma.crop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CropUpdateArgs>(args: SelectSubset<T, CropUpdateArgs<ExtArgs>>): Prisma__CropClient<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Crops.
     * @param {CropDeleteManyArgs} args - Arguments to filter Crops to delete.
     * @example
     * // Delete a few Crops
     * const { count } = await prisma.crop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CropDeleteManyArgs>(args?: SelectSubset<T, CropDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Crops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Crops
     * const crop = await prisma.crop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CropUpdateManyArgs>(args: SelectSubset<T, CropUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Crop.
     * @param {CropUpsertArgs} args - Arguments to update or create a Crop.
     * @example
     * // Update or create a Crop
     * const crop = await prisma.crop.upsert({
     *   create: {
     *     // ... data to create a Crop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Crop we want to update
     *   }
     * })
     */
    upsert<T extends CropUpsertArgs>(args: SelectSubset<T, CropUpsertArgs<ExtArgs>>): Prisma__CropClient<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Crops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropCountArgs} args - Arguments to filter Crops to count.
     * @example
     * // Count the number of Crops
     * const count = await prisma.crop.count({
     *   where: {
     *     // ... the filter for the Crops we want to count
     *   }
     * })
    **/
    count<T extends CropCountArgs>(
      args?: Subset<T, CropCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CropCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Crop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CropAggregateArgs>(args: Subset<T, CropAggregateArgs>): Prisma.PrismaPromise<GetCropAggregateType<T>>

    /**
     * Group by Crop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CropGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CropGroupByArgs['orderBy'] }
        : { orderBy?: CropGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CropGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCropGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Crop model
   */
  readonly fields: CropFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Crop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CropClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    farmers<T extends Crop$farmersArgs<ExtArgs> = {}>(args?: Subset<T, Crop$farmersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findMany"> | Null>
    contracts<T extends Crop$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Crop$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Crop model
   */ 
  interface CropFieldRefs {
    readonly id: FieldRef<"Crop", 'Int'>
    readonly name: FieldRef<"Crop", 'String'>
    readonly season: FieldRef<"Crop", 'cropSeason'>
    readonly createdAt: FieldRef<"Crop", 'DateTime'>
    readonly updatedAt: FieldRef<"Crop", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Crop findUnique
   */
  export type CropFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropInclude<ExtArgs> | null
    /**
     * Filter, which Crop to fetch.
     */
    where: CropWhereUniqueInput
  }

  /**
   * Crop findUniqueOrThrow
   */
  export type CropFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropInclude<ExtArgs> | null
    /**
     * Filter, which Crop to fetch.
     */
    where: CropWhereUniqueInput
  }

  /**
   * Crop findFirst
   */
  export type CropFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropInclude<ExtArgs> | null
    /**
     * Filter, which Crop to fetch.
     */
    where?: CropWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Crops to fetch.
     */
    orderBy?: CropOrderByWithRelationInput | CropOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Crops.
     */
    cursor?: CropWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Crops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Crops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Crops.
     */
    distinct?: CropScalarFieldEnum | CropScalarFieldEnum[]
  }

  /**
   * Crop findFirstOrThrow
   */
  export type CropFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropInclude<ExtArgs> | null
    /**
     * Filter, which Crop to fetch.
     */
    where?: CropWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Crops to fetch.
     */
    orderBy?: CropOrderByWithRelationInput | CropOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Crops.
     */
    cursor?: CropWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Crops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Crops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Crops.
     */
    distinct?: CropScalarFieldEnum | CropScalarFieldEnum[]
  }

  /**
   * Crop findMany
   */
  export type CropFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropInclude<ExtArgs> | null
    /**
     * Filter, which Crops to fetch.
     */
    where?: CropWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Crops to fetch.
     */
    orderBy?: CropOrderByWithRelationInput | CropOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Crops.
     */
    cursor?: CropWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Crops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Crops.
     */
    skip?: number
    distinct?: CropScalarFieldEnum | CropScalarFieldEnum[]
  }

  /**
   * Crop create
   */
  export type CropCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropInclude<ExtArgs> | null
    /**
     * The data needed to create a Crop.
     */
    data: XOR<CropCreateInput, CropUncheckedCreateInput>
  }

  /**
   * Crop createMany
   */
  export type CropCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Crops.
     */
    data: CropCreateManyInput | CropCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Crop createManyAndReturn
   */
  export type CropCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Crops.
     */
    data: CropCreateManyInput | CropCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Crop update
   */
  export type CropUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropInclude<ExtArgs> | null
    /**
     * The data needed to update a Crop.
     */
    data: XOR<CropUpdateInput, CropUncheckedUpdateInput>
    /**
     * Choose, which Crop to update.
     */
    where: CropWhereUniqueInput
  }

  /**
   * Crop updateMany
   */
  export type CropUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Crops.
     */
    data: XOR<CropUpdateManyMutationInput, CropUncheckedUpdateManyInput>
    /**
     * Filter which Crops to update
     */
    where?: CropWhereInput
  }

  /**
   * Crop upsert
   */
  export type CropUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropInclude<ExtArgs> | null
    /**
     * The filter to search for the Crop to update in case it exists.
     */
    where: CropWhereUniqueInput
    /**
     * In case the Crop found by the `where` argument doesn't exist, create a new Crop with this data.
     */
    create: XOR<CropCreateInput, CropUncheckedCreateInput>
    /**
     * In case the Crop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CropUpdateInput, CropUncheckedUpdateInput>
  }

  /**
   * Crop delete
   */
  export type CropDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropInclude<ExtArgs> | null
    /**
     * Filter which Crop to delete.
     */
    where: CropWhereUniqueInput
  }

  /**
   * Crop deleteMany
   */
  export type CropDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Crops to delete
     */
    where?: CropWhereInput
  }

  /**
   * Crop.farmers
   */
  export type Crop$farmersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    where?: FarmerWhereInput
    orderBy?: FarmerOrderByWithRelationInput | FarmerOrderByWithRelationInput[]
    cursor?: FarmerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FarmerScalarFieldEnum | FarmerScalarFieldEnum[]
  }

  /**
   * Crop.contracts
   */
  export type Crop$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Crop without action
   */
  export type CropDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Crop
     */
    select?: CropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropInclude<ExtArgs> | null
  }


  /**
   * Model Contract
   */

  export type AggregateContract = {
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  export type ContractAvgAggregateOutputType = {
    id: number | null
    farmerId: number | null
    contractorId: number | null
    cropId: number | null
    landSize: number | null
    amount: number | null
    advancePayment: number | null
    expectedYield: number | null
    prefixedPrice: number | null
  }

  export type ContractSumAggregateOutputType = {
    id: number | null
    farmerId: number | null
    contractorId: number | null
    cropId: number | null
    landSize: number | null
    amount: number | null
    advancePayment: number | null
    expectedYield: number | null
    prefixedPrice: number | null
  }

  export type ContractMinAggregateOutputType = {
    id: number | null
    farmerId: number | null
    contractorId: number | null
    cropId: number | null
    landSize: number | null
    amount: number | null
    advancePayment: number | null
    expectedYield: number | null
    prefixedPrice: number | null
    startDate: Date | null
    endDate: Date | null
    insuranceFactors: string | null
    status: $Enums.cropStatus | null
    contractStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractMaxAggregateOutputType = {
    id: number | null
    farmerId: number | null
    contractorId: number | null
    cropId: number | null
    landSize: number | null
    amount: number | null
    advancePayment: number | null
    expectedYield: number | null
    prefixedPrice: number | null
    startDate: Date | null
    endDate: Date | null
    insuranceFactors: string | null
    status: $Enums.cropStatus | null
    contractStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractCountAggregateOutputType = {
    id: number
    farmerId: number
    contractorId: number
    cropId: number
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: number
    endDate: number
    insuranceFactors: number
    status: number
    contractStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContractAvgAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
    cropId?: true
    landSize?: true
    amount?: true
    advancePayment?: true
    expectedYield?: true
    prefixedPrice?: true
  }

  export type ContractSumAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
    cropId?: true
    landSize?: true
    amount?: true
    advancePayment?: true
    expectedYield?: true
    prefixedPrice?: true
  }

  export type ContractMinAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
    cropId?: true
    landSize?: true
    amount?: true
    advancePayment?: true
    expectedYield?: true
    prefixedPrice?: true
    startDate?: true
    endDate?: true
    insuranceFactors?: true
    status?: true
    contractStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractMaxAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
    cropId?: true
    landSize?: true
    amount?: true
    advancePayment?: true
    expectedYield?: true
    prefixedPrice?: true
    startDate?: true
    endDate?: true
    insuranceFactors?: true
    status?: true
    contractStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractCountAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
    cropId?: true
    landSize?: true
    amount?: true
    advancePayment?: true
    expectedYield?: true
    prefixedPrice?: true
    startDate?: true
    endDate?: true
    insuranceFactors?: true
    status?: true
    contractStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contract to aggregate.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contracts
    **/
    _count?: true | ContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractMaxAggregateInputType
  }

  export type GetContractAggregateType<T extends ContractAggregateArgs> = {
        [P in keyof T & keyof AggregateContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContract[P]>
      : GetScalarType<T[P], AggregateContract[P]>
  }




  export type ContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithAggregationInput | ContractOrderByWithAggregationInput[]
    by: ContractScalarFieldEnum[] | ContractScalarFieldEnum
    having?: ContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractCountAggregateInputType | true
    _avg?: ContractAvgAggregateInputType
    _sum?: ContractSumAggregateInputType
    _min?: ContractMinAggregateInputType
    _max?: ContractMaxAggregateInputType
  }

  export type ContractGroupByOutputType = {
    id: number
    farmerId: number
    contractorId: number
    cropId: number
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date
    endDate: Date
    insuranceFactors: string
    status: $Enums.cropStatus
    contractStatus: string
    createdAt: Date
    updatedAt: Date
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  type GetContractGroupByPayload<T extends ContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractGroupByOutputType[P]>
            : GetScalarType<T[P], ContractGroupByOutputType[P]>
        }
      >
    >


  export type ContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    farmerId?: boolean
    contractorId?: boolean
    cropId?: boolean
    landSize?: boolean
    amount?: boolean
    advancePayment?: boolean
    expectedYield?: boolean
    prefixedPrice?: boolean
    startDate?: boolean
    endDate?: boolean
    insuranceFactors?: boolean
    status?: boolean
    contractStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    farmer?: boolean | FarmerDefaultArgs<ExtArgs>
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
    crop?: boolean | CropDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    farmerId?: boolean
    contractorId?: boolean
    cropId?: boolean
    landSize?: boolean
    amount?: boolean
    advancePayment?: boolean
    expectedYield?: boolean
    prefixedPrice?: boolean
    startDate?: boolean
    endDate?: boolean
    insuranceFactors?: boolean
    status?: boolean
    contractStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    farmer?: boolean | FarmerDefaultArgs<ExtArgs>
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
    crop?: boolean | CropDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectScalar = {
    id?: boolean
    farmerId?: boolean
    contractorId?: boolean
    cropId?: boolean
    landSize?: boolean
    amount?: boolean
    advancePayment?: boolean
    expectedYield?: boolean
    prefixedPrice?: boolean
    startDate?: boolean
    endDate?: boolean
    insuranceFactors?: boolean
    status?: boolean
    contractStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | FarmerDefaultArgs<ExtArgs>
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
    crop?: boolean | CropDefaultArgs<ExtArgs>
  }
  export type ContractIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | FarmerDefaultArgs<ExtArgs>
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
    crop?: boolean | CropDefaultArgs<ExtArgs>
  }

  export type $ContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contract"
    objects: {
      farmer: Prisma.$FarmerPayload<ExtArgs>
      contractor: Prisma.$ContractorPayload<ExtArgs>
      crop: Prisma.$CropPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      farmerId: number
      contractorId: number
      cropId: number
      landSize: number
      amount: number
      advancePayment: number
      expectedYield: number
      prefixedPrice: number
      startDate: Date
      endDate: Date
      insuranceFactors: string
      status: $Enums.cropStatus
      contractStatus: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contract"]>
    composites: {}
  }

  type ContractGetPayload<S extends boolean | null | undefined | ContractDefaultArgs> = $Result.GetResult<Prisma.$ContractPayload, S>

  type ContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContractFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContractCountAggregateInputType | true
    }

  export interface ContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contract'], meta: { name: 'Contract' } }
    /**
     * Find zero or one Contract that matches the filter.
     * @param {ContractFindUniqueArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractFindUniqueArgs>(args: SelectSubset<T, ContractFindUniqueArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contract that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContractFindUniqueOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractFindFirstArgs>(args?: SelectSubset<T, ContractFindFirstArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contracts
     * const contracts = await prisma.contract.findMany()
     * 
     * // Get first 10 Contracts
     * const contracts = await prisma.contract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractWithIdOnly = await prisma.contract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractFindManyArgs>(args?: SelectSubset<T, ContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contract.
     * @param {ContractCreateArgs} args - Arguments to create a Contract.
     * @example
     * // Create one Contract
     * const Contract = await prisma.contract.create({
     *   data: {
     *     // ... data to create a Contract
     *   }
     * })
     * 
     */
    create<T extends ContractCreateArgs>(args: SelectSubset<T, ContractCreateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contracts.
     * @param {ContractCreateManyArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractCreateManyArgs>(args?: SelectSubset<T, ContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contracts and returns the data saved in the database.
     * @param {ContractCreateManyAndReturnArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contracts and only return the `id`
     * const contractWithIdOnly = await prisma.contract.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contract.
     * @param {ContractDeleteArgs} args - Arguments to delete one Contract.
     * @example
     * // Delete one Contract
     * const Contract = await prisma.contract.delete({
     *   where: {
     *     // ... filter to delete one Contract
     *   }
     * })
     * 
     */
    delete<T extends ContractDeleteArgs>(args: SelectSubset<T, ContractDeleteArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contract.
     * @param {ContractUpdateArgs} args - Arguments to update one Contract.
     * @example
     * // Update one Contract
     * const contract = await prisma.contract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractUpdateArgs>(args: SelectSubset<T, ContractUpdateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contracts.
     * @param {ContractDeleteManyArgs} args - Arguments to filter Contracts to delete.
     * @example
     * // Delete a few Contracts
     * const { count } = await prisma.contract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractDeleteManyArgs>(args?: SelectSubset<T, ContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractUpdateManyArgs>(args: SelectSubset<T, ContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contract.
     * @param {ContractUpsertArgs} args - Arguments to update or create a Contract.
     * @example
     * // Update or create a Contract
     * const contract = await prisma.contract.upsert({
     *   create: {
     *     // ... data to create a Contract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contract we want to update
     *   }
     * })
     */
    upsert<T extends ContractUpsertArgs>(args: SelectSubset<T, ContractUpsertArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractCountArgs} args - Arguments to filter Contracts to count.
     * @example
     * // Count the number of Contracts
     * const count = await prisma.contract.count({
     *   where: {
     *     // ... the filter for the Contracts we want to count
     *   }
     * })
    **/
    count<T extends ContractCountArgs>(
      args?: Subset<T, ContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractAggregateArgs>(args: Subset<T, ContractAggregateArgs>): Prisma.PrismaPromise<GetContractAggregateType<T>>

    /**
     * Group by Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractGroupByArgs['orderBy'] }
        : { orderBy?: ContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contract model
   */
  readonly fields: ContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    farmer<T extends FarmerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FarmerDefaultArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    contractor<T extends ContractorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractorDefaultArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    crop<T extends CropDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CropDefaultArgs<ExtArgs>>): Prisma__CropClient<$Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contract model
   */ 
  interface ContractFieldRefs {
    readonly id: FieldRef<"Contract", 'Int'>
    readonly farmerId: FieldRef<"Contract", 'Int'>
    readonly contractorId: FieldRef<"Contract", 'Int'>
    readonly cropId: FieldRef<"Contract", 'Int'>
    readonly landSize: FieldRef<"Contract", 'Float'>
    readonly amount: FieldRef<"Contract", 'Float'>
    readonly advancePayment: FieldRef<"Contract", 'Float'>
    readonly expectedYield: FieldRef<"Contract", 'Float'>
    readonly prefixedPrice: FieldRef<"Contract", 'Float'>
    readonly startDate: FieldRef<"Contract", 'DateTime'>
    readonly endDate: FieldRef<"Contract", 'DateTime'>
    readonly insuranceFactors: FieldRef<"Contract", 'String'>
    readonly status: FieldRef<"Contract", 'cropStatus'>
    readonly contractStatus: FieldRef<"Contract", 'String'>
    readonly createdAt: FieldRef<"Contract", 'DateTime'>
    readonly updatedAt: FieldRef<"Contract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contract findUnique
   */
  export type ContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findUniqueOrThrow
   */
  export type ContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findFirst
   */
  export type ContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findFirstOrThrow
   */
  export type ContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findMany
   */
  export type ContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract create
   */
  export type ContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to create a Contract.
     */
    data: XOR<ContractCreateInput, ContractUncheckedCreateInput>
  }

  /**
   * Contract createMany
   */
  export type ContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contract createManyAndReturn
   */
  export type ContractCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contract update
   */
  export type ContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to update a Contract.
     */
    data: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
    /**
     * Choose, which Contract to update.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract updateMany
   */
  export type ContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractWhereInput
  }

  /**
   * Contract upsert
   */
  export type ContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The filter to search for the Contract to update in case it exists.
     */
    where: ContractWhereUniqueInput
    /**
     * In case the Contract found by the `where` argument doesn't exist, create a new Contract with this data.
     */
    create: XOR<ContractCreateInput, ContractUncheckedCreateInput>
    /**
     * In case the Contract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
  }

  /**
   * Contract delete
   */
  export type ContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter which Contract to delete.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract deleteMany
   */
  export type ContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contracts to delete
     */
    where?: ContractWhereInput
  }

  /**
   * Contract without action
   */
  export type ContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
  }


  /**
   * Model ScoreCalculation
   */

  export type AggregateScoreCalculation = {
    _count: ScoreCalculationCountAggregateOutputType | null
    _avg: ScoreCalculationAvgAggregateOutputType | null
    _sum: ScoreCalculationSumAggregateOutputType | null
    _min: ScoreCalculationMinAggregateOutputType | null
    _max: ScoreCalculationMaxAggregateOutputType | null
  }

  export type ScoreCalculationAvgAggregateOutputType = {
    id: number | null
    farmerId: number | null
    contractorId: number | null
    score: number | null
  }

  export type ScoreCalculationSumAggregateOutputType = {
    id: number | null
    farmerId: number | null
    contractorId: number | null
    score: number | null
  }

  export type ScoreCalculationMinAggregateOutputType = {
    id: number | null
    farmerId: number | null
    contractorId: number | null
    score: number | null
    calculationDate: Date | null
    criteria: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScoreCalculationMaxAggregateOutputType = {
    id: number | null
    farmerId: number | null
    contractorId: number | null
    score: number | null
    calculationDate: Date | null
    criteria: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScoreCalculationCountAggregateOutputType = {
    id: number
    farmerId: number
    contractorId: number
    score: number
    calculationDate: number
    criteria: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScoreCalculationAvgAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
    score?: true
  }

  export type ScoreCalculationSumAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
    score?: true
  }

  export type ScoreCalculationMinAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
    score?: true
    calculationDate?: true
    criteria?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScoreCalculationMaxAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
    score?: true
    calculationDate?: true
    criteria?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScoreCalculationCountAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
    score?: true
    calculationDate?: true
    criteria?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScoreCalculationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreCalculation to aggregate.
     */
    where?: ScoreCalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreCalculations to fetch.
     */
    orderBy?: ScoreCalculationOrderByWithRelationInput | ScoreCalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScoreCalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreCalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreCalculations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScoreCalculations
    **/
    _count?: true | ScoreCalculationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScoreCalculationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScoreCalculationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScoreCalculationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScoreCalculationMaxAggregateInputType
  }

  export type GetScoreCalculationAggregateType<T extends ScoreCalculationAggregateArgs> = {
        [P in keyof T & keyof AggregateScoreCalculation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScoreCalculation[P]>
      : GetScalarType<T[P], AggregateScoreCalculation[P]>
  }




  export type ScoreCalculationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreCalculationWhereInput
    orderBy?: ScoreCalculationOrderByWithAggregationInput | ScoreCalculationOrderByWithAggregationInput[]
    by: ScoreCalculationScalarFieldEnum[] | ScoreCalculationScalarFieldEnum
    having?: ScoreCalculationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScoreCalculationCountAggregateInputType | true
    _avg?: ScoreCalculationAvgAggregateInputType
    _sum?: ScoreCalculationSumAggregateInputType
    _min?: ScoreCalculationMinAggregateInputType
    _max?: ScoreCalculationMaxAggregateInputType
  }

  export type ScoreCalculationGroupByOutputType = {
    id: number
    farmerId: number | null
    contractorId: number | null
    score: number
    calculationDate: Date
    criteria: string
    createdAt: Date
    updatedAt: Date
    _count: ScoreCalculationCountAggregateOutputType | null
    _avg: ScoreCalculationAvgAggregateOutputType | null
    _sum: ScoreCalculationSumAggregateOutputType | null
    _min: ScoreCalculationMinAggregateOutputType | null
    _max: ScoreCalculationMaxAggregateOutputType | null
  }

  type GetScoreCalculationGroupByPayload<T extends ScoreCalculationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScoreCalculationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScoreCalculationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScoreCalculationGroupByOutputType[P]>
            : GetScalarType<T[P], ScoreCalculationGroupByOutputType[P]>
        }
      >
    >


  export type ScoreCalculationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    farmerId?: boolean
    contractorId?: boolean
    score?: boolean
    calculationDate?: boolean
    criteria?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    farmer?: boolean | ScoreCalculation$farmerArgs<ExtArgs>
    contractor?: boolean | ScoreCalculation$contractorArgs<ExtArgs>
  }, ExtArgs["result"]["scoreCalculation"]>

  export type ScoreCalculationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    farmerId?: boolean
    contractorId?: boolean
    score?: boolean
    calculationDate?: boolean
    criteria?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    farmer?: boolean | ScoreCalculation$farmerArgs<ExtArgs>
    contractor?: boolean | ScoreCalculation$contractorArgs<ExtArgs>
  }, ExtArgs["result"]["scoreCalculation"]>

  export type ScoreCalculationSelectScalar = {
    id?: boolean
    farmerId?: boolean
    contractorId?: boolean
    score?: boolean
    calculationDate?: boolean
    criteria?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScoreCalculationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | ScoreCalculation$farmerArgs<ExtArgs>
    contractor?: boolean | ScoreCalculation$contractorArgs<ExtArgs>
  }
  export type ScoreCalculationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | ScoreCalculation$farmerArgs<ExtArgs>
    contractor?: boolean | ScoreCalculation$contractorArgs<ExtArgs>
  }

  export type $ScoreCalculationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScoreCalculation"
    objects: {
      farmer: Prisma.$FarmerPayload<ExtArgs> | null
      contractor: Prisma.$ContractorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      farmerId: number | null
      contractorId: number | null
      score: number
      calculationDate: Date
      criteria: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scoreCalculation"]>
    composites: {}
  }

  type ScoreCalculationGetPayload<S extends boolean | null | undefined | ScoreCalculationDefaultArgs> = $Result.GetResult<Prisma.$ScoreCalculationPayload, S>

  type ScoreCalculationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScoreCalculationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScoreCalculationCountAggregateInputType | true
    }

  export interface ScoreCalculationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScoreCalculation'], meta: { name: 'ScoreCalculation' } }
    /**
     * Find zero or one ScoreCalculation that matches the filter.
     * @param {ScoreCalculationFindUniqueArgs} args - Arguments to find a ScoreCalculation
     * @example
     * // Get one ScoreCalculation
     * const scoreCalculation = await prisma.scoreCalculation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScoreCalculationFindUniqueArgs>(args: SelectSubset<T, ScoreCalculationFindUniqueArgs<ExtArgs>>): Prisma__ScoreCalculationClient<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScoreCalculation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScoreCalculationFindUniqueOrThrowArgs} args - Arguments to find a ScoreCalculation
     * @example
     * // Get one ScoreCalculation
     * const scoreCalculation = await prisma.scoreCalculation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScoreCalculationFindUniqueOrThrowArgs>(args: SelectSubset<T, ScoreCalculationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScoreCalculationClient<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScoreCalculation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCalculationFindFirstArgs} args - Arguments to find a ScoreCalculation
     * @example
     * // Get one ScoreCalculation
     * const scoreCalculation = await prisma.scoreCalculation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScoreCalculationFindFirstArgs>(args?: SelectSubset<T, ScoreCalculationFindFirstArgs<ExtArgs>>): Prisma__ScoreCalculationClient<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScoreCalculation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCalculationFindFirstOrThrowArgs} args - Arguments to find a ScoreCalculation
     * @example
     * // Get one ScoreCalculation
     * const scoreCalculation = await prisma.scoreCalculation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScoreCalculationFindFirstOrThrowArgs>(args?: SelectSubset<T, ScoreCalculationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScoreCalculationClient<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScoreCalculations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCalculationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScoreCalculations
     * const scoreCalculations = await prisma.scoreCalculation.findMany()
     * 
     * // Get first 10 ScoreCalculations
     * const scoreCalculations = await prisma.scoreCalculation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scoreCalculationWithIdOnly = await prisma.scoreCalculation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScoreCalculationFindManyArgs>(args?: SelectSubset<T, ScoreCalculationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScoreCalculation.
     * @param {ScoreCalculationCreateArgs} args - Arguments to create a ScoreCalculation.
     * @example
     * // Create one ScoreCalculation
     * const ScoreCalculation = await prisma.scoreCalculation.create({
     *   data: {
     *     // ... data to create a ScoreCalculation
     *   }
     * })
     * 
     */
    create<T extends ScoreCalculationCreateArgs>(args: SelectSubset<T, ScoreCalculationCreateArgs<ExtArgs>>): Prisma__ScoreCalculationClient<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScoreCalculations.
     * @param {ScoreCalculationCreateManyArgs} args - Arguments to create many ScoreCalculations.
     * @example
     * // Create many ScoreCalculations
     * const scoreCalculation = await prisma.scoreCalculation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScoreCalculationCreateManyArgs>(args?: SelectSubset<T, ScoreCalculationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScoreCalculations and returns the data saved in the database.
     * @param {ScoreCalculationCreateManyAndReturnArgs} args - Arguments to create many ScoreCalculations.
     * @example
     * // Create many ScoreCalculations
     * const scoreCalculation = await prisma.scoreCalculation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScoreCalculations and only return the `id`
     * const scoreCalculationWithIdOnly = await prisma.scoreCalculation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScoreCalculationCreateManyAndReturnArgs>(args?: SelectSubset<T, ScoreCalculationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ScoreCalculation.
     * @param {ScoreCalculationDeleteArgs} args - Arguments to delete one ScoreCalculation.
     * @example
     * // Delete one ScoreCalculation
     * const ScoreCalculation = await prisma.scoreCalculation.delete({
     *   where: {
     *     // ... filter to delete one ScoreCalculation
     *   }
     * })
     * 
     */
    delete<T extends ScoreCalculationDeleteArgs>(args: SelectSubset<T, ScoreCalculationDeleteArgs<ExtArgs>>): Prisma__ScoreCalculationClient<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScoreCalculation.
     * @param {ScoreCalculationUpdateArgs} args - Arguments to update one ScoreCalculation.
     * @example
     * // Update one ScoreCalculation
     * const scoreCalculation = await prisma.scoreCalculation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScoreCalculationUpdateArgs>(args: SelectSubset<T, ScoreCalculationUpdateArgs<ExtArgs>>): Prisma__ScoreCalculationClient<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScoreCalculations.
     * @param {ScoreCalculationDeleteManyArgs} args - Arguments to filter ScoreCalculations to delete.
     * @example
     * // Delete a few ScoreCalculations
     * const { count } = await prisma.scoreCalculation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScoreCalculationDeleteManyArgs>(args?: SelectSubset<T, ScoreCalculationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScoreCalculations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCalculationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScoreCalculations
     * const scoreCalculation = await prisma.scoreCalculation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScoreCalculationUpdateManyArgs>(args: SelectSubset<T, ScoreCalculationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScoreCalculation.
     * @param {ScoreCalculationUpsertArgs} args - Arguments to update or create a ScoreCalculation.
     * @example
     * // Update or create a ScoreCalculation
     * const scoreCalculation = await prisma.scoreCalculation.upsert({
     *   create: {
     *     // ... data to create a ScoreCalculation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScoreCalculation we want to update
     *   }
     * })
     */
    upsert<T extends ScoreCalculationUpsertArgs>(args: SelectSubset<T, ScoreCalculationUpsertArgs<ExtArgs>>): Prisma__ScoreCalculationClient<$Result.GetResult<Prisma.$ScoreCalculationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScoreCalculations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCalculationCountArgs} args - Arguments to filter ScoreCalculations to count.
     * @example
     * // Count the number of ScoreCalculations
     * const count = await prisma.scoreCalculation.count({
     *   where: {
     *     // ... the filter for the ScoreCalculations we want to count
     *   }
     * })
    **/
    count<T extends ScoreCalculationCountArgs>(
      args?: Subset<T, ScoreCalculationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScoreCalculationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScoreCalculation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCalculationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScoreCalculationAggregateArgs>(args: Subset<T, ScoreCalculationAggregateArgs>): Prisma.PrismaPromise<GetScoreCalculationAggregateType<T>>

    /**
     * Group by ScoreCalculation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCalculationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScoreCalculationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScoreCalculationGroupByArgs['orderBy'] }
        : { orderBy?: ScoreCalculationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScoreCalculationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoreCalculationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScoreCalculation model
   */
  readonly fields: ScoreCalculationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScoreCalculation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScoreCalculationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    farmer<T extends ScoreCalculation$farmerArgs<ExtArgs> = {}>(args?: Subset<T, ScoreCalculation$farmerArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    contractor<T extends ScoreCalculation$contractorArgs<ExtArgs> = {}>(args?: Subset<T, ScoreCalculation$contractorArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScoreCalculation model
   */ 
  interface ScoreCalculationFieldRefs {
    readonly id: FieldRef<"ScoreCalculation", 'Int'>
    readonly farmerId: FieldRef<"ScoreCalculation", 'Int'>
    readonly contractorId: FieldRef<"ScoreCalculation", 'Int'>
    readonly score: FieldRef<"ScoreCalculation", 'Float'>
    readonly calculationDate: FieldRef<"ScoreCalculation", 'DateTime'>
    readonly criteria: FieldRef<"ScoreCalculation", 'String'>
    readonly createdAt: FieldRef<"ScoreCalculation", 'DateTime'>
    readonly updatedAt: FieldRef<"ScoreCalculation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScoreCalculation findUnique
   */
  export type ScoreCalculationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
    /**
     * Filter, which ScoreCalculation to fetch.
     */
    where: ScoreCalculationWhereUniqueInput
  }

  /**
   * ScoreCalculation findUniqueOrThrow
   */
  export type ScoreCalculationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
    /**
     * Filter, which ScoreCalculation to fetch.
     */
    where: ScoreCalculationWhereUniqueInput
  }

  /**
   * ScoreCalculation findFirst
   */
  export type ScoreCalculationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
    /**
     * Filter, which ScoreCalculation to fetch.
     */
    where?: ScoreCalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreCalculations to fetch.
     */
    orderBy?: ScoreCalculationOrderByWithRelationInput | ScoreCalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreCalculations.
     */
    cursor?: ScoreCalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreCalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreCalculations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreCalculations.
     */
    distinct?: ScoreCalculationScalarFieldEnum | ScoreCalculationScalarFieldEnum[]
  }

  /**
   * ScoreCalculation findFirstOrThrow
   */
  export type ScoreCalculationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
    /**
     * Filter, which ScoreCalculation to fetch.
     */
    where?: ScoreCalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreCalculations to fetch.
     */
    orderBy?: ScoreCalculationOrderByWithRelationInput | ScoreCalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreCalculations.
     */
    cursor?: ScoreCalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreCalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreCalculations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreCalculations.
     */
    distinct?: ScoreCalculationScalarFieldEnum | ScoreCalculationScalarFieldEnum[]
  }

  /**
   * ScoreCalculation findMany
   */
  export type ScoreCalculationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
    /**
     * Filter, which ScoreCalculations to fetch.
     */
    where?: ScoreCalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreCalculations to fetch.
     */
    orderBy?: ScoreCalculationOrderByWithRelationInput | ScoreCalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScoreCalculations.
     */
    cursor?: ScoreCalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreCalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreCalculations.
     */
    skip?: number
    distinct?: ScoreCalculationScalarFieldEnum | ScoreCalculationScalarFieldEnum[]
  }

  /**
   * ScoreCalculation create
   */
  export type ScoreCalculationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
    /**
     * The data needed to create a ScoreCalculation.
     */
    data: XOR<ScoreCalculationCreateInput, ScoreCalculationUncheckedCreateInput>
  }

  /**
   * ScoreCalculation createMany
   */
  export type ScoreCalculationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScoreCalculations.
     */
    data: ScoreCalculationCreateManyInput | ScoreCalculationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScoreCalculation createManyAndReturn
   */
  export type ScoreCalculationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ScoreCalculations.
     */
    data: ScoreCalculationCreateManyInput | ScoreCalculationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScoreCalculation update
   */
  export type ScoreCalculationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
    /**
     * The data needed to update a ScoreCalculation.
     */
    data: XOR<ScoreCalculationUpdateInput, ScoreCalculationUncheckedUpdateInput>
    /**
     * Choose, which ScoreCalculation to update.
     */
    where: ScoreCalculationWhereUniqueInput
  }

  /**
   * ScoreCalculation updateMany
   */
  export type ScoreCalculationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScoreCalculations.
     */
    data: XOR<ScoreCalculationUpdateManyMutationInput, ScoreCalculationUncheckedUpdateManyInput>
    /**
     * Filter which ScoreCalculations to update
     */
    where?: ScoreCalculationWhereInput
  }

  /**
   * ScoreCalculation upsert
   */
  export type ScoreCalculationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
    /**
     * The filter to search for the ScoreCalculation to update in case it exists.
     */
    where: ScoreCalculationWhereUniqueInput
    /**
     * In case the ScoreCalculation found by the `where` argument doesn't exist, create a new ScoreCalculation with this data.
     */
    create: XOR<ScoreCalculationCreateInput, ScoreCalculationUncheckedCreateInput>
    /**
     * In case the ScoreCalculation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScoreCalculationUpdateInput, ScoreCalculationUncheckedUpdateInput>
  }

  /**
   * ScoreCalculation delete
   */
  export type ScoreCalculationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
    /**
     * Filter which ScoreCalculation to delete.
     */
    where: ScoreCalculationWhereUniqueInput
  }

  /**
   * ScoreCalculation deleteMany
   */
  export type ScoreCalculationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreCalculations to delete
     */
    where?: ScoreCalculationWhereInput
  }

  /**
   * ScoreCalculation.farmer
   */
  export type ScoreCalculation$farmerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    where?: FarmerWhereInput
  }

  /**
   * ScoreCalculation.contractor
   */
  export type ScoreCalculation$contractorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    where?: ContractorWhereInput
  }

  /**
   * ScoreCalculation without action
   */
  export type ScoreCalculationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCalculation
     */
    select?: ScoreCalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCalculationInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    content: string | null
    senderId: number | null
    receiverId: number | null
    createdAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    content: string | null
    senderId: number | null
    receiverId: number | null
    createdAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    content: number
    senderId: number
    receiverId: number
    createdAt: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    content?: true
    senderId?: true
    receiverId?: true
    createdAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    content?: true
    senderId?: true
    receiverId?: true
    createdAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    content?: true
    senderId?: true
    receiverId?: true
    createdAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    content: string
    senderId: number
    receiverId: number
    createdAt: Date
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    senderId?: boolean
    receiverId?: boolean
    createdAt?: boolean
    senderFarmer?: boolean | Message$senderFarmerArgs<ExtArgs>
    receiverFarmer?: boolean | Message$receiverFarmerArgs<ExtArgs>
    senderContractor?: boolean | Message$senderContractorArgs<ExtArgs>
    receiverContractor?: boolean | Message$receiverContractorArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    senderId?: boolean
    receiverId?: boolean
    createdAt?: boolean
    senderFarmer?: boolean | Message$senderFarmerArgs<ExtArgs>
    receiverFarmer?: boolean | Message$receiverFarmerArgs<ExtArgs>
    senderContractor?: boolean | Message$senderContractorArgs<ExtArgs>
    receiverContractor?: boolean | Message$receiverContractorArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    content?: boolean
    senderId?: boolean
    receiverId?: boolean
    createdAt?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    senderFarmer?: boolean | Message$senderFarmerArgs<ExtArgs>
    receiverFarmer?: boolean | Message$receiverFarmerArgs<ExtArgs>
    senderContractor?: boolean | Message$senderContractorArgs<ExtArgs>
    receiverContractor?: boolean | Message$receiverContractorArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    senderFarmer?: boolean | Message$senderFarmerArgs<ExtArgs>
    receiverFarmer?: boolean | Message$receiverFarmerArgs<ExtArgs>
    senderContractor?: boolean | Message$senderContractorArgs<ExtArgs>
    receiverContractor?: boolean | Message$receiverContractorArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      senderFarmer: Prisma.$FarmerPayload<ExtArgs> | null
      receiverFarmer: Prisma.$FarmerPayload<ExtArgs> | null
      senderContractor: Prisma.$ContractorPayload<ExtArgs> | null
      receiverContractor: Prisma.$ContractorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      senderId: number
      receiverId: number
      createdAt: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    senderFarmer<T extends Message$senderFarmerArgs<ExtArgs> = {}>(args?: Subset<T, Message$senderFarmerArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    receiverFarmer<T extends Message$receiverFarmerArgs<ExtArgs> = {}>(args?: Subset<T, Message$receiverFarmerArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    senderContractor<T extends Message$senderContractorArgs<ExtArgs> = {}>(args?: Subset<T, Message$senderContractorArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    receiverContractor<T extends Message$receiverContractorArgs<ExtArgs> = {}>(args?: Subset<T, Message$receiverContractorArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'Int'>
    readonly content: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'Int'>
    readonly receiverId: FieldRef<"Message", 'Int'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message.senderFarmer
   */
  export type Message$senderFarmerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    where?: FarmerWhereInput
  }

  /**
   * Message.receiverFarmer
   */
  export type Message$receiverFarmerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    where?: FarmerWhereInput
  }

  /**
   * Message.senderContractor
   */
  export type Message$senderContractorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    where?: ContractorWhereInput
  }

  /**
   * Message.receiverContractor
   */
  export type Message$receiverContractorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    where?: ContractorWhereInput
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    farmerId: number | null
    contractorId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    farmerId: number | null
    contractorId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    content: string | null
    imageUrl: string | null
    farmerId: number | null
    contractorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    content: string | null
    imageUrl: string | null
    farmerId: number | null
    contractorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    content: number
    imageUrl: number
    farmerId: number
    contractorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    farmerId?: true
    contractorId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    content?: true
    imageUrl?: true
    farmerId?: true
    contractorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    content?: true
    imageUrl?: true
    farmerId?: true
    contractorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    content?: true
    imageUrl?: true
    farmerId?: true
    contractorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: number
    content: string
    imageUrl: string | null
    farmerId: number | null
    contractorId: number | null
    createdAt: Date
    updatedAt: Date
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    imageUrl?: boolean
    farmerId?: boolean
    contractorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    likes?: boolean | Post$likesArgs<ExtArgs>
    farmer?: boolean | Post$farmerArgs<ExtArgs>
    contractor?: boolean | Post$contractorArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    imageUrl?: boolean
    farmerId?: boolean
    contractorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    farmer?: boolean | Post$farmerArgs<ExtArgs>
    contractor?: boolean | Post$contractorArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    content?: boolean
    imageUrl?: boolean
    farmerId?: boolean
    contractorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    likes?: boolean | Post$likesArgs<ExtArgs>
    farmer?: boolean | Post$farmerArgs<ExtArgs>
    contractor?: boolean | Post$contractorArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | Post$farmerArgs<ExtArgs>
    contractor?: boolean | Post$contractorArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      likes: Prisma.$LikePayload<ExtArgs>[]
      farmer: Prisma.$FarmerPayload<ExtArgs> | null
      contractor: Prisma.$ContractorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      imageUrl: string | null
      farmerId: number | null
      contractorId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    likes<T extends Post$likesArgs<ExtArgs> = {}>(args?: Subset<T, Post$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany"> | Null>
    farmer<T extends Post$farmerArgs<ExtArgs> = {}>(args?: Subset<T, Post$farmerArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    contractor<T extends Post$contractorArgs<ExtArgs> = {}>(args?: Subset<T, Post$contractorArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */ 
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'Int'>
    readonly content: FieldRef<"Post", 'String'>
    readonly imageUrl: FieldRef<"Post", 'String'>
    readonly farmerId: FieldRef<"Post", 'Int'>
    readonly contractorId: FieldRef<"Post", 'Int'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }

  /**
   * Post.likes
   */
  export type Post$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Post.farmer
   */
  export type Post$farmerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    where?: FarmerWhereInput
  }

  /**
   * Post.contractor
   */
  export type Post$contractorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    where?: ContractorWhereInput
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model Like
   */

  export type AggregateLike = {
    _count: LikeCountAggregateOutputType | null
    _avg: LikeAvgAggregateOutputType | null
    _sum: LikeSumAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  export type LikeAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
  }

  export type LikeSumAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
  }

  export type LikeMinAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
    createdAt: Date | null
  }

  export type LikeMaxAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
    createdAt: Date | null
  }

  export type LikeCountAggregateOutputType = {
    id: number
    postId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type LikeAvgAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type LikeSumAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type LikeMinAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type LikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Like to aggregate.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    _count?: true | LikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends LikeAggregateArgs> = {
        [P in keyof T & keyof AggregateLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLike[P]>
      : GetScalarType<T[P], AggregateLike[P]>
  }




  export type LikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithAggregationInput | LikeOrderByWithAggregationInput[]
    by: LikeScalarFieldEnum[] | LikeScalarFieldEnum
    having?: LikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeCountAggregateInputType | true
    _avg?: LikeAvgAggregateInputType
    _sum?: LikeSumAggregateInputType
    _min?: LikeMinAggregateInputType
    _max?: LikeMaxAggregateInputType
  }

  export type LikeGroupByOutputType = {
    id: number
    postId: number
    userId: number
    createdAt: Date
    _count: LikeCountAggregateOutputType | null
    _avg: LikeAvgAggregateOutputType | null
    _sum: LikeSumAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  type GetLikeGroupByPayload<T extends LikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeGroupByOutputType[P]>
            : GetScalarType<T[P], LikeGroupByOutputType[P]>
        }
      >
    >


  export type LikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    farmer?: boolean | Like$farmerArgs<ExtArgs>
    contractor?: boolean | Like$contractorArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    farmer?: boolean | Like$farmerArgs<ExtArgs>
    contractor?: boolean | Like$contractorArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectScalar = {
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type LikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    farmer?: boolean | Like$farmerArgs<ExtArgs>
    contractor?: boolean | Like$contractorArgs<ExtArgs>
  }
  export type LikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    farmer?: boolean | Like$farmerArgs<ExtArgs>
    contractor?: boolean | Like$contractorArgs<ExtArgs>
  }

  export type $LikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Like"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
      farmer: Prisma.$FarmerPayload<ExtArgs> | null
      contractor: Prisma.$ContractorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      postId: number
      userId: number
      createdAt: Date
    }, ExtArgs["result"]["like"]>
    composites: {}
  }

  type LikeGetPayload<S extends boolean | null | undefined | LikeDefaultArgs> = $Result.GetResult<Prisma.$LikePayload, S>

  type LikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LikeCountAggregateInputType | true
    }

  export interface LikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Like'], meta: { name: 'Like' } }
    /**
     * Find zero or one Like that matches the filter.
     * @param {LikeFindUniqueArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikeFindUniqueArgs>(args: SelectSubset<T, LikeFindUniqueArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Like that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LikeFindUniqueOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikeFindUniqueOrThrowArgs>(args: SelectSubset<T, LikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Like that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikeFindFirstArgs>(args?: SelectSubset<T, LikeFindFirstArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Like that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikeFindFirstOrThrowArgs>(args?: SelectSubset<T, LikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikeFindManyArgs>(args?: SelectSubset<T, LikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
     */
    create<T extends LikeCreateArgs>(args: SelectSubset<T, LikeCreateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Likes.
     * @param {LikeCreateManyArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikeCreateManyArgs>(args?: SelectSubset<T, LikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Likes and returns the data saved in the database.
     * @param {LikeCreateManyAndReturnArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Likes and only return the `id`
     * const likeWithIdOnly = await prisma.like.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikeCreateManyAndReturnArgs>(args?: SelectSubset<T, LikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
     */
    delete<T extends LikeDeleteArgs>(args: SelectSubset<T, LikeDeleteArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikeUpdateArgs>(args: SelectSubset<T, LikeUpdateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikeDeleteManyArgs>(args?: SelectSubset<T, LikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikeUpdateManyArgs>(args: SelectSubset<T, LikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
     */
    upsert<T extends LikeUpsertArgs>(args: SelectSubset<T, LikeUpsertArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends LikeCountArgs>(
      args?: Subset<T, LikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeAggregateArgs>(args: Subset<T, LikeAggregateArgs>): Prisma.PrismaPromise<GetLikeAggregateType<T>>

    /**
     * Group by Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeGroupByArgs['orderBy'] }
        : { orderBy?: LikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Like model
   */
  readonly fields: LikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    farmer<T extends Like$farmerArgs<ExtArgs> = {}>(args?: Subset<T, Like$farmerArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    contractor<T extends Like$contractorArgs<ExtArgs> = {}>(args?: Subset<T, Like$contractorArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Like model
   */ 
  interface LikeFieldRefs {
    readonly id: FieldRef<"Like", 'Int'>
    readonly postId: FieldRef<"Like", 'Int'>
    readonly userId: FieldRef<"Like", 'Int'>
    readonly createdAt: FieldRef<"Like", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Like findUnique
   */
  export type LikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findUniqueOrThrow
   */
  export type LikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findFirst
   */
  export type LikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findFirstOrThrow
   */
  export type LikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findMany
   */
  export type LikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like create
   */
  export type LikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to create a Like.
     */
    data: XOR<LikeCreateInput, LikeUncheckedCreateInput>
  }

  /**
   * Like createMany
   */
  export type LikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Like createManyAndReturn
   */
  export type LikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Like update
   */
  export type LikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to update a Like.
     */
    data: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
    /**
     * Choose, which Like to update.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput
  }

  /**
   * Like upsert
   */
  export type LikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The filter to search for the Like to update in case it exists.
     */
    where: LikeWhereUniqueInput
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
     */
    create: XOR<LikeCreateInput, LikeUncheckedCreateInput>
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
  }

  /**
   * Like delete
   */
  export type LikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter which Like to delete.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likes to delete
     */
    where?: LikeWhereInput
  }

  /**
   * Like.farmer
   */
  export type Like$farmerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    where?: FarmerWhereInput
  }

  /**
   * Like.contractor
   */
  export type Like$contractorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    where?: ContractorWhereInput
  }

  /**
   * Like without action
   */
  export type LikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FarmerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    contactNo: 'contactNo',
    email: 'email',
    password: 'password',
    landSize: 'landSize',
    fulfilledContracts: 'fulfilledContracts',
    farmerScore: 'farmerScore',
    avatar: 'avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FarmerScalarFieldEnum = (typeof FarmerScalarFieldEnum)[keyof typeof FarmerScalarFieldEnum]


  export const ContractorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contactNo: 'contactNo',
    password: 'password',
    email: 'email',
    address: 'address',
    fulfilledContracts: 'fulfilledContracts',
    contractorScore: 'contractorScore',
    avatar: 'avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContractorScalarFieldEnum = (typeof ContractorScalarFieldEnum)[keyof typeof ContractorScalarFieldEnum]


  export const CropScalarFieldEnum: {
    id: 'id',
    name: 'name',
    season: 'season',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CropScalarFieldEnum = (typeof CropScalarFieldEnum)[keyof typeof CropScalarFieldEnum]


  export const ContractScalarFieldEnum: {
    id: 'id',
    farmerId: 'farmerId',
    contractorId: 'contractorId',
    cropId: 'cropId',
    landSize: 'landSize',
    amount: 'amount',
    advancePayment: 'advancePayment',
    expectedYield: 'expectedYield',
    prefixedPrice: 'prefixedPrice',
    startDate: 'startDate',
    endDate: 'endDate',
    insuranceFactors: 'insuranceFactors',
    status: 'status',
    contractStatus: 'contractStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContractScalarFieldEnum = (typeof ContractScalarFieldEnum)[keyof typeof ContractScalarFieldEnum]


  export const ScoreCalculationScalarFieldEnum: {
    id: 'id',
    farmerId: 'farmerId',
    contractorId: 'contractorId',
    score: 'score',
    calculationDate: 'calculationDate',
    criteria: 'criteria',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScoreCalculationScalarFieldEnum = (typeof ScoreCalculationScalarFieldEnum)[keyof typeof ScoreCalculationScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    senderId: 'senderId',
    receiverId: 'receiverId',
    createdAt: 'createdAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    content: 'content',
    imageUrl: 'imageUrl',
    farmerId: 'farmerId',
    contractorId: 'contractorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'cropSeason'
   */
  export type EnumcropSeasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'cropSeason'>
    


  /**
   * Reference to a field of type 'cropSeason[]'
   */
  export type ListEnumcropSeasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'cropSeason[]'>
    


  /**
   * Reference to a field of type 'cropStatus'
   */
  export type EnumcropStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'cropStatus'>
    


  /**
   * Reference to a field of type 'cropStatus[]'
   */
  export type ListEnumcropStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'cropStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type FarmerWhereInput = {
    AND?: FarmerWhereInput | FarmerWhereInput[]
    OR?: FarmerWhereInput[]
    NOT?: FarmerWhereInput | FarmerWhereInput[]
    id?: IntFilter<"Farmer"> | number
    name?: StringFilter<"Farmer"> | string
    address?: StringFilter<"Farmer"> | string
    contactNo?: StringFilter<"Farmer"> | string
    email?: StringNullableFilter<"Farmer"> | string | null
    password?: StringFilter<"Farmer"> | string
    landSize?: FloatFilter<"Farmer"> | number
    fulfilledContracts?: IntFilter<"Farmer"> | number
    farmerScore?: FloatFilter<"Farmer"> | number
    avatar?: StringNullableFilter<"Farmer"> | string | null
    createdAt?: DateTimeFilter<"Farmer"> | Date | string
    updatedAt?: DateTimeFilter<"Farmer"> | Date | string
    crops?: CropListRelationFilter
    contracts?: ContractListRelationFilter
    posts?: PostListRelationFilter
    messagesSent?: MessageListRelationFilter
    messagesReceived?: MessageListRelationFilter
    likes?: LikeListRelationFilter
    scoreCalculations?: ScoreCalculationListRelationFilter
  }

  export type FarmerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contactNo?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    landSize?: SortOrder
    fulfilledContracts?: SortOrder
    farmerScore?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    crops?: CropOrderByRelationAggregateInput
    contracts?: ContractOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
    messagesSent?: MessageOrderByRelationAggregateInput
    messagesReceived?: MessageOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
    scoreCalculations?: ScoreCalculationOrderByRelationAggregateInput
  }

  export type FarmerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FarmerWhereInput | FarmerWhereInput[]
    OR?: FarmerWhereInput[]
    NOT?: FarmerWhereInput | FarmerWhereInput[]
    name?: StringFilter<"Farmer"> | string
    address?: StringFilter<"Farmer"> | string
    contactNo?: StringFilter<"Farmer"> | string
    email?: StringNullableFilter<"Farmer"> | string | null
    password?: StringFilter<"Farmer"> | string
    landSize?: FloatFilter<"Farmer"> | number
    fulfilledContracts?: IntFilter<"Farmer"> | number
    farmerScore?: FloatFilter<"Farmer"> | number
    avatar?: StringNullableFilter<"Farmer"> | string | null
    createdAt?: DateTimeFilter<"Farmer"> | Date | string
    updatedAt?: DateTimeFilter<"Farmer"> | Date | string
    crops?: CropListRelationFilter
    contracts?: ContractListRelationFilter
    posts?: PostListRelationFilter
    messagesSent?: MessageListRelationFilter
    messagesReceived?: MessageListRelationFilter
    likes?: LikeListRelationFilter
    scoreCalculations?: ScoreCalculationListRelationFilter
  }, "id">

  export type FarmerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contactNo?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    landSize?: SortOrder
    fulfilledContracts?: SortOrder
    farmerScore?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FarmerCountOrderByAggregateInput
    _avg?: FarmerAvgOrderByAggregateInput
    _max?: FarmerMaxOrderByAggregateInput
    _min?: FarmerMinOrderByAggregateInput
    _sum?: FarmerSumOrderByAggregateInput
  }

  export type FarmerScalarWhereWithAggregatesInput = {
    AND?: FarmerScalarWhereWithAggregatesInput | FarmerScalarWhereWithAggregatesInput[]
    OR?: FarmerScalarWhereWithAggregatesInput[]
    NOT?: FarmerScalarWhereWithAggregatesInput | FarmerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Farmer"> | number
    name?: StringWithAggregatesFilter<"Farmer"> | string
    address?: StringWithAggregatesFilter<"Farmer"> | string
    contactNo?: StringWithAggregatesFilter<"Farmer"> | string
    email?: StringNullableWithAggregatesFilter<"Farmer"> | string | null
    password?: StringWithAggregatesFilter<"Farmer"> | string
    landSize?: FloatWithAggregatesFilter<"Farmer"> | number
    fulfilledContracts?: IntWithAggregatesFilter<"Farmer"> | number
    farmerScore?: FloatWithAggregatesFilter<"Farmer"> | number
    avatar?: StringNullableWithAggregatesFilter<"Farmer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Farmer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Farmer"> | Date | string
  }

  export type ContractorWhereInput = {
    AND?: ContractorWhereInput | ContractorWhereInput[]
    OR?: ContractorWhereInput[]
    NOT?: ContractorWhereInput | ContractorWhereInput[]
    id?: IntFilter<"Contractor"> | number
    name?: StringFilter<"Contractor"> | string
    contactNo?: StringFilter<"Contractor"> | string
    password?: StringFilter<"Contractor"> | string
    email?: StringNullableFilter<"Contractor"> | string | null
    address?: StringFilter<"Contractor"> | string
    fulfilledContracts?: IntFilter<"Contractor"> | number
    contractorScore?: FloatFilter<"Contractor"> | number
    avatar?: StringNullableFilter<"Contractor"> | string | null
    createdAt?: DateTimeFilter<"Contractor"> | Date | string
    updatedAt?: DateTimeFilter<"Contractor"> | Date | string
    contracts?: ContractListRelationFilter
    posts?: PostListRelationFilter
    messagesSent?: MessageListRelationFilter
    messagesReceived?: MessageListRelationFilter
    likes?: LikeListRelationFilter
    scoreCalculations?: ScoreCalculationListRelationFilter
  }

  export type ContractorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contactNo?: SortOrder
    password?: SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrder
    fulfilledContracts?: SortOrder
    contractorScore?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contracts?: ContractOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
    messagesSent?: MessageOrderByRelationAggregateInput
    messagesReceived?: MessageOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
    scoreCalculations?: ScoreCalculationOrderByRelationAggregateInput
  }

  export type ContractorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContractorWhereInput | ContractorWhereInput[]
    OR?: ContractorWhereInput[]
    NOT?: ContractorWhereInput | ContractorWhereInput[]
    name?: StringFilter<"Contractor"> | string
    contactNo?: StringFilter<"Contractor"> | string
    password?: StringFilter<"Contractor"> | string
    email?: StringNullableFilter<"Contractor"> | string | null
    address?: StringFilter<"Contractor"> | string
    fulfilledContracts?: IntFilter<"Contractor"> | number
    contractorScore?: FloatFilter<"Contractor"> | number
    avatar?: StringNullableFilter<"Contractor"> | string | null
    createdAt?: DateTimeFilter<"Contractor"> | Date | string
    updatedAt?: DateTimeFilter<"Contractor"> | Date | string
    contracts?: ContractListRelationFilter
    posts?: PostListRelationFilter
    messagesSent?: MessageListRelationFilter
    messagesReceived?: MessageListRelationFilter
    likes?: LikeListRelationFilter
    scoreCalculations?: ScoreCalculationListRelationFilter
  }, "id">

  export type ContractorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contactNo?: SortOrder
    password?: SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrder
    fulfilledContracts?: SortOrder
    contractorScore?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContractorCountOrderByAggregateInput
    _avg?: ContractorAvgOrderByAggregateInput
    _max?: ContractorMaxOrderByAggregateInput
    _min?: ContractorMinOrderByAggregateInput
    _sum?: ContractorSumOrderByAggregateInput
  }

  export type ContractorScalarWhereWithAggregatesInput = {
    AND?: ContractorScalarWhereWithAggregatesInput | ContractorScalarWhereWithAggregatesInput[]
    OR?: ContractorScalarWhereWithAggregatesInput[]
    NOT?: ContractorScalarWhereWithAggregatesInput | ContractorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contractor"> | number
    name?: StringWithAggregatesFilter<"Contractor"> | string
    contactNo?: StringWithAggregatesFilter<"Contractor"> | string
    password?: StringWithAggregatesFilter<"Contractor"> | string
    email?: StringNullableWithAggregatesFilter<"Contractor"> | string | null
    address?: StringWithAggregatesFilter<"Contractor"> | string
    fulfilledContracts?: IntWithAggregatesFilter<"Contractor"> | number
    contractorScore?: FloatWithAggregatesFilter<"Contractor"> | number
    avatar?: StringNullableWithAggregatesFilter<"Contractor"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Contractor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contractor"> | Date | string
  }

  export type CropWhereInput = {
    AND?: CropWhereInput | CropWhereInput[]
    OR?: CropWhereInput[]
    NOT?: CropWhereInput | CropWhereInput[]
    id?: IntFilter<"Crop"> | number
    name?: StringFilter<"Crop"> | string
    season?: EnumcropSeasonFilter<"Crop"> | $Enums.cropSeason
    createdAt?: DateTimeFilter<"Crop"> | Date | string
    updatedAt?: DateTimeFilter<"Crop"> | Date | string
    farmers?: FarmerListRelationFilter
    contracts?: ContractListRelationFilter
  }

  export type CropOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    season?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    farmers?: FarmerOrderByRelationAggregateInput
    contracts?: ContractOrderByRelationAggregateInput
  }

  export type CropWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CropWhereInput | CropWhereInput[]
    OR?: CropWhereInput[]
    NOT?: CropWhereInput | CropWhereInput[]
    name?: StringFilter<"Crop"> | string
    season?: EnumcropSeasonFilter<"Crop"> | $Enums.cropSeason
    createdAt?: DateTimeFilter<"Crop"> | Date | string
    updatedAt?: DateTimeFilter<"Crop"> | Date | string
    farmers?: FarmerListRelationFilter
    contracts?: ContractListRelationFilter
  }, "id">

  export type CropOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    season?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CropCountOrderByAggregateInput
    _avg?: CropAvgOrderByAggregateInput
    _max?: CropMaxOrderByAggregateInput
    _min?: CropMinOrderByAggregateInput
    _sum?: CropSumOrderByAggregateInput
  }

  export type CropScalarWhereWithAggregatesInput = {
    AND?: CropScalarWhereWithAggregatesInput | CropScalarWhereWithAggregatesInput[]
    OR?: CropScalarWhereWithAggregatesInput[]
    NOT?: CropScalarWhereWithAggregatesInput | CropScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Crop"> | number
    name?: StringWithAggregatesFilter<"Crop"> | string
    season?: EnumcropSeasonWithAggregatesFilter<"Crop"> | $Enums.cropSeason
    createdAt?: DateTimeWithAggregatesFilter<"Crop"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Crop"> | Date | string
  }

  export type ContractWhereInput = {
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    id?: IntFilter<"Contract"> | number
    farmerId?: IntFilter<"Contract"> | number
    contractorId?: IntFilter<"Contract"> | number
    cropId?: IntFilter<"Contract"> | number
    landSize?: FloatFilter<"Contract"> | number
    amount?: FloatFilter<"Contract"> | number
    advancePayment?: FloatFilter<"Contract"> | number
    expectedYield?: FloatFilter<"Contract"> | number
    prefixedPrice?: FloatFilter<"Contract"> | number
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    insuranceFactors?: StringFilter<"Contract"> | string
    status?: EnumcropStatusFilter<"Contract"> | $Enums.cropStatus
    contractStatus?: StringFilter<"Contract"> | string
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    farmer?: XOR<FarmerRelationFilter, FarmerWhereInput>
    contractor?: XOR<ContractorRelationFilter, ContractorWhereInput>
    crop?: XOR<CropRelationFilter, CropWhereInput>
  }

  export type ContractOrderByWithRelationInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    cropId?: SortOrder
    landSize?: SortOrder
    amount?: SortOrder
    advancePayment?: SortOrder
    expectedYield?: SortOrder
    prefixedPrice?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    insuranceFactors?: SortOrder
    status?: SortOrder
    contractStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    farmer?: FarmerOrderByWithRelationInput
    contractor?: ContractorOrderByWithRelationInput
    crop?: CropOrderByWithRelationInput
  }

  export type ContractWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    farmerId?: IntFilter<"Contract"> | number
    contractorId?: IntFilter<"Contract"> | number
    cropId?: IntFilter<"Contract"> | number
    landSize?: FloatFilter<"Contract"> | number
    amount?: FloatFilter<"Contract"> | number
    advancePayment?: FloatFilter<"Contract"> | number
    expectedYield?: FloatFilter<"Contract"> | number
    prefixedPrice?: FloatFilter<"Contract"> | number
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    insuranceFactors?: StringFilter<"Contract"> | string
    status?: EnumcropStatusFilter<"Contract"> | $Enums.cropStatus
    contractStatus?: StringFilter<"Contract"> | string
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    farmer?: XOR<FarmerRelationFilter, FarmerWhereInput>
    contractor?: XOR<ContractorRelationFilter, ContractorWhereInput>
    crop?: XOR<CropRelationFilter, CropWhereInput>
  }, "id">

  export type ContractOrderByWithAggregationInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    cropId?: SortOrder
    landSize?: SortOrder
    amount?: SortOrder
    advancePayment?: SortOrder
    expectedYield?: SortOrder
    prefixedPrice?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    insuranceFactors?: SortOrder
    status?: SortOrder
    contractStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContractCountOrderByAggregateInput
    _avg?: ContractAvgOrderByAggregateInput
    _max?: ContractMaxOrderByAggregateInput
    _min?: ContractMinOrderByAggregateInput
    _sum?: ContractSumOrderByAggregateInput
  }

  export type ContractScalarWhereWithAggregatesInput = {
    AND?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    OR?: ContractScalarWhereWithAggregatesInput[]
    NOT?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contract"> | number
    farmerId?: IntWithAggregatesFilter<"Contract"> | number
    contractorId?: IntWithAggregatesFilter<"Contract"> | number
    cropId?: IntWithAggregatesFilter<"Contract"> | number
    landSize?: FloatWithAggregatesFilter<"Contract"> | number
    amount?: FloatWithAggregatesFilter<"Contract"> | number
    advancePayment?: FloatWithAggregatesFilter<"Contract"> | number
    expectedYield?: FloatWithAggregatesFilter<"Contract"> | number
    prefixedPrice?: FloatWithAggregatesFilter<"Contract"> | number
    startDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    insuranceFactors?: StringWithAggregatesFilter<"Contract"> | string
    status?: EnumcropStatusWithAggregatesFilter<"Contract"> | $Enums.cropStatus
    contractStatus?: StringWithAggregatesFilter<"Contract"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
  }

  export type ScoreCalculationWhereInput = {
    AND?: ScoreCalculationWhereInput | ScoreCalculationWhereInput[]
    OR?: ScoreCalculationWhereInput[]
    NOT?: ScoreCalculationWhereInput | ScoreCalculationWhereInput[]
    id?: IntFilter<"ScoreCalculation"> | number
    farmerId?: IntNullableFilter<"ScoreCalculation"> | number | null
    contractorId?: IntNullableFilter<"ScoreCalculation"> | number | null
    score?: FloatFilter<"ScoreCalculation"> | number
    calculationDate?: DateTimeFilter<"ScoreCalculation"> | Date | string
    criteria?: StringFilter<"ScoreCalculation"> | string
    createdAt?: DateTimeFilter<"ScoreCalculation"> | Date | string
    updatedAt?: DateTimeFilter<"ScoreCalculation"> | Date | string
    farmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
    contractor?: XOR<ContractorNullableRelationFilter, ContractorWhereInput> | null
  }

  export type ScoreCalculationOrderByWithRelationInput = {
    id?: SortOrder
    farmerId?: SortOrderInput | SortOrder
    contractorId?: SortOrderInput | SortOrder
    score?: SortOrder
    calculationDate?: SortOrder
    criteria?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    farmer?: FarmerOrderByWithRelationInput
    contractor?: ContractorOrderByWithRelationInput
  }

  export type ScoreCalculationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScoreCalculationWhereInput | ScoreCalculationWhereInput[]
    OR?: ScoreCalculationWhereInput[]
    NOT?: ScoreCalculationWhereInput | ScoreCalculationWhereInput[]
    farmerId?: IntNullableFilter<"ScoreCalculation"> | number | null
    contractorId?: IntNullableFilter<"ScoreCalculation"> | number | null
    score?: FloatFilter<"ScoreCalculation"> | number
    calculationDate?: DateTimeFilter<"ScoreCalculation"> | Date | string
    criteria?: StringFilter<"ScoreCalculation"> | string
    createdAt?: DateTimeFilter<"ScoreCalculation"> | Date | string
    updatedAt?: DateTimeFilter<"ScoreCalculation"> | Date | string
    farmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
    contractor?: XOR<ContractorNullableRelationFilter, ContractorWhereInput> | null
  }, "id">

  export type ScoreCalculationOrderByWithAggregationInput = {
    id?: SortOrder
    farmerId?: SortOrderInput | SortOrder
    contractorId?: SortOrderInput | SortOrder
    score?: SortOrder
    calculationDate?: SortOrder
    criteria?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScoreCalculationCountOrderByAggregateInput
    _avg?: ScoreCalculationAvgOrderByAggregateInput
    _max?: ScoreCalculationMaxOrderByAggregateInput
    _min?: ScoreCalculationMinOrderByAggregateInput
    _sum?: ScoreCalculationSumOrderByAggregateInput
  }

  export type ScoreCalculationScalarWhereWithAggregatesInput = {
    AND?: ScoreCalculationScalarWhereWithAggregatesInput | ScoreCalculationScalarWhereWithAggregatesInput[]
    OR?: ScoreCalculationScalarWhereWithAggregatesInput[]
    NOT?: ScoreCalculationScalarWhereWithAggregatesInput | ScoreCalculationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ScoreCalculation"> | number
    farmerId?: IntNullableWithAggregatesFilter<"ScoreCalculation"> | number | null
    contractorId?: IntNullableWithAggregatesFilter<"ScoreCalculation"> | number | null
    score?: FloatWithAggregatesFilter<"ScoreCalculation"> | number
    calculationDate?: DateTimeWithAggregatesFilter<"ScoreCalculation"> | Date | string
    criteria?: StringWithAggregatesFilter<"ScoreCalculation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ScoreCalculation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScoreCalculation"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    senderId?: IntFilter<"Message"> | number
    receiverId?: IntFilter<"Message"> | number
    createdAt?: DateTimeFilter<"Message"> | Date | string
    senderFarmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
    receiverFarmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
    senderContractor?: XOR<ContractorNullableRelationFilter, ContractorWhereInput> | null
    receiverContractor?: XOR<ContractorNullableRelationFilter, ContractorWhereInput> | null
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    createdAt?: SortOrder
    senderFarmer?: FarmerOrderByWithRelationInput
    receiverFarmer?: FarmerOrderByWithRelationInput
    senderContractor?: ContractorOrderByWithRelationInput
    receiverContractor?: ContractorOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    content?: StringFilter<"Message"> | string
    senderId?: IntFilter<"Message"> | number
    receiverId?: IntFilter<"Message"> | number
    createdAt?: DateTimeFilter<"Message"> | Date | string
    senderFarmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
    receiverFarmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
    senderContractor?: XOR<ContractorNullableRelationFilter, ContractorWhereInput> | null
    receiverContractor?: XOR<ContractorNullableRelationFilter, ContractorWhereInput> | null
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    createdAt?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Message"> | number
    content?: StringWithAggregatesFilter<"Message"> | string
    senderId?: IntWithAggregatesFilter<"Message"> | number
    receiverId?: IntWithAggregatesFilter<"Message"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: IntFilter<"Post"> | number
    content?: StringFilter<"Post"> | string
    imageUrl?: StringNullableFilter<"Post"> | string | null
    farmerId?: IntNullableFilter<"Post"> | number | null
    contractorId?: IntNullableFilter<"Post"> | number | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    likes?: LikeListRelationFilter
    farmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
    contractor?: XOR<ContractorNullableRelationFilter, ContractorWhereInput> | null
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    farmerId?: SortOrderInput | SortOrder
    contractorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    likes?: LikeOrderByRelationAggregateInput
    farmer?: FarmerOrderByWithRelationInput
    contractor?: ContractorOrderByWithRelationInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    content?: StringFilter<"Post"> | string
    imageUrl?: StringNullableFilter<"Post"> | string | null
    farmerId?: IntNullableFilter<"Post"> | number | null
    contractorId?: IntNullableFilter<"Post"> | number | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    likes?: LikeListRelationFilter
    farmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
    contractor?: XOR<ContractorNullableRelationFilter, ContractorWhereInput> | null
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    farmerId?: SortOrderInput | SortOrder
    contractorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Post"> | number
    content?: StringWithAggregatesFilter<"Post"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Post"> | string | null
    farmerId?: IntNullableWithAggregatesFilter<"Post"> | number | null
    contractorId?: IntNullableWithAggregatesFilter<"Post"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
  }

  export type LikeWhereInput = {
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    id?: IntFilter<"Like"> | number
    postId?: IntFilter<"Like"> | number
    userId?: IntFilter<"Like"> | number
    createdAt?: DateTimeFilter<"Like"> | Date | string
    post?: XOR<PostRelationFilter, PostWhereInput>
    farmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
    contractor?: XOR<ContractorNullableRelationFilter, ContractorWhereInput> | null
  }

  export type LikeOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    post?: PostOrderByWithRelationInput
    farmer?: FarmerOrderByWithRelationInput
    contractor?: ContractorOrderByWithRelationInput
  }

  export type LikeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    postId?: IntFilter<"Like"> | number
    userId?: IntFilter<"Like"> | number
    createdAt?: DateTimeFilter<"Like"> | Date | string
    post?: XOR<PostRelationFilter, PostWhereInput>
    farmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
    contractor?: XOR<ContractorNullableRelationFilter, ContractorWhereInput> | null
  }, "id">

  export type LikeOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: LikeCountOrderByAggregateInput
    _avg?: LikeAvgOrderByAggregateInput
    _max?: LikeMaxOrderByAggregateInput
    _min?: LikeMinOrderByAggregateInput
    _sum?: LikeSumOrderByAggregateInput
  }

  export type LikeScalarWhereWithAggregatesInput = {
    AND?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    OR?: LikeScalarWhereWithAggregatesInput[]
    NOT?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Like"> | number
    postId?: IntWithAggregatesFilter<"Like"> | number
    userId?: IntWithAggregatesFilter<"Like"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Like"> | Date | string
  }

  export type FarmerCreateInput = {
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropCreateNestedManyWithoutFarmersInput
    contracts?: ContractCreateNestedManyWithoutFarmerInput
    posts?: PostCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropUncheckedCreateNestedManyWithoutFarmersInput
    contracts?: ContractUncheckedCreateNestedManyWithoutFarmerInput
    posts?: PostUncheckedCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeUncheckedCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUpdateManyWithoutFarmerNestedInput
    posts?: PostUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUncheckedUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutFarmerNestedInput
    posts?: PostUncheckedUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUncheckedUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerCreateManyInput = {
    id?: number
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FarmerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FarmerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractorCreateInput = {
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractCreateNestedManyWithoutContractorInput
    posts?: PostCreateNestedManyWithoutContractorInput
    messagesSent?: MessageCreateNestedManyWithoutSenderContractorInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverContractorInput
    likes?: LikeCreateNestedManyWithoutContractorInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutContractorInput
  }

  export type ContractorUncheckedCreateInput = {
    id?: number
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutContractorInput
    posts?: PostUncheckedCreateNestedManyWithoutContractorInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderContractorInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverContractorInput
    likes?: LikeUncheckedCreateNestedManyWithoutContractorInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutContractorInput
  }

  export type ContractorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUpdateManyWithoutContractorNestedInput
    posts?: PostUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderContractorNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverContractorNestedInput
    likes?: LikeUpdateManyWithoutContractorNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutContractorNestedInput
  }

  export type ContractorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutContractorNestedInput
    posts?: PostUncheckedUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderContractorNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverContractorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutContractorNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutContractorNestedInput
  }

  export type ContractorCreateManyInput = {
    id?: number
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CropCreateInput = {
    name: string
    season: $Enums.cropSeason
    createdAt?: Date | string
    updatedAt?: Date | string
    farmers?: FarmerCreateNestedManyWithoutCropsInput
    contracts?: ContractCreateNestedManyWithoutCropInput
  }

  export type CropUncheckedCreateInput = {
    id?: number
    name: string
    season: $Enums.cropSeason
    createdAt?: Date | string
    updatedAt?: Date | string
    farmers?: FarmerUncheckedCreateNestedManyWithoutCropsInput
    contracts?: ContractUncheckedCreateNestedManyWithoutCropInput
  }

  export type CropUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    season?: EnumcropSeasonFieldUpdateOperationsInput | $Enums.cropSeason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmers?: FarmerUpdateManyWithoutCropsNestedInput
    contracts?: ContractUpdateManyWithoutCropNestedInput
  }

  export type CropUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    season?: EnumcropSeasonFieldUpdateOperationsInput | $Enums.cropSeason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmers?: FarmerUncheckedUpdateManyWithoutCropsNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutCropNestedInput
  }

  export type CropCreateManyInput = {
    id?: number
    name: string
    season: $Enums.cropSeason
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CropUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    season?: EnumcropSeasonFieldUpdateOperationsInput | $Enums.cropSeason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CropUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    season?: EnumcropSeasonFieldUpdateOperationsInput | $Enums.cropSeason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractCreateInput = {
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
    farmer: FarmerCreateNestedOneWithoutContractsInput
    contractor: ContractorCreateNestedOneWithoutContractsInput
    crop: CropCreateNestedOneWithoutContractsInput
  }

  export type ContractUncheckedCreateInput = {
    id?: number
    farmerId: number
    contractorId: number
    cropId: number
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractUpdateInput = {
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmer?: FarmerUpdateOneRequiredWithoutContractsNestedInput
    contractor?: ContractorUpdateOneRequiredWithoutContractsNestedInput
    crop?: CropUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ContractUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    farmerId?: IntFieldUpdateOperationsInput | number
    contractorId?: IntFieldUpdateOperationsInput | number
    cropId?: IntFieldUpdateOperationsInput | number
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractCreateManyInput = {
    id?: number
    farmerId: number
    contractorId: number
    cropId: number
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractUpdateManyMutationInput = {
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    farmerId?: IntFieldUpdateOperationsInput | number
    contractorId?: IntFieldUpdateOperationsInput | number
    cropId?: IntFieldUpdateOperationsInput | number
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCalculationCreateInput = {
    score: number
    calculationDate?: Date | string
    criteria: string
    createdAt?: Date | string
    updatedAt?: Date | string
    farmer?: FarmerCreateNestedOneWithoutScoreCalculationsInput
    contractor?: ContractorCreateNestedOneWithoutScoreCalculationsInput
  }

  export type ScoreCalculationUncheckedCreateInput = {
    id?: number
    farmerId?: number | null
    contractorId?: number | null
    score: number
    calculationDate?: Date | string
    criteria: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScoreCalculationUpdateInput = {
    score?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    criteria?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmer?: FarmerUpdateOneWithoutScoreCalculationsNestedInput
    contractor?: ContractorUpdateOneWithoutScoreCalculationsNestedInput
  }

  export type ScoreCalculationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    farmerId?: NullableIntFieldUpdateOperationsInput | number | null
    contractorId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    criteria?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCalculationCreateManyInput = {
    id?: number
    farmerId?: number | null
    contractorId?: number | null
    score: number
    calculationDate?: Date | string
    criteria: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScoreCalculationUpdateManyMutationInput = {
    score?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    criteria?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCalculationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    farmerId?: NullableIntFieldUpdateOperationsInput | number | null
    contractorId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    criteria?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    content: string
    createdAt?: Date | string
    senderFarmer?: FarmerCreateNestedOneWithoutMessagesSentInput
    receiverFarmer?: FarmerCreateNestedOneWithoutMessagesReceivedInput
    senderContractor?: ContractorCreateNestedOneWithoutMessagesSentInput
    receiverContractor?: ContractorCreateNestedOneWithoutMessagesReceivedInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    content: string
    senderId: number
    receiverId: number
    createdAt?: Date | string
  }

  export type MessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderFarmer?: FarmerUpdateOneWithoutMessagesSentNestedInput
    receiverFarmer?: FarmerUpdateOneWithoutMessagesReceivedNestedInput
    senderContractor?: ContractorUpdateOneWithoutMessagesSentNestedInput
    receiverContractor?: ContractorUpdateOneWithoutMessagesReceivedNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    id?: number
    content: string
    senderId: number
    receiverId: number
    createdAt?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateInput = {
    content: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: LikeCreateNestedManyWithoutPostInput
    farmer?: FarmerCreateNestedOneWithoutPostsInput
    contractor?: ContractorCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    content: string
    imageUrl?: string | null
    farmerId?: number | null
    contractorId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: LikeUpdateManyWithoutPostNestedInput
    farmer?: FarmerUpdateOneWithoutPostsNestedInput
    contractor?: ContractorUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    farmerId?: NullableIntFieldUpdateOperationsInput | number | null
    contractorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: number
    content: string
    imageUrl?: string | null
    farmerId?: number | null
    contractorId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    farmerId?: NullableIntFieldUpdateOperationsInput | number | null
    contractorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateInput = {
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutLikesInput
    farmer?: FarmerCreateNestedOneWithoutLikesInput
    contractor?: ContractorCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateInput = {
    id?: number
    postId: number
    userId: number
    createdAt?: Date | string
  }

  export type LikeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutLikesNestedInput
    farmer?: FarmerUpdateOneWithoutLikesNestedInput
    contractor?: ContractorUpdateOneWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateManyInput = {
    id?: number
    postId: number
    userId: number
    createdAt?: Date | string
  }

  export type LikeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CropListRelationFilter = {
    every?: CropWhereInput
    some?: CropWhereInput
    none?: CropWhereInput
  }

  export type ContractListRelationFilter = {
    every?: ContractWhereInput
    some?: ContractWhereInput
    none?: ContractWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type LikeListRelationFilter = {
    every?: LikeWhereInput
    some?: LikeWhereInput
    none?: LikeWhereInput
  }

  export type ScoreCalculationListRelationFilter = {
    every?: ScoreCalculationWhereInput
    some?: ScoreCalculationWhereInput
    none?: ScoreCalculationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CropOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScoreCalculationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FarmerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contactNo?: SortOrder
    email?: SortOrder
    password?: SortOrder
    landSize?: SortOrder
    fulfilledContracts?: SortOrder
    farmerScore?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FarmerAvgOrderByAggregateInput = {
    id?: SortOrder
    landSize?: SortOrder
    fulfilledContracts?: SortOrder
    farmerScore?: SortOrder
  }

  export type FarmerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contactNo?: SortOrder
    email?: SortOrder
    password?: SortOrder
    landSize?: SortOrder
    fulfilledContracts?: SortOrder
    farmerScore?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FarmerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contactNo?: SortOrder
    email?: SortOrder
    password?: SortOrder
    landSize?: SortOrder
    fulfilledContracts?: SortOrder
    farmerScore?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FarmerSumOrderByAggregateInput = {
    id?: SortOrder
    landSize?: SortOrder
    fulfilledContracts?: SortOrder
    farmerScore?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ContractorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactNo?: SortOrder
    password?: SortOrder
    email?: SortOrder
    address?: SortOrder
    fulfilledContracts?: SortOrder
    contractorScore?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractorAvgOrderByAggregateInput = {
    id?: SortOrder
    fulfilledContracts?: SortOrder
    contractorScore?: SortOrder
  }

  export type ContractorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactNo?: SortOrder
    password?: SortOrder
    email?: SortOrder
    address?: SortOrder
    fulfilledContracts?: SortOrder
    contractorScore?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactNo?: SortOrder
    password?: SortOrder
    email?: SortOrder
    address?: SortOrder
    fulfilledContracts?: SortOrder
    contractorScore?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractorSumOrderByAggregateInput = {
    id?: SortOrder
    fulfilledContracts?: SortOrder
    contractorScore?: SortOrder
  }

  export type EnumcropSeasonFilter<$PrismaModel = never> = {
    equals?: $Enums.cropSeason | EnumcropSeasonFieldRefInput<$PrismaModel>
    in?: $Enums.cropSeason[] | ListEnumcropSeasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.cropSeason[] | ListEnumcropSeasonFieldRefInput<$PrismaModel>
    not?: NestedEnumcropSeasonFilter<$PrismaModel> | $Enums.cropSeason
  }

  export type FarmerListRelationFilter = {
    every?: FarmerWhereInput
    some?: FarmerWhereInput
    none?: FarmerWhereInput
  }

  export type FarmerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CropCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    season?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CropAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CropMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    season?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CropMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    season?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CropSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumcropSeasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.cropSeason | EnumcropSeasonFieldRefInput<$PrismaModel>
    in?: $Enums.cropSeason[] | ListEnumcropSeasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.cropSeason[] | ListEnumcropSeasonFieldRefInput<$PrismaModel>
    not?: NestedEnumcropSeasonWithAggregatesFilter<$PrismaModel> | $Enums.cropSeason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcropSeasonFilter<$PrismaModel>
    _max?: NestedEnumcropSeasonFilter<$PrismaModel>
  }

  export type EnumcropStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.cropStatus | EnumcropStatusFieldRefInput<$PrismaModel>
    in?: $Enums.cropStatus[] | ListEnumcropStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.cropStatus[] | ListEnumcropStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumcropStatusFilter<$PrismaModel> | $Enums.cropStatus
  }

  export type FarmerRelationFilter = {
    is?: FarmerWhereInput
    isNot?: FarmerWhereInput
  }

  export type ContractorRelationFilter = {
    is?: ContractorWhereInput
    isNot?: ContractorWhereInput
  }

  export type CropRelationFilter = {
    is?: CropWhereInput
    isNot?: CropWhereInput
  }

  export type ContractCountOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    cropId?: SortOrder
    landSize?: SortOrder
    amount?: SortOrder
    advancePayment?: SortOrder
    expectedYield?: SortOrder
    prefixedPrice?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    insuranceFactors?: SortOrder
    status?: SortOrder
    contractStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractAvgOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    cropId?: SortOrder
    landSize?: SortOrder
    amount?: SortOrder
    advancePayment?: SortOrder
    expectedYield?: SortOrder
    prefixedPrice?: SortOrder
  }

  export type ContractMaxOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    cropId?: SortOrder
    landSize?: SortOrder
    amount?: SortOrder
    advancePayment?: SortOrder
    expectedYield?: SortOrder
    prefixedPrice?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    insuranceFactors?: SortOrder
    status?: SortOrder
    contractStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractMinOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    cropId?: SortOrder
    landSize?: SortOrder
    amount?: SortOrder
    advancePayment?: SortOrder
    expectedYield?: SortOrder
    prefixedPrice?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    insuranceFactors?: SortOrder
    status?: SortOrder
    contractStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractSumOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    cropId?: SortOrder
    landSize?: SortOrder
    amount?: SortOrder
    advancePayment?: SortOrder
    expectedYield?: SortOrder
    prefixedPrice?: SortOrder
  }

  export type EnumcropStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.cropStatus | EnumcropStatusFieldRefInput<$PrismaModel>
    in?: $Enums.cropStatus[] | ListEnumcropStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.cropStatus[] | ListEnumcropStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumcropStatusWithAggregatesFilter<$PrismaModel> | $Enums.cropStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcropStatusFilter<$PrismaModel>
    _max?: NestedEnumcropStatusFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FarmerNullableRelationFilter = {
    is?: FarmerWhereInput | null
    isNot?: FarmerWhereInput | null
  }

  export type ContractorNullableRelationFilter = {
    is?: ContractorWhereInput | null
    isNot?: ContractorWhereInput | null
  }

  export type ScoreCalculationCountOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    score?: SortOrder
    calculationDate?: SortOrder
    criteria?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScoreCalculationAvgOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    score?: SortOrder
  }

  export type ScoreCalculationMaxOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    score?: SortOrder
    calculationDate?: SortOrder
    criteria?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScoreCalculationMinOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    score?: SortOrder
    calculationDate?: SortOrder
    criteria?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScoreCalculationSumOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    score?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    contractorId?: SortOrder
  }

  export type PostRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type LikeCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type LikeMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type CropCreateNestedManyWithoutFarmersInput = {
    create?: XOR<CropCreateWithoutFarmersInput, CropUncheckedCreateWithoutFarmersInput> | CropCreateWithoutFarmersInput[] | CropUncheckedCreateWithoutFarmersInput[]
    connectOrCreate?: CropCreateOrConnectWithoutFarmersInput | CropCreateOrConnectWithoutFarmersInput[]
    connect?: CropWhereUniqueInput | CropWhereUniqueInput[]
  }

  export type ContractCreateNestedManyWithoutFarmerInput = {
    create?: XOR<ContractCreateWithoutFarmerInput, ContractUncheckedCreateWithoutFarmerInput> | ContractCreateWithoutFarmerInput[] | ContractUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutFarmerInput | ContractCreateOrConnectWithoutFarmerInput[]
    createMany?: ContractCreateManyFarmerInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutFarmerInput = {
    create?: XOR<PostCreateWithoutFarmerInput, PostUncheckedCreateWithoutFarmerInput> | PostCreateWithoutFarmerInput[] | PostUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutFarmerInput | PostCreateOrConnectWithoutFarmerInput[]
    createMany?: PostCreateManyFarmerInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderFarmerInput = {
    create?: XOR<MessageCreateWithoutSenderFarmerInput, MessageUncheckedCreateWithoutSenderFarmerInput> | MessageCreateWithoutSenderFarmerInput[] | MessageUncheckedCreateWithoutSenderFarmerInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderFarmerInput | MessageCreateOrConnectWithoutSenderFarmerInput[]
    createMany?: MessageCreateManySenderFarmerInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReceiverFarmerInput = {
    create?: XOR<MessageCreateWithoutReceiverFarmerInput, MessageUncheckedCreateWithoutReceiverFarmerInput> | MessageCreateWithoutReceiverFarmerInput[] | MessageUncheckedCreateWithoutReceiverFarmerInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverFarmerInput | MessageCreateOrConnectWithoutReceiverFarmerInput[]
    createMany?: MessageCreateManyReceiverFarmerInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutFarmerInput = {
    create?: XOR<LikeCreateWithoutFarmerInput, LikeUncheckedCreateWithoutFarmerInput> | LikeCreateWithoutFarmerInput[] | LikeUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutFarmerInput | LikeCreateOrConnectWithoutFarmerInput[]
    createMany?: LikeCreateManyFarmerInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type ScoreCalculationCreateNestedManyWithoutFarmerInput = {
    create?: XOR<ScoreCalculationCreateWithoutFarmerInput, ScoreCalculationUncheckedCreateWithoutFarmerInput> | ScoreCalculationCreateWithoutFarmerInput[] | ScoreCalculationUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: ScoreCalculationCreateOrConnectWithoutFarmerInput | ScoreCalculationCreateOrConnectWithoutFarmerInput[]
    createMany?: ScoreCalculationCreateManyFarmerInputEnvelope
    connect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
  }

  export type CropUncheckedCreateNestedManyWithoutFarmersInput = {
    create?: XOR<CropCreateWithoutFarmersInput, CropUncheckedCreateWithoutFarmersInput> | CropCreateWithoutFarmersInput[] | CropUncheckedCreateWithoutFarmersInput[]
    connectOrCreate?: CropCreateOrConnectWithoutFarmersInput | CropCreateOrConnectWithoutFarmersInput[]
    connect?: CropWhereUniqueInput | CropWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutFarmerInput = {
    create?: XOR<ContractCreateWithoutFarmerInput, ContractUncheckedCreateWithoutFarmerInput> | ContractCreateWithoutFarmerInput[] | ContractUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutFarmerInput | ContractCreateOrConnectWithoutFarmerInput[]
    createMany?: ContractCreateManyFarmerInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutFarmerInput = {
    create?: XOR<PostCreateWithoutFarmerInput, PostUncheckedCreateWithoutFarmerInput> | PostCreateWithoutFarmerInput[] | PostUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutFarmerInput | PostCreateOrConnectWithoutFarmerInput[]
    createMany?: PostCreateManyFarmerInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderFarmerInput = {
    create?: XOR<MessageCreateWithoutSenderFarmerInput, MessageUncheckedCreateWithoutSenderFarmerInput> | MessageCreateWithoutSenderFarmerInput[] | MessageUncheckedCreateWithoutSenderFarmerInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderFarmerInput | MessageCreateOrConnectWithoutSenderFarmerInput[]
    createMany?: MessageCreateManySenderFarmerInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReceiverFarmerInput = {
    create?: XOR<MessageCreateWithoutReceiverFarmerInput, MessageUncheckedCreateWithoutReceiverFarmerInput> | MessageCreateWithoutReceiverFarmerInput[] | MessageUncheckedCreateWithoutReceiverFarmerInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverFarmerInput | MessageCreateOrConnectWithoutReceiverFarmerInput[]
    createMany?: MessageCreateManyReceiverFarmerInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutFarmerInput = {
    create?: XOR<LikeCreateWithoutFarmerInput, LikeUncheckedCreateWithoutFarmerInput> | LikeCreateWithoutFarmerInput[] | LikeUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutFarmerInput | LikeCreateOrConnectWithoutFarmerInput[]
    createMany?: LikeCreateManyFarmerInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type ScoreCalculationUncheckedCreateNestedManyWithoutFarmerInput = {
    create?: XOR<ScoreCalculationCreateWithoutFarmerInput, ScoreCalculationUncheckedCreateWithoutFarmerInput> | ScoreCalculationCreateWithoutFarmerInput[] | ScoreCalculationUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: ScoreCalculationCreateOrConnectWithoutFarmerInput | ScoreCalculationCreateOrConnectWithoutFarmerInput[]
    createMany?: ScoreCalculationCreateManyFarmerInputEnvelope
    connect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CropUpdateManyWithoutFarmersNestedInput = {
    create?: XOR<CropCreateWithoutFarmersInput, CropUncheckedCreateWithoutFarmersInput> | CropCreateWithoutFarmersInput[] | CropUncheckedCreateWithoutFarmersInput[]
    connectOrCreate?: CropCreateOrConnectWithoutFarmersInput | CropCreateOrConnectWithoutFarmersInput[]
    upsert?: CropUpsertWithWhereUniqueWithoutFarmersInput | CropUpsertWithWhereUniqueWithoutFarmersInput[]
    set?: CropWhereUniqueInput | CropWhereUniqueInput[]
    disconnect?: CropWhereUniqueInput | CropWhereUniqueInput[]
    delete?: CropWhereUniqueInput | CropWhereUniqueInput[]
    connect?: CropWhereUniqueInput | CropWhereUniqueInput[]
    update?: CropUpdateWithWhereUniqueWithoutFarmersInput | CropUpdateWithWhereUniqueWithoutFarmersInput[]
    updateMany?: CropUpdateManyWithWhereWithoutFarmersInput | CropUpdateManyWithWhereWithoutFarmersInput[]
    deleteMany?: CropScalarWhereInput | CropScalarWhereInput[]
  }

  export type ContractUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<ContractCreateWithoutFarmerInput, ContractUncheckedCreateWithoutFarmerInput> | ContractCreateWithoutFarmerInput[] | ContractUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutFarmerInput | ContractCreateOrConnectWithoutFarmerInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutFarmerInput | ContractUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: ContractCreateManyFarmerInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutFarmerInput | ContractUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutFarmerInput | ContractUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type PostUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<PostCreateWithoutFarmerInput, PostUncheckedCreateWithoutFarmerInput> | PostCreateWithoutFarmerInput[] | PostUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutFarmerInput | PostCreateOrConnectWithoutFarmerInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutFarmerInput | PostUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: PostCreateManyFarmerInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutFarmerInput | PostUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: PostUpdateManyWithWhereWithoutFarmerInput | PostUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderFarmerNestedInput = {
    create?: XOR<MessageCreateWithoutSenderFarmerInput, MessageUncheckedCreateWithoutSenderFarmerInput> | MessageCreateWithoutSenderFarmerInput[] | MessageUncheckedCreateWithoutSenderFarmerInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderFarmerInput | MessageCreateOrConnectWithoutSenderFarmerInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderFarmerInput | MessageUpsertWithWhereUniqueWithoutSenderFarmerInput[]
    createMany?: MessageCreateManySenderFarmerInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderFarmerInput | MessageUpdateWithWhereUniqueWithoutSenderFarmerInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderFarmerInput | MessageUpdateManyWithWhereWithoutSenderFarmerInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReceiverFarmerNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverFarmerInput, MessageUncheckedCreateWithoutReceiverFarmerInput> | MessageCreateWithoutReceiverFarmerInput[] | MessageUncheckedCreateWithoutReceiverFarmerInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverFarmerInput | MessageCreateOrConnectWithoutReceiverFarmerInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverFarmerInput | MessageUpsertWithWhereUniqueWithoutReceiverFarmerInput[]
    createMany?: MessageCreateManyReceiverFarmerInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverFarmerInput | MessageUpdateWithWhereUniqueWithoutReceiverFarmerInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverFarmerInput | MessageUpdateManyWithWhereWithoutReceiverFarmerInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<LikeCreateWithoutFarmerInput, LikeUncheckedCreateWithoutFarmerInput> | LikeCreateWithoutFarmerInput[] | LikeUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutFarmerInput | LikeCreateOrConnectWithoutFarmerInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutFarmerInput | LikeUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: LikeCreateManyFarmerInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutFarmerInput | LikeUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutFarmerInput | LikeUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type ScoreCalculationUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<ScoreCalculationCreateWithoutFarmerInput, ScoreCalculationUncheckedCreateWithoutFarmerInput> | ScoreCalculationCreateWithoutFarmerInput[] | ScoreCalculationUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: ScoreCalculationCreateOrConnectWithoutFarmerInput | ScoreCalculationCreateOrConnectWithoutFarmerInput[]
    upsert?: ScoreCalculationUpsertWithWhereUniqueWithoutFarmerInput | ScoreCalculationUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: ScoreCalculationCreateManyFarmerInputEnvelope
    set?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    disconnect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    delete?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    connect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    update?: ScoreCalculationUpdateWithWhereUniqueWithoutFarmerInput | ScoreCalculationUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: ScoreCalculationUpdateManyWithWhereWithoutFarmerInput | ScoreCalculationUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: ScoreCalculationScalarWhereInput | ScoreCalculationScalarWhereInput[]
  }

  export type CropUncheckedUpdateManyWithoutFarmersNestedInput = {
    create?: XOR<CropCreateWithoutFarmersInput, CropUncheckedCreateWithoutFarmersInput> | CropCreateWithoutFarmersInput[] | CropUncheckedCreateWithoutFarmersInput[]
    connectOrCreate?: CropCreateOrConnectWithoutFarmersInput | CropCreateOrConnectWithoutFarmersInput[]
    upsert?: CropUpsertWithWhereUniqueWithoutFarmersInput | CropUpsertWithWhereUniqueWithoutFarmersInput[]
    set?: CropWhereUniqueInput | CropWhereUniqueInput[]
    disconnect?: CropWhereUniqueInput | CropWhereUniqueInput[]
    delete?: CropWhereUniqueInput | CropWhereUniqueInput[]
    connect?: CropWhereUniqueInput | CropWhereUniqueInput[]
    update?: CropUpdateWithWhereUniqueWithoutFarmersInput | CropUpdateWithWhereUniqueWithoutFarmersInput[]
    updateMany?: CropUpdateManyWithWhereWithoutFarmersInput | CropUpdateManyWithWhereWithoutFarmersInput[]
    deleteMany?: CropScalarWhereInput | CropScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<ContractCreateWithoutFarmerInput, ContractUncheckedCreateWithoutFarmerInput> | ContractCreateWithoutFarmerInput[] | ContractUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutFarmerInput | ContractCreateOrConnectWithoutFarmerInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutFarmerInput | ContractUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: ContractCreateManyFarmerInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutFarmerInput | ContractUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutFarmerInput | ContractUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<PostCreateWithoutFarmerInput, PostUncheckedCreateWithoutFarmerInput> | PostCreateWithoutFarmerInput[] | PostUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutFarmerInput | PostCreateOrConnectWithoutFarmerInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutFarmerInput | PostUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: PostCreateManyFarmerInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutFarmerInput | PostUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: PostUpdateManyWithWhereWithoutFarmerInput | PostUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderFarmerNestedInput = {
    create?: XOR<MessageCreateWithoutSenderFarmerInput, MessageUncheckedCreateWithoutSenderFarmerInput> | MessageCreateWithoutSenderFarmerInput[] | MessageUncheckedCreateWithoutSenderFarmerInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderFarmerInput | MessageCreateOrConnectWithoutSenderFarmerInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderFarmerInput | MessageUpsertWithWhereUniqueWithoutSenderFarmerInput[]
    createMany?: MessageCreateManySenderFarmerInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderFarmerInput | MessageUpdateWithWhereUniqueWithoutSenderFarmerInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderFarmerInput | MessageUpdateManyWithWhereWithoutSenderFarmerInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReceiverFarmerNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverFarmerInput, MessageUncheckedCreateWithoutReceiverFarmerInput> | MessageCreateWithoutReceiverFarmerInput[] | MessageUncheckedCreateWithoutReceiverFarmerInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverFarmerInput | MessageCreateOrConnectWithoutReceiverFarmerInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverFarmerInput | MessageUpsertWithWhereUniqueWithoutReceiverFarmerInput[]
    createMany?: MessageCreateManyReceiverFarmerInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverFarmerInput | MessageUpdateWithWhereUniqueWithoutReceiverFarmerInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverFarmerInput | MessageUpdateManyWithWhereWithoutReceiverFarmerInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<LikeCreateWithoutFarmerInput, LikeUncheckedCreateWithoutFarmerInput> | LikeCreateWithoutFarmerInput[] | LikeUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutFarmerInput | LikeCreateOrConnectWithoutFarmerInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutFarmerInput | LikeUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: LikeCreateManyFarmerInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutFarmerInput | LikeUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutFarmerInput | LikeUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type ScoreCalculationUncheckedUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<ScoreCalculationCreateWithoutFarmerInput, ScoreCalculationUncheckedCreateWithoutFarmerInput> | ScoreCalculationCreateWithoutFarmerInput[] | ScoreCalculationUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: ScoreCalculationCreateOrConnectWithoutFarmerInput | ScoreCalculationCreateOrConnectWithoutFarmerInput[]
    upsert?: ScoreCalculationUpsertWithWhereUniqueWithoutFarmerInput | ScoreCalculationUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: ScoreCalculationCreateManyFarmerInputEnvelope
    set?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    disconnect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    delete?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    connect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    update?: ScoreCalculationUpdateWithWhereUniqueWithoutFarmerInput | ScoreCalculationUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: ScoreCalculationUpdateManyWithWhereWithoutFarmerInput | ScoreCalculationUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: ScoreCalculationScalarWhereInput | ScoreCalculationScalarWhereInput[]
  }

  export type ContractCreateNestedManyWithoutContractorInput = {
    create?: XOR<ContractCreateWithoutContractorInput, ContractUncheckedCreateWithoutContractorInput> | ContractCreateWithoutContractorInput[] | ContractUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutContractorInput | ContractCreateOrConnectWithoutContractorInput[]
    createMany?: ContractCreateManyContractorInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutContractorInput = {
    create?: XOR<PostCreateWithoutContractorInput, PostUncheckedCreateWithoutContractorInput> | PostCreateWithoutContractorInput[] | PostUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutContractorInput | PostCreateOrConnectWithoutContractorInput[]
    createMany?: PostCreateManyContractorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderContractorInput = {
    create?: XOR<MessageCreateWithoutSenderContractorInput, MessageUncheckedCreateWithoutSenderContractorInput> | MessageCreateWithoutSenderContractorInput[] | MessageUncheckedCreateWithoutSenderContractorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderContractorInput | MessageCreateOrConnectWithoutSenderContractorInput[]
    createMany?: MessageCreateManySenderContractorInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReceiverContractorInput = {
    create?: XOR<MessageCreateWithoutReceiverContractorInput, MessageUncheckedCreateWithoutReceiverContractorInput> | MessageCreateWithoutReceiverContractorInput[] | MessageUncheckedCreateWithoutReceiverContractorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverContractorInput | MessageCreateOrConnectWithoutReceiverContractorInput[]
    createMany?: MessageCreateManyReceiverContractorInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutContractorInput = {
    create?: XOR<LikeCreateWithoutContractorInput, LikeUncheckedCreateWithoutContractorInput> | LikeCreateWithoutContractorInput[] | LikeUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutContractorInput | LikeCreateOrConnectWithoutContractorInput[]
    createMany?: LikeCreateManyContractorInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type ScoreCalculationCreateNestedManyWithoutContractorInput = {
    create?: XOR<ScoreCalculationCreateWithoutContractorInput, ScoreCalculationUncheckedCreateWithoutContractorInput> | ScoreCalculationCreateWithoutContractorInput[] | ScoreCalculationUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: ScoreCalculationCreateOrConnectWithoutContractorInput | ScoreCalculationCreateOrConnectWithoutContractorInput[]
    createMany?: ScoreCalculationCreateManyContractorInputEnvelope
    connect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutContractorInput = {
    create?: XOR<ContractCreateWithoutContractorInput, ContractUncheckedCreateWithoutContractorInput> | ContractCreateWithoutContractorInput[] | ContractUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutContractorInput | ContractCreateOrConnectWithoutContractorInput[]
    createMany?: ContractCreateManyContractorInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutContractorInput = {
    create?: XOR<PostCreateWithoutContractorInput, PostUncheckedCreateWithoutContractorInput> | PostCreateWithoutContractorInput[] | PostUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutContractorInput | PostCreateOrConnectWithoutContractorInput[]
    createMany?: PostCreateManyContractorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderContractorInput = {
    create?: XOR<MessageCreateWithoutSenderContractorInput, MessageUncheckedCreateWithoutSenderContractorInput> | MessageCreateWithoutSenderContractorInput[] | MessageUncheckedCreateWithoutSenderContractorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderContractorInput | MessageCreateOrConnectWithoutSenderContractorInput[]
    createMany?: MessageCreateManySenderContractorInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReceiverContractorInput = {
    create?: XOR<MessageCreateWithoutReceiverContractorInput, MessageUncheckedCreateWithoutReceiverContractorInput> | MessageCreateWithoutReceiverContractorInput[] | MessageUncheckedCreateWithoutReceiverContractorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverContractorInput | MessageCreateOrConnectWithoutReceiverContractorInput[]
    createMany?: MessageCreateManyReceiverContractorInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutContractorInput = {
    create?: XOR<LikeCreateWithoutContractorInput, LikeUncheckedCreateWithoutContractorInput> | LikeCreateWithoutContractorInput[] | LikeUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutContractorInput | LikeCreateOrConnectWithoutContractorInput[]
    createMany?: LikeCreateManyContractorInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type ScoreCalculationUncheckedCreateNestedManyWithoutContractorInput = {
    create?: XOR<ScoreCalculationCreateWithoutContractorInput, ScoreCalculationUncheckedCreateWithoutContractorInput> | ScoreCalculationCreateWithoutContractorInput[] | ScoreCalculationUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: ScoreCalculationCreateOrConnectWithoutContractorInput | ScoreCalculationCreateOrConnectWithoutContractorInput[]
    createMany?: ScoreCalculationCreateManyContractorInputEnvelope
    connect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
  }

  export type ContractUpdateManyWithoutContractorNestedInput = {
    create?: XOR<ContractCreateWithoutContractorInput, ContractUncheckedCreateWithoutContractorInput> | ContractCreateWithoutContractorInput[] | ContractUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutContractorInput | ContractCreateOrConnectWithoutContractorInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutContractorInput | ContractUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: ContractCreateManyContractorInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutContractorInput | ContractUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutContractorInput | ContractUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type PostUpdateManyWithoutContractorNestedInput = {
    create?: XOR<PostCreateWithoutContractorInput, PostUncheckedCreateWithoutContractorInput> | PostCreateWithoutContractorInput[] | PostUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutContractorInput | PostCreateOrConnectWithoutContractorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutContractorInput | PostUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: PostCreateManyContractorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutContractorInput | PostUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutContractorInput | PostUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderContractorNestedInput = {
    create?: XOR<MessageCreateWithoutSenderContractorInput, MessageUncheckedCreateWithoutSenderContractorInput> | MessageCreateWithoutSenderContractorInput[] | MessageUncheckedCreateWithoutSenderContractorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderContractorInput | MessageCreateOrConnectWithoutSenderContractorInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderContractorInput | MessageUpsertWithWhereUniqueWithoutSenderContractorInput[]
    createMany?: MessageCreateManySenderContractorInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderContractorInput | MessageUpdateWithWhereUniqueWithoutSenderContractorInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderContractorInput | MessageUpdateManyWithWhereWithoutSenderContractorInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReceiverContractorNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverContractorInput, MessageUncheckedCreateWithoutReceiverContractorInput> | MessageCreateWithoutReceiverContractorInput[] | MessageUncheckedCreateWithoutReceiverContractorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverContractorInput | MessageCreateOrConnectWithoutReceiverContractorInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverContractorInput | MessageUpsertWithWhereUniqueWithoutReceiverContractorInput[]
    createMany?: MessageCreateManyReceiverContractorInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverContractorInput | MessageUpdateWithWhereUniqueWithoutReceiverContractorInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverContractorInput | MessageUpdateManyWithWhereWithoutReceiverContractorInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutContractorNestedInput = {
    create?: XOR<LikeCreateWithoutContractorInput, LikeUncheckedCreateWithoutContractorInput> | LikeCreateWithoutContractorInput[] | LikeUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutContractorInput | LikeCreateOrConnectWithoutContractorInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutContractorInput | LikeUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: LikeCreateManyContractorInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutContractorInput | LikeUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutContractorInput | LikeUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type ScoreCalculationUpdateManyWithoutContractorNestedInput = {
    create?: XOR<ScoreCalculationCreateWithoutContractorInput, ScoreCalculationUncheckedCreateWithoutContractorInput> | ScoreCalculationCreateWithoutContractorInput[] | ScoreCalculationUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: ScoreCalculationCreateOrConnectWithoutContractorInput | ScoreCalculationCreateOrConnectWithoutContractorInput[]
    upsert?: ScoreCalculationUpsertWithWhereUniqueWithoutContractorInput | ScoreCalculationUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: ScoreCalculationCreateManyContractorInputEnvelope
    set?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    disconnect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    delete?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    connect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    update?: ScoreCalculationUpdateWithWhereUniqueWithoutContractorInput | ScoreCalculationUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: ScoreCalculationUpdateManyWithWhereWithoutContractorInput | ScoreCalculationUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: ScoreCalculationScalarWhereInput | ScoreCalculationScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutContractorNestedInput = {
    create?: XOR<ContractCreateWithoutContractorInput, ContractUncheckedCreateWithoutContractorInput> | ContractCreateWithoutContractorInput[] | ContractUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutContractorInput | ContractCreateOrConnectWithoutContractorInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutContractorInput | ContractUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: ContractCreateManyContractorInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutContractorInput | ContractUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutContractorInput | ContractUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutContractorNestedInput = {
    create?: XOR<PostCreateWithoutContractorInput, PostUncheckedCreateWithoutContractorInput> | PostCreateWithoutContractorInput[] | PostUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutContractorInput | PostCreateOrConnectWithoutContractorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutContractorInput | PostUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: PostCreateManyContractorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutContractorInput | PostUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutContractorInput | PostUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderContractorNestedInput = {
    create?: XOR<MessageCreateWithoutSenderContractorInput, MessageUncheckedCreateWithoutSenderContractorInput> | MessageCreateWithoutSenderContractorInput[] | MessageUncheckedCreateWithoutSenderContractorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderContractorInput | MessageCreateOrConnectWithoutSenderContractorInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderContractorInput | MessageUpsertWithWhereUniqueWithoutSenderContractorInput[]
    createMany?: MessageCreateManySenderContractorInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderContractorInput | MessageUpdateWithWhereUniqueWithoutSenderContractorInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderContractorInput | MessageUpdateManyWithWhereWithoutSenderContractorInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReceiverContractorNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverContractorInput, MessageUncheckedCreateWithoutReceiverContractorInput> | MessageCreateWithoutReceiverContractorInput[] | MessageUncheckedCreateWithoutReceiverContractorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverContractorInput | MessageCreateOrConnectWithoutReceiverContractorInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverContractorInput | MessageUpsertWithWhereUniqueWithoutReceiverContractorInput[]
    createMany?: MessageCreateManyReceiverContractorInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverContractorInput | MessageUpdateWithWhereUniqueWithoutReceiverContractorInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverContractorInput | MessageUpdateManyWithWhereWithoutReceiverContractorInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutContractorNestedInput = {
    create?: XOR<LikeCreateWithoutContractorInput, LikeUncheckedCreateWithoutContractorInput> | LikeCreateWithoutContractorInput[] | LikeUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutContractorInput | LikeCreateOrConnectWithoutContractorInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutContractorInput | LikeUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: LikeCreateManyContractorInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutContractorInput | LikeUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutContractorInput | LikeUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type ScoreCalculationUncheckedUpdateManyWithoutContractorNestedInput = {
    create?: XOR<ScoreCalculationCreateWithoutContractorInput, ScoreCalculationUncheckedCreateWithoutContractorInput> | ScoreCalculationCreateWithoutContractorInput[] | ScoreCalculationUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: ScoreCalculationCreateOrConnectWithoutContractorInput | ScoreCalculationCreateOrConnectWithoutContractorInput[]
    upsert?: ScoreCalculationUpsertWithWhereUniqueWithoutContractorInput | ScoreCalculationUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: ScoreCalculationCreateManyContractorInputEnvelope
    set?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    disconnect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    delete?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    connect?: ScoreCalculationWhereUniqueInput | ScoreCalculationWhereUniqueInput[]
    update?: ScoreCalculationUpdateWithWhereUniqueWithoutContractorInput | ScoreCalculationUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: ScoreCalculationUpdateManyWithWhereWithoutContractorInput | ScoreCalculationUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: ScoreCalculationScalarWhereInput | ScoreCalculationScalarWhereInput[]
  }

  export type FarmerCreateNestedManyWithoutCropsInput = {
    create?: XOR<FarmerCreateWithoutCropsInput, FarmerUncheckedCreateWithoutCropsInput> | FarmerCreateWithoutCropsInput[] | FarmerUncheckedCreateWithoutCropsInput[]
    connectOrCreate?: FarmerCreateOrConnectWithoutCropsInput | FarmerCreateOrConnectWithoutCropsInput[]
    connect?: FarmerWhereUniqueInput | FarmerWhereUniqueInput[]
  }

  export type ContractCreateNestedManyWithoutCropInput = {
    create?: XOR<ContractCreateWithoutCropInput, ContractUncheckedCreateWithoutCropInput> | ContractCreateWithoutCropInput[] | ContractUncheckedCreateWithoutCropInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutCropInput | ContractCreateOrConnectWithoutCropInput[]
    createMany?: ContractCreateManyCropInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type FarmerUncheckedCreateNestedManyWithoutCropsInput = {
    create?: XOR<FarmerCreateWithoutCropsInput, FarmerUncheckedCreateWithoutCropsInput> | FarmerCreateWithoutCropsInput[] | FarmerUncheckedCreateWithoutCropsInput[]
    connectOrCreate?: FarmerCreateOrConnectWithoutCropsInput | FarmerCreateOrConnectWithoutCropsInput[]
    connect?: FarmerWhereUniqueInput | FarmerWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutCropInput = {
    create?: XOR<ContractCreateWithoutCropInput, ContractUncheckedCreateWithoutCropInput> | ContractCreateWithoutCropInput[] | ContractUncheckedCreateWithoutCropInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutCropInput | ContractCreateOrConnectWithoutCropInput[]
    createMany?: ContractCreateManyCropInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type EnumcropSeasonFieldUpdateOperationsInput = {
    set?: $Enums.cropSeason
  }

  export type FarmerUpdateManyWithoutCropsNestedInput = {
    create?: XOR<FarmerCreateWithoutCropsInput, FarmerUncheckedCreateWithoutCropsInput> | FarmerCreateWithoutCropsInput[] | FarmerUncheckedCreateWithoutCropsInput[]
    connectOrCreate?: FarmerCreateOrConnectWithoutCropsInput | FarmerCreateOrConnectWithoutCropsInput[]
    upsert?: FarmerUpsertWithWhereUniqueWithoutCropsInput | FarmerUpsertWithWhereUniqueWithoutCropsInput[]
    set?: FarmerWhereUniqueInput | FarmerWhereUniqueInput[]
    disconnect?: FarmerWhereUniqueInput | FarmerWhereUniqueInput[]
    delete?: FarmerWhereUniqueInput | FarmerWhereUniqueInput[]
    connect?: FarmerWhereUniqueInput | FarmerWhereUniqueInput[]
    update?: FarmerUpdateWithWhereUniqueWithoutCropsInput | FarmerUpdateWithWhereUniqueWithoutCropsInput[]
    updateMany?: FarmerUpdateManyWithWhereWithoutCropsInput | FarmerUpdateManyWithWhereWithoutCropsInput[]
    deleteMany?: FarmerScalarWhereInput | FarmerScalarWhereInput[]
  }

  export type ContractUpdateManyWithoutCropNestedInput = {
    create?: XOR<ContractCreateWithoutCropInput, ContractUncheckedCreateWithoutCropInput> | ContractCreateWithoutCropInput[] | ContractUncheckedCreateWithoutCropInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutCropInput | ContractCreateOrConnectWithoutCropInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutCropInput | ContractUpsertWithWhereUniqueWithoutCropInput[]
    createMany?: ContractCreateManyCropInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutCropInput | ContractUpdateWithWhereUniqueWithoutCropInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutCropInput | ContractUpdateManyWithWhereWithoutCropInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type FarmerUncheckedUpdateManyWithoutCropsNestedInput = {
    create?: XOR<FarmerCreateWithoutCropsInput, FarmerUncheckedCreateWithoutCropsInput> | FarmerCreateWithoutCropsInput[] | FarmerUncheckedCreateWithoutCropsInput[]
    connectOrCreate?: FarmerCreateOrConnectWithoutCropsInput | FarmerCreateOrConnectWithoutCropsInput[]
    upsert?: FarmerUpsertWithWhereUniqueWithoutCropsInput | FarmerUpsertWithWhereUniqueWithoutCropsInput[]
    set?: FarmerWhereUniqueInput | FarmerWhereUniqueInput[]
    disconnect?: FarmerWhereUniqueInput | FarmerWhereUniqueInput[]
    delete?: FarmerWhereUniqueInput | FarmerWhereUniqueInput[]
    connect?: FarmerWhereUniqueInput | FarmerWhereUniqueInput[]
    update?: FarmerUpdateWithWhereUniqueWithoutCropsInput | FarmerUpdateWithWhereUniqueWithoutCropsInput[]
    updateMany?: FarmerUpdateManyWithWhereWithoutCropsInput | FarmerUpdateManyWithWhereWithoutCropsInput[]
    deleteMany?: FarmerScalarWhereInput | FarmerScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutCropNestedInput = {
    create?: XOR<ContractCreateWithoutCropInput, ContractUncheckedCreateWithoutCropInput> | ContractCreateWithoutCropInput[] | ContractUncheckedCreateWithoutCropInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutCropInput | ContractCreateOrConnectWithoutCropInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutCropInput | ContractUpsertWithWhereUniqueWithoutCropInput[]
    createMany?: ContractCreateManyCropInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutCropInput | ContractUpdateWithWhereUniqueWithoutCropInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutCropInput | ContractUpdateManyWithWhereWithoutCropInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type FarmerCreateNestedOneWithoutContractsInput = {
    create?: XOR<FarmerCreateWithoutContractsInput, FarmerUncheckedCreateWithoutContractsInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutContractsInput
    connect?: FarmerWhereUniqueInput
  }

  export type ContractorCreateNestedOneWithoutContractsInput = {
    create?: XOR<ContractorCreateWithoutContractsInput, ContractorUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutContractsInput
    connect?: ContractorWhereUniqueInput
  }

  export type CropCreateNestedOneWithoutContractsInput = {
    create?: XOR<CropCreateWithoutContractsInput, CropUncheckedCreateWithoutContractsInput>
    connectOrCreate?: CropCreateOrConnectWithoutContractsInput
    connect?: CropWhereUniqueInput
  }

  export type EnumcropStatusFieldUpdateOperationsInput = {
    set?: $Enums.cropStatus
  }

  export type FarmerUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<FarmerCreateWithoutContractsInput, FarmerUncheckedCreateWithoutContractsInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutContractsInput
    upsert?: FarmerUpsertWithoutContractsInput
    connect?: FarmerWhereUniqueInput
    update?: XOR<XOR<FarmerUpdateToOneWithWhereWithoutContractsInput, FarmerUpdateWithoutContractsInput>, FarmerUncheckedUpdateWithoutContractsInput>
  }

  export type ContractorUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<ContractorCreateWithoutContractsInput, ContractorUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutContractsInput
    upsert?: ContractorUpsertWithoutContractsInput
    connect?: ContractorWhereUniqueInput
    update?: XOR<XOR<ContractorUpdateToOneWithWhereWithoutContractsInput, ContractorUpdateWithoutContractsInput>, ContractorUncheckedUpdateWithoutContractsInput>
  }

  export type CropUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<CropCreateWithoutContractsInput, CropUncheckedCreateWithoutContractsInput>
    connectOrCreate?: CropCreateOrConnectWithoutContractsInput
    upsert?: CropUpsertWithoutContractsInput
    connect?: CropWhereUniqueInput
    update?: XOR<XOR<CropUpdateToOneWithWhereWithoutContractsInput, CropUpdateWithoutContractsInput>, CropUncheckedUpdateWithoutContractsInput>
  }

  export type FarmerCreateNestedOneWithoutScoreCalculationsInput = {
    create?: XOR<FarmerCreateWithoutScoreCalculationsInput, FarmerUncheckedCreateWithoutScoreCalculationsInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutScoreCalculationsInput
    connect?: FarmerWhereUniqueInput
  }

  export type ContractorCreateNestedOneWithoutScoreCalculationsInput = {
    create?: XOR<ContractorCreateWithoutScoreCalculationsInput, ContractorUncheckedCreateWithoutScoreCalculationsInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutScoreCalculationsInput
    connect?: ContractorWhereUniqueInput
  }

  export type FarmerUpdateOneWithoutScoreCalculationsNestedInput = {
    create?: XOR<FarmerCreateWithoutScoreCalculationsInput, FarmerUncheckedCreateWithoutScoreCalculationsInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutScoreCalculationsInput
    upsert?: FarmerUpsertWithoutScoreCalculationsInput
    disconnect?: FarmerWhereInput | boolean
    delete?: FarmerWhereInput | boolean
    connect?: FarmerWhereUniqueInput
    update?: XOR<XOR<FarmerUpdateToOneWithWhereWithoutScoreCalculationsInput, FarmerUpdateWithoutScoreCalculationsInput>, FarmerUncheckedUpdateWithoutScoreCalculationsInput>
  }

  export type ContractorUpdateOneWithoutScoreCalculationsNestedInput = {
    create?: XOR<ContractorCreateWithoutScoreCalculationsInput, ContractorUncheckedCreateWithoutScoreCalculationsInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutScoreCalculationsInput
    upsert?: ContractorUpsertWithoutScoreCalculationsInput
    disconnect?: ContractorWhereInput | boolean
    delete?: ContractorWhereInput | boolean
    connect?: ContractorWhereUniqueInput
    update?: XOR<XOR<ContractorUpdateToOneWithWhereWithoutScoreCalculationsInput, ContractorUpdateWithoutScoreCalculationsInput>, ContractorUncheckedUpdateWithoutScoreCalculationsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FarmerCreateNestedOneWithoutMessagesSentInput = {
    create?: XOR<FarmerCreateWithoutMessagesSentInput, FarmerUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutMessagesSentInput
    connect?: FarmerWhereUniqueInput
  }

  export type FarmerCreateNestedOneWithoutMessagesReceivedInput = {
    create?: XOR<FarmerCreateWithoutMessagesReceivedInput, FarmerUncheckedCreateWithoutMessagesReceivedInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutMessagesReceivedInput
    connect?: FarmerWhereUniqueInput
  }

  export type ContractorCreateNestedOneWithoutMessagesSentInput = {
    create?: XOR<ContractorCreateWithoutMessagesSentInput, ContractorUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutMessagesSentInput
    connect?: ContractorWhereUniqueInput
  }

  export type ContractorCreateNestedOneWithoutMessagesReceivedInput = {
    create?: XOR<ContractorCreateWithoutMessagesReceivedInput, ContractorUncheckedCreateWithoutMessagesReceivedInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutMessagesReceivedInput
    connect?: ContractorWhereUniqueInput
  }

  export type FarmerUpdateOneWithoutMessagesSentNestedInput = {
    create?: XOR<FarmerCreateWithoutMessagesSentInput, FarmerUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutMessagesSentInput
    upsert?: FarmerUpsertWithoutMessagesSentInput
    disconnect?: FarmerWhereInput | boolean
    delete?: FarmerWhereInput | boolean
    connect?: FarmerWhereUniqueInput
    update?: XOR<XOR<FarmerUpdateToOneWithWhereWithoutMessagesSentInput, FarmerUpdateWithoutMessagesSentInput>, FarmerUncheckedUpdateWithoutMessagesSentInput>
  }

  export type FarmerUpdateOneWithoutMessagesReceivedNestedInput = {
    create?: XOR<FarmerCreateWithoutMessagesReceivedInput, FarmerUncheckedCreateWithoutMessagesReceivedInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutMessagesReceivedInput
    upsert?: FarmerUpsertWithoutMessagesReceivedInput
    disconnect?: FarmerWhereInput | boolean
    delete?: FarmerWhereInput | boolean
    connect?: FarmerWhereUniqueInput
    update?: XOR<XOR<FarmerUpdateToOneWithWhereWithoutMessagesReceivedInput, FarmerUpdateWithoutMessagesReceivedInput>, FarmerUncheckedUpdateWithoutMessagesReceivedInput>
  }

  export type ContractorUpdateOneWithoutMessagesSentNestedInput = {
    create?: XOR<ContractorCreateWithoutMessagesSentInput, ContractorUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutMessagesSentInput
    upsert?: ContractorUpsertWithoutMessagesSentInput
    disconnect?: ContractorWhereInput | boolean
    delete?: ContractorWhereInput | boolean
    connect?: ContractorWhereUniqueInput
    update?: XOR<XOR<ContractorUpdateToOneWithWhereWithoutMessagesSentInput, ContractorUpdateWithoutMessagesSentInput>, ContractorUncheckedUpdateWithoutMessagesSentInput>
  }

  export type ContractorUpdateOneWithoutMessagesReceivedNestedInput = {
    create?: XOR<ContractorCreateWithoutMessagesReceivedInput, ContractorUncheckedCreateWithoutMessagesReceivedInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutMessagesReceivedInput
    upsert?: ContractorUpsertWithoutMessagesReceivedInput
    disconnect?: ContractorWhereInput | boolean
    delete?: ContractorWhereInput | boolean
    connect?: ContractorWhereUniqueInput
    update?: XOR<XOR<ContractorUpdateToOneWithWhereWithoutMessagesReceivedInput, ContractorUpdateWithoutMessagesReceivedInput>, ContractorUncheckedUpdateWithoutMessagesReceivedInput>
  }

  export type LikeCreateNestedManyWithoutPostInput = {
    create?: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput> | LikeCreateWithoutPostInput[] | LikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[]
    createMany?: LikeCreateManyPostInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type FarmerCreateNestedOneWithoutPostsInput = {
    create?: XOR<FarmerCreateWithoutPostsInput, FarmerUncheckedCreateWithoutPostsInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutPostsInput
    connect?: FarmerWhereUniqueInput
  }

  export type ContractorCreateNestedOneWithoutPostsInput = {
    create?: XOR<ContractorCreateWithoutPostsInput, ContractorUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutPostsInput
    connect?: ContractorWhereUniqueInput
  }

  export type LikeUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput> | LikeCreateWithoutPostInput[] | LikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[]
    createMany?: LikeCreateManyPostInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type LikeUpdateManyWithoutPostNestedInput = {
    create?: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput> | LikeCreateWithoutPostInput[] | LikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutPostInput | LikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: LikeCreateManyPostInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutPostInput | LikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutPostInput | LikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type FarmerUpdateOneWithoutPostsNestedInput = {
    create?: XOR<FarmerCreateWithoutPostsInput, FarmerUncheckedCreateWithoutPostsInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutPostsInput
    upsert?: FarmerUpsertWithoutPostsInput
    disconnect?: FarmerWhereInput | boolean
    delete?: FarmerWhereInput | boolean
    connect?: FarmerWhereUniqueInput
    update?: XOR<XOR<FarmerUpdateToOneWithWhereWithoutPostsInput, FarmerUpdateWithoutPostsInput>, FarmerUncheckedUpdateWithoutPostsInput>
  }

  export type ContractorUpdateOneWithoutPostsNestedInput = {
    create?: XOR<ContractorCreateWithoutPostsInput, ContractorUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutPostsInput
    upsert?: ContractorUpsertWithoutPostsInput
    disconnect?: ContractorWhereInput | boolean
    delete?: ContractorWhereInput | boolean
    connect?: ContractorWhereUniqueInput
    update?: XOR<XOR<ContractorUpdateToOneWithWhereWithoutPostsInput, ContractorUpdateWithoutPostsInput>, ContractorUncheckedUpdateWithoutPostsInput>
  }

  export type LikeUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput> | LikeCreateWithoutPostInput[] | LikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutPostInput | LikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: LikeCreateManyPostInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutPostInput | LikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutPostInput | LikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type PostCreateNestedOneWithoutLikesInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    connect?: PostWhereUniqueInput
  }

  export type FarmerCreateNestedOneWithoutLikesInput = {
    create?: XOR<FarmerCreateWithoutLikesInput, FarmerUncheckedCreateWithoutLikesInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutLikesInput
    connect?: FarmerWhereUniqueInput
  }

  export type ContractorCreateNestedOneWithoutLikesInput = {
    create?: XOR<ContractorCreateWithoutLikesInput, ContractorUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutLikesInput
    connect?: ContractorWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    upsert?: PostUpsertWithoutLikesInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutLikesInput, PostUpdateWithoutLikesInput>, PostUncheckedUpdateWithoutLikesInput>
  }

  export type FarmerUpdateOneWithoutLikesNestedInput = {
    create?: XOR<FarmerCreateWithoutLikesInput, FarmerUncheckedCreateWithoutLikesInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutLikesInput
    upsert?: FarmerUpsertWithoutLikesInput
    disconnect?: FarmerWhereInput | boolean
    delete?: FarmerWhereInput | boolean
    connect?: FarmerWhereUniqueInput
    update?: XOR<XOR<FarmerUpdateToOneWithWhereWithoutLikesInput, FarmerUpdateWithoutLikesInput>, FarmerUncheckedUpdateWithoutLikesInput>
  }

  export type ContractorUpdateOneWithoutLikesNestedInput = {
    create?: XOR<ContractorCreateWithoutLikesInput, ContractorUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutLikesInput
    upsert?: ContractorUpsertWithoutLikesInput
    disconnect?: ContractorWhereInput | boolean
    delete?: ContractorWhereInput | boolean
    connect?: ContractorWhereUniqueInput
    update?: XOR<XOR<ContractorUpdateToOneWithWhereWithoutLikesInput, ContractorUpdateWithoutLikesInput>, ContractorUncheckedUpdateWithoutLikesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumcropSeasonFilter<$PrismaModel = never> = {
    equals?: $Enums.cropSeason | EnumcropSeasonFieldRefInput<$PrismaModel>
    in?: $Enums.cropSeason[] | ListEnumcropSeasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.cropSeason[] | ListEnumcropSeasonFieldRefInput<$PrismaModel>
    not?: NestedEnumcropSeasonFilter<$PrismaModel> | $Enums.cropSeason
  }

  export type NestedEnumcropSeasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.cropSeason | EnumcropSeasonFieldRefInput<$PrismaModel>
    in?: $Enums.cropSeason[] | ListEnumcropSeasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.cropSeason[] | ListEnumcropSeasonFieldRefInput<$PrismaModel>
    not?: NestedEnumcropSeasonWithAggregatesFilter<$PrismaModel> | $Enums.cropSeason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcropSeasonFilter<$PrismaModel>
    _max?: NestedEnumcropSeasonFilter<$PrismaModel>
  }

  export type NestedEnumcropStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.cropStatus | EnumcropStatusFieldRefInput<$PrismaModel>
    in?: $Enums.cropStatus[] | ListEnumcropStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.cropStatus[] | ListEnumcropStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumcropStatusFilter<$PrismaModel> | $Enums.cropStatus
  }

  export type NestedEnumcropStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.cropStatus | EnumcropStatusFieldRefInput<$PrismaModel>
    in?: $Enums.cropStatus[] | ListEnumcropStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.cropStatus[] | ListEnumcropStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumcropStatusWithAggregatesFilter<$PrismaModel> | $Enums.cropStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcropStatusFilter<$PrismaModel>
    _max?: NestedEnumcropStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CropCreateWithoutFarmersInput = {
    name: string
    season: $Enums.cropSeason
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractCreateNestedManyWithoutCropInput
  }

  export type CropUncheckedCreateWithoutFarmersInput = {
    id?: number
    name: string
    season: $Enums.cropSeason
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutCropInput
  }

  export type CropCreateOrConnectWithoutFarmersInput = {
    where: CropWhereUniqueInput
    create: XOR<CropCreateWithoutFarmersInput, CropUncheckedCreateWithoutFarmersInput>
  }

  export type ContractCreateWithoutFarmerInput = {
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractor: ContractorCreateNestedOneWithoutContractsInput
    crop: CropCreateNestedOneWithoutContractsInput
  }

  export type ContractUncheckedCreateWithoutFarmerInput = {
    id?: number
    contractorId: number
    cropId: number
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractCreateOrConnectWithoutFarmerInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutFarmerInput, ContractUncheckedCreateWithoutFarmerInput>
  }

  export type ContractCreateManyFarmerInputEnvelope = {
    data: ContractCreateManyFarmerInput | ContractCreateManyFarmerInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutFarmerInput = {
    content: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: LikeCreateNestedManyWithoutPostInput
    contractor?: ContractorCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutFarmerInput = {
    id?: number
    content: string
    imageUrl?: string | null
    contractorId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutFarmerInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutFarmerInput, PostUncheckedCreateWithoutFarmerInput>
  }

  export type PostCreateManyFarmerInputEnvelope = {
    data: PostCreateManyFarmerInput | PostCreateManyFarmerInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderFarmerInput = {
    content: string
    createdAt?: Date | string
    receiverFarmer?: FarmerCreateNestedOneWithoutMessagesReceivedInput
    senderContractor?: ContractorCreateNestedOneWithoutMessagesSentInput
    receiverContractor?: ContractorCreateNestedOneWithoutMessagesReceivedInput
  }

  export type MessageUncheckedCreateWithoutSenderFarmerInput = {
    id?: number
    content: string
    receiverId: number
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutSenderFarmerInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderFarmerInput, MessageUncheckedCreateWithoutSenderFarmerInput>
  }

  export type MessageCreateManySenderFarmerInputEnvelope = {
    data: MessageCreateManySenderFarmerInput | MessageCreateManySenderFarmerInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutReceiverFarmerInput = {
    content: string
    createdAt?: Date | string
    senderFarmer?: FarmerCreateNestedOneWithoutMessagesSentInput
    senderContractor?: ContractorCreateNestedOneWithoutMessagesSentInput
    receiverContractor?: ContractorCreateNestedOneWithoutMessagesReceivedInput
  }

  export type MessageUncheckedCreateWithoutReceiverFarmerInput = {
    id?: number
    content: string
    senderId: number
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutReceiverFarmerInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReceiverFarmerInput, MessageUncheckedCreateWithoutReceiverFarmerInput>
  }

  export type MessageCreateManyReceiverFarmerInputEnvelope = {
    data: MessageCreateManyReceiverFarmerInput | MessageCreateManyReceiverFarmerInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutFarmerInput = {
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutLikesInput
    contractor?: ContractorCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutFarmerInput = {
    id?: number
    postId: number
    createdAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutFarmerInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutFarmerInput, LikeUncheckedCreateWithoutFarmerInput>
  }

  export type LikeCreateManyFarmerInputEnvelope = {
    data: LikeCreateManyFarmerInput | LikeCreateManyFarmerInput[]
    skipDuplicates?: boolean
  }

  export type ScoreCalculationCreateWithoutFarmerInput = {
    score: number
    calculationDate?: Date | string
    criteria: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractor?: ContractorCreateNestedOneWithoutScoreCalculationsInput
  }

  export type ScoreCalculationUncheckedCreateWithoutFarmerInput = {
    id?: number
    contractorId?: number | null
    score: number
    calculationDate?: Date | string
    criteria: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScoreCalculationCreateOrConnectWithoutFarmerInput = {
    where: ScoreCalculationWhereUniqueInput
    create: XOR<ScoreCalculationCreateWithoutFarmerInput, ScoreCalculationUncheckedCreateWithoutFarmerInput>
  }

  export type ScoreCalculationCreateManyFarmerInputEnvelope = {
    data: ScoreCalculationCreateManyFarmerInput | ScoreCalculationCreateManyFarmerInput[]
    skipDuplicates?: boolean
  }

  export type CropUpsertWithWhereUniqueWithoutFarmersInput = {
    where: CropWhereUniqueInput
    update: XOR<CropUpdateWithoutFarmersInput, CropUncheckedUpdateWithoutFarmersInput>
    create: XOR<CropCreateWithoutFarmersInput, CropUncheckedCreateWithoutFarmersInput>
  }

  export type CropUpdateWithWhereUniqueWithoutFarmersInput = {
    where: CropWhereUniqueInput
    data: XOR<CropUpdateWithoutFarmersInput, CropUncheckedUpdateWithoutFarmersInput>
  }

  export type CropUpdateManyWithWhereWithoutFarmersInput = {
    where: CropScalarWhereInput
    data: XOR<CropUpdateManyMutationInput, CropUncheckedUpdateManyWithoutFarmersInput>
  }

  export type CropScalarWhereInput = {
    AND?: CropScalarWhereInput | CropScalarWhereInput[]
    OR?: CropScalarWhereInput[]
    NOT?: CropScalarWhereInput | CropScalarWhereInput[]
    id?: IntFilter<"Crop"> | number
    name?: StringFilter<"Crop"> | string
    season?: EnumcropSeasonFilter<"Crop"> | $Enums.cropSeason
    createdAt?: DateTimeFilter<"Crop"> | Date | string
    updatedAt?: DateTimeFilter<"Crop"> | Date | string
  }

  export type ContractUpsertWithWhereUniqueWithoutFarmerInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutFarmerInput, ContractUncheckedUpdateWithoutFarmerInput>
    create: XOR<ContractCreateWithoutFarmerInput, ContractUncheckedCreateWithoutFarmerInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutFarmerInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutFarmerInput, ContractUncheckedUpdateWithoutFarmerInput>
  }

  export type ContractUpdateManyWithWhereWithoutFarmerInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutFarmerInput>
  }

  export type ContractScalarWhereInput = {
    AND?: ContractScalarWhereInput | ContractScalarWhereInput[]
    OR?: ContractScalarWhereInput[]
    NOT?: ContractScalarWhereInput | ContractScalarWhereInput[]
    id?: IntFilter<"Contract"> | number
    farmerId?: IntFilter<"Contract"> | number
    contractorId?: IntFilter<"Contract"> | number
    cropId?: IntFilter<"Contract"> | number
    landSize?: FloatFilter<"Contract"> | number
    amount?: FloatFilter<"Contract"> | number
    advancePayment?: FloatFilter<"Contract"> | number
    expectedYield?: FloatFilter<"Contract"> | number
    prefixedPrice?: FloatFilter<"Contract"> | number
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    insuranceFactors?: StringFilter<"Contract"> | string
    status?: EnumcropStatusFilter<"Contract"> | $Enums.cropStatus
    contractStatus?: StringFilter<"Contract"> | string
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
  }

  export type PostUpsertWithWhereUniqueWithoutFarmerInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutFarmerInput, PostUncheckedUpdateWithoutFarmerInput>
    create: XOR<PostCreateWithoutFarmerInput, PostUncheckedCreateWithoutFarmerInput>
  }

  export type PostUpdateWithWhereUniqueWithoutFarmerInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutFarmerInput, PostUncheckedUpdateWithoutFarmerInput>
  }

  export type PostUpdateManyWithWhereWithoutFarmerInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutFarmerInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: IntFilter<"Post"> | number
    content?: StringFilter<"Post"> | string
    imageUrl?: StringNullableFilter<"Post"> | string | null
    farmerId?: IntNullableFilter<"Post"> | number | null
    contractorId?: IntNullableFilter<"Post"> | number | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderFarmerInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderFarmerInput, MessageUncheckedUpdateWithoutSenderFarmerInput>
    create: XOR<MessageCreateWithoutSenderFarmerInput, MessageUncheckedCreateWithoutSenderFarmerInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderFarmerInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderFarmerInput, MessageUncheckedUpdateWithoutSenderFarmerInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderFarmerInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderFarmerInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    senderId?: IntFilter<"Message"> | number
    receiverId?: IntFilter<"Message"> | number
    createdAt?: DateTimeFilter<"Message"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutReceiverFarmerInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReceiverFarmerInput, MessageUncheckedUpdateWithoutReceiverFarmerInput>
    create: XOR<MessageCreateWithoutReceiverFarmerInput, MessageUncheckedCreateWithoutReceiverFarmerInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReceiverFarmerInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReceiverFarmerInput, MessageUncheckedUpdateWithoutReceiverFarmerInput>
  }

  export type MessageUpdateManyWithWhereWithoutReceiverFarmerInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReceiverFarmerInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutFarmerInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutFarmerInput, LikeUncheckedUpdateWithoutFarmerInput>
    create: XOR<LikeCreateWithoutFarmerInput, LikeUncheckedCreateWithoutFarmerInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutFarmerInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutFarmerInput, LikeUncheckedUpdateWithoutFarmerInput>
  }

  export type LikeUpdateManyWithWhereWithoutFarmerInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutFarmerInput>
  }

  export type LikeScalarWhereInput = {
    AND?: LikeScalarWhereInput | LikeScalarWhereInput[]
    OR?: LikeScalarWhereInput[]
    NOT?: LikeScalarWhereInput | LikeScalarWhereInput[]
    id?: IntFilter<"Like"> | number
    postId?: IntFilter<"Like"> | number
    userId?: IntFilter<"Like"> | number
    createdAt?: DateTimeFilter<"Like"> | Date | string
  }

  export type ScoreCalculationUpsertWithWhereUniqueWithoutFarmerInput = {
    where: ScoreCalculationWhereUniqueInput
    update: XOR<ScoreCalculationUpdateWithoutFarmerInput, ScoreCalculationUncheckedUpdateWithoutFarmerInput>
    create: XOR<ScoreCalculationCreateWithoutFarmerInput, ScoreCalculationUncheckedCreateWithoutFarmerInput>
  }

  export type ScoreCalculationUpdateWithWhereUniqueWithoutFarmerInput = {
    where: ScoreCalculationWhereUniqueInput
    data: XOR<ScoreCalculationUpdateWithoutFarmerInput, ScoreCalculationUncheckedUpdateWithoutFarmerInput>
  }

  export type ScoreCalculationUpdateManyWithWhereWithoutFarmerInput = {
    where: ScoreCalculationScalarWhereInput
    data: XOR<ScoreCalculationUpdateManyMutationInput, ScoreCalculationUncheckedUpdateManyWithoutFarmerInput>
  }

  export type ScoreCalculationScalarWhereInput = {
    AND?: ScoreCalculationScalarWhereInput | ScoreCalculationScalarWhereInput[]
    OR?: ScoreCalculationScalarWhereInput[]
    NOT?: ScoreCalculationScalarWhereInput | ScoreCalculationScalarWhereInput[]
    id?: IntFilter<"ScoreCalculation"> | number
    farmerId?: IntNullableFilter<"ScoreCalculation"> | number | null
    contractorId?: IntNullableFilter<"ScoreCalculation"> | number | null
    score?: FloatFilter<"ScoreCalculation"> | number
    calculationDate?: DateTimeFilter<"ScoreCalculation"> | Date | string
    criteria?: StringFilter<"ScoreCalculation"> | string
    createdAt?: DateTimeFilter<"ScoreCalculation"> | Date | string
    updatedAt?: DateTimeFilter<"ScoreCalculation"> | Date | string
  }

  export type ContractCreateWithoutContractorInput = {
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
    farmer: FarmerCreateNestedOneWithoutContractsInput
    crop: CropCreateNestedOneWithoutContractsInput
  }

  export type ContractUncheckedCreateWithoutContractorInput = {
    id?: number
    farmerId: number
    cropId: number
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractCreateOrConnectWithoutContractorInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutContractorInput, ContractUncheckedCreateWithoutContractorInput>
  }

  export type ContractCreateManyContractorInputEnvelope = {
    data: ContractCreateManyContractorInput | ContractCreateManyContractorInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutContractorInput = {
    content: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: LikeCreateNestedManyWithoutPostInput
    farmer?: FarmerCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutContractorInput = {
    id?: number
    content: string
    imageUrl?: string | null
    farmerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutContractorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutContractorInput, PostUncheckedCreateWithoutContractorInput>
  }

  export type PostCreateManyContractorInputEnvelope = {
    data: PostCreateManyContractorInput | PostCreateManyContractorInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderContractorInput = {
    content: string
    createdAt?: Date | string
    senderFarmer?: FarmerCreateNestedOneWithoutMessagesSentInput
    receiverFarmer?: FarmerCreateNestedOneWithoutMessagesReceivedInput
    receiverContractor?: ContractorCreateNestedOneWithoutMessagesReceivedInput
  }

  export type MessageUncheckedCreateWithoutSenderContractorInput = {
    id?: number
    content: string
    receiverId: number
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutSenderContractorInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderContractorInput, MessageUncheckedCreateWithoutSenderContractorInput>
  }

  export type MessageCreateManySenderContractorInputEnvelope = {
    data: MessageCreateManySenderContractorInput | MessageCreateManySenderContractorInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutReceiverContractorInput = {
    content: string
    createdAt?: Date | string
    senderFarmer?: FarmerCreateNestedOneWithoutMessagesSentInput
    receiverFarmer?: FarmerCreateNestedOneWithoutMessagesReceivedInput
    senderContractor?: ContractorCreateNestedOneWithoutMessagesSentInput
  }

  export type MessageUncheckedCreateWithoutReceiverContractorInput = {
    id?: number
    content: string
    senderId: number
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutReceiverContractorInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReceiverContractorInput, MessageUncheckedCreateWithoutReceiverContractorInput>
  }

  export type MessageCreateManyReceiverContractorInputEnvelope = {
    data: MessageCreateManyReceiverContractorInput | MessageCreateManyReceiverContractorInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutContractorInput = {
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutLikesInput
    farmer?: FarmerCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutContractorInput = {
    id?: number
    postId: number
    createdAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutContractorInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutContractorInput, LikeUncheckedCreateWithoutContractorInput>
  }

  export type LikeCreateManyContractorInputEnvelope = {
    data: LikeCreateManyContractorInput | LikeCreateManyContractorInput[]
    skipDuplicates?: boolean
  }

  export type ScoreCalculationCreateWithoutContractorInput = {
    score: number
    calculationDate?: Date | string
    criteria: string
    createdAt?: Date | string
    updatedAt?: Date | string
    farmer?: FarmerCreateNestedOneWithoutScoreCalculationsInput
  }

  export type ScoreCalculationUncheckedCreateWithoutContractorInput = {
    id?: number
    farmerId?: number | null
    score: number
    calculationDate?: Date | string
    criteria: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScoreCalculationCreateOrConnectWithoutContractorInput = {
    where: ScoreCalculationWhereUniqueInput
    create: XOR<ScoreCalculationCreateWithoutContractorInput, ScoreCalculationUncheckedCreateWithoutContractorInput>
  }

  export type ScoreCalculationCreateManyContractorInputEnvelope = {
    data: ScoreCalculationCreateManyContractorInput | ScoreCalculationCreateManyContractorInput[]
    skipDuplicates?: boolean
  }

  export type ContractUpsertWithWhereUniqueWithoutContractorInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutContractorInput, ContractUncheckedUpdateWithoutContractorInput>
    create: XOR<ContractCreateWithoutContractorInput, ContractUncheckedCreateWithoutContractorInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutContractorInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutContractorInput, ContractUncheckedUpdateWithoutContractorInput>
  }

  export type ContractUpdateManyWithWhereWithoutContractorInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutContractorInput>
  }

  export type PostUpsertWithWhereUniqueWithoutContractorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutContractorInput, PostUncheckedUpdateWithoutContractorInput>
    create: XOR<PostCreateWithoutContractorInput, PostUncheckedCreateWithoutContractorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutContractorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutContractorInput, PostUncheckedUpdateWithoutContractorInput>
  }

  export type PostUpdateManyWithWhereWithoutContractorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutContractorInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderContractorInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderContractorInput, MessageUncheckedUpdateWithoutSenderContractorInput>
    create: XOR<MessageCreateWithoutSenderContractorInput, MessageUncheckedCreateWithoutSenderContractorInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderContractorInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderContractorInput, MessageUncheckedUpdateWithoutSenderContractorInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderContractorInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderContractorInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutReceiverContractorInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReceiverContractorInput, MessageUncheckedUpdateWithoutReceiverContractorInput>
    create: XOR<MessageCreateWithoutReceiverContractorInput, MessageUncheckedCreateWithoutReceiverContractorInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReceiverContractorInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReceiverContractorInput, MessageUncheckedUpdateWithoutReceiverContractorInput>
  }

  export type MessageUpdateManyWithWhereWithoutReceiverContractorInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReceiverContractorInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutContractorInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutContractorInput, LikeUncheckedUpdateWithoutContractorInput>
    create: XOR<LikeCreateWithoutContractorInput, LikeUncheckedCreateWithoutContractorInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutContractorInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutContractorInput, LikeUncheckedUpdateWithoutContractorInput>
  }

  export type LikeUpdateManyWithWhereWithoutContractorInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutContractorInput>
  }

  export type ScoreCalculationUpsertWithWhereUniqueWithoutContractorInput = {
    where: ScoreCalculationWhereUniqueInput
    update: XOR<ScoreCalculationUpdateWithoutContractorInput, ScoreCalculationUncheckedUpdateWithoutContractorInput>
    create: XOR<ScoreCalculationCreateWithoutContractorInput, ScoreCalculationUncheckedCreateWithoutContractorInput>
  }

  export type ScoreCalculationUpdateWithWhereUniqueWithoutContractorInput = {
    where: ScoreCalculationWhereUniqueInput
    data: XOR<ScoreCalculationUpdateWithoutContractorInput, ScoreCalculationUncheckedUpdateWithoutContractorInput>
  }

  export type ScoreCalculationUpdateManyWithWhereWithoutContractorInput = {
    where: ScoreCalculationScalarWhereInput
    data: XOR<ScoreCalculationUpdateManyMutationInput, ScoreCalculationUncheckedUpdateManyWithoutContractorInput>
  }

  export type FarmerCreateWithoutCropsInput = {
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractCreateNestedManyWithoutFarmerInput
    posts?: PostCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUncheckedCreateWithoutCropsInput = {
    id?: number
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutFarmerInput
    posts?: PostUncheckedCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeUncheckedCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutFarmerInput
  }

  export type FarmerCreateOrConnectWithoutCropsInput = {
    where: FarmerWhereUniqueInput
    create: XOR<FarmerCreateWithoutCropsInput, FarmerUncheckedCreateWithoutCropsInput>
  }

  export type ContractCreateWithoutCropInput = {
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
    farmer: FarmerCreateNestedOneWithoutContractsInput
    contractor: ContractorCreateNestedOneWithoutContractsInput
  }

  export type ContractUncheckedCreateWithoutCropInput = {
    id?: number
    farmerId: number
    contractorId: number
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractCreateOrConnectWithoutCropInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutCropInput, ContractUncheckedCreateWithoutCropInput>
  }

  export type ContractCreateManyCropInputEnvelope = {
    data: ContractCreateManyCropInput | ContractCreateManyCropInput[]
    skipDuplicates?: boolean
  }

  export type FarmerUpsertWithWhereUniqueWithoutCropsInput = {
    where: FarmerWhereUniqueInput
    update: XOR<FarmerUpdateWithoutCropsInput, FarmerUncheckedUpdateWithoutCropsInput>
    create: XOR<FarmerCreateWithoutCropsInput, FarmerUncheckedCreateWithoutCropsInput>
  }

  export type FarmerUpdateWithWhereUniqueWithoutCropsInput = {
    where: FarmerWhereUniqueInput
    data: XOR<FarmerUpdateWithoutCropsInput, FarmerUncheckedUpdateWithoutCropsInput>
  }

  export type FarmerUpdateManyWithWhereWithoutCropsInput = {
    where: FarmerScalarWhereInput
    data: XOR<FarmerUpdateManyMutationInput, FarmerUncheckedUpdateManyWithoutCropsInput>
  }

  export type FarmerScalarWhereInput = {
    AND?: FarmerScalarWhereInput | FarmerScalarWhereInput[]
    OR?: FarmerScalarWhereInput[]
    NOT?: FarmerScalarWhereInput | FarmerScalarWhereInput[]
    id?: IntFilter<"Farmer"> | number
    name?: StringFilter<"Farmer"> | string
    address?: StringFilter<"Farmer"> | string
    contactNo?: StringFilter<"Farmer"> | string
    email?: StringNullableFilter<"Farmer"> | string | null
    password?: StringFilter<"Farmer"> | string
    landSize?: FloatFilter<"Farmer"> | number
    fulfilledContracts?: IntFilter<"Farmer"> | number
    farmerScore?: FloatFilter<"Farmer"> | number
    avatar?: StringNullableFilter<"Farmer"> | string | null
    createdAt?: DateTimeFilter<"Farmer"> | Date | string
    updatedAt?: DateTimeFilter<"Farmer"> | Date | string
  }

  export type ContractUpsertWithWhereUniqueWithoutCropInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutCropInput, ContractUncheckedUpdateWithoutCropInput>
    create: XOR<ContractCreateWithoutCropInput, ContractUncheckedCreateWithoutCropInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutCropInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutCropInput, ContractUncheckedUpdateWithoutCropInput>
  }

  export type ContractUpdateManyWithWhereWithoutCropInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutCropInput>
  }

  export type FarmerCreateWithoutContractsInput = {
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropCreateNestedManyWithoutFarmersInput
    posts?: PostCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUncheckedCreateWithoutContractsInput = {
    id?: number
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropUncheckedCreateNestedManyWithoutFarmersInput
    posts?: PostUncheckedCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeUncheckedCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutFarmerInput
  }

  export type FarmerCreateOrConnectWithoutContractsInput = {
    where: FarmerWhereUniqueInput
    create: XOR<FarmerCreateWithoutContractsInput, FarmerUncheckedCreateWithoutContractsInput>
  }

  export type ContractorCreateWithoutContractsInput = {
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostCreateNestedManyWithoutContractorInput
    messagesSent?: MessageCreateNestedManyWithoutSenderContractorInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverContractorInput
    likes?: LikeCreateNestedManyWithoutContractorInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutContractorInput
  }

  export type ContractorUncheckedCreateWithoutContractsInput = {
    id?: number
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutContractorInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderContractorInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverContractorInput
    likes?: LikeUncheckedCreateNestedManyWithoutContractorInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutContractorInput
  }

  export type ContractorCreateOrConnectWithoutContractsInput = {
    where: ContractorWhereUniqueInput
    create: XOR<ContractorCreateWithoutContractsInput, ContractorUncheckedCreateWithoutContractsInput>
  }

  export type CropCreateWithoutContractsInput = {
    name: string
    season: $Enums.cropSeason
    createdAt?: Date | string
    updatedAt?: Date | string
    farmers?: FarmerCreateNestedManyWithoutCropsInput
  }

  export type CropUncheckedCreateWithoutContractsInput = {
    id?: number
    name: string
    season: $Enums.cropSeason
    createdAt?: Date | string
    updatedAt?: Date | string
    farmers?: FarmerUncheckedCreateNestedManyWithoutCropsInput
  }

  export type CropCreateOrConnectWithoutContractsInput = {
    where: CropWhereUniqueInput
    create: XOR<CropCreateWithoutContractsInput, CropUncheckedCreateWithoutContractsInput>
  }

  export type FarmerUpsertWithoutContractsInput = {
    update: XOR<FarmerUpdateWithoutContractsInput, FarmerUncheckedUpdateWithoutContractsInput>
    create: XOR<FarmerCreateWithoutContractsInput, FarmerUncheckedCreateWithoutContractsInput>
    where?: FarmerWhereInput
  }

  export type FarmerUpdateToOneWithWhereWithoutContractsInput = {
    where?: FarmerWhereInput
    data: XOR<FarmerUpdateWithoutContractsInput, FarmerUncheckedUpdateWithoutContractsInput>
  }

  export type FarmerUpdateWithoutContractsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUpdateManyWithoutFarmersNestedInput
    posts?: PostUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateWithoutContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUncheckedUpdateManyWithoutFarmersNestedInput
    posts?: PostUncheckedUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUncheckedUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutFarmerNestedInput
  }

  export type ContractorUpsertWithoutContractsInput = {
    update: XOR<ContractorUpdateWithoutContractsInput, ContractorUncheckedUpdateWithoutContractsInput>
    create: XOR<ContractorCreateWithoutContractsInput, ContractorUncheckedCreateWithoutContractsInput>
    where?: ContractorWhereInput
  }

  export type ContractorUpdateToOneWithWhereWithoutContractsInput = {
    where?: ContractorWhereInput
    data: XOR<ContractorUpdateWithoutContractsInput, ContractorUncheckedUpdateWithoutContractsInput>
  }

  export type ContractorUpdateWithoutContractsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderContractorNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverContractorNestedInput
    likes?: LikeUpdateManyWithoutContractorNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutContractorNestedInput
  }

  export type ContractorUncheckedUpdateWithoutContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderContractorNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverContractorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutContractorNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutContractorNestedInput
  }

  export type CropUpsertWithoutContractsInput = {
    update: XOR<CropUpdateWithoutContractsInput, CropUncheckedUpdateWithoutContractsInput>
    create: XOR<CropCreateWithoutContractsInput, CropUncheckedCreateWithoutContractsInput>
    where?: CropWhereInput
  }

  export type CropUpdateToOneWithWhereWithoutContractsInput = {
    where?: CropWhereInput
    data: XOR<CropUpdateWithoutContractsInput, CropUncheckedUpdateWithoutContractsInput>
  }

  export type CropUpdateWithoutContractsInput = {
    name?: StringFieldUpdateOperationsInput | string
    season?: EnumcropSeasonFieldUpdateOperationsInput | $Enums.cropSeason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmers?: FarmerUpdateManyWithoutCropsNestedInput
  }

  export type CropUncheckedUpdateWithoutContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    season?: EnumcropSeasonFieldUpdateOperationsInput | $Enums.cropSeason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmers?: FarmerUncheckedUpdateManyWithoutCropsNestedInput
  }

  export type FarmerCreateWithoutScoreCalculationsInput = {
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropCreateNestedManyWithoutFarmersInput
    contracts?: ContractCreateNestedManyWithoutFarmerInput
    posts?: PostCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUncheckedCreateWithoutScoreCalculationsInput = {
    id?: number
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropUncheckedCreateNestedManyWithoutFarmersInput
    contracts?: ContractUncheckedCreateNestedManyWithoutFarmerInput
    posts?: PostUncheckedCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeUncheckedCreateNestedManyWithoutFarmerInput
  }

  export type FarmerCreateOrConnectWithoutScoreCalculationsInput = {
    where: FarmerWhereUniqueInput
    create: XOR<FarmerCreateWithoutScoreCalculationsInput, FarmerUncheckedCreateWithoutScoreCalculationsInput>
  }

  export type ContractorCreateWithoutScoreCalculationsInput = {
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractCreateNestedManyWithoutContractorInput
    posts?: PostCreateNestedManyWithoutContractorInput
    messagesSent?: MessageCreateNestedManyWithoutSenderContractorInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverContractorInput
    likes?: LikeCreateNestedManyWithoutContractorInput
  }

  export type ContractorUncheckedCreateWithoutScoreCalculationsInput = {
    id?: number
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutContractorInput
    posts?: PostUncheckedCreateNestedManyWithoutContractorInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderContractorInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverContractorInput
    likes?: LikeUncheckedCreateNestedManyWithoutContractorInput
  }

  export type ContractorCreateOrConnectWithoutScoreCalculationsInput = {
    where: ContractorWhereUniqueInput
    create: XOR<ContractorCreateWithoutScoreCalculationsInput, ContractorUncheckedCreateWithoutScoreCalculationsInput>
  }

  export type FarmerUpsertWithoutScoreCalculationsInput = {
    update: XOR<FarmerUpdateWithoutScoreCalculationsInput, FarmerUncheckedUpdateWithoutScoreCalculationsInput>
    create: XOR<FarmerCreateWithoutScoreCalculationsInput, FarmerUncheckedCreateWithoutScoreCalculationsInput>
    where?: FarmerWhereInput
  }

  export type FarmerUpdateToOneWithWhereWithoutScoreCalculationsInput = {
    where?: FarmerWhereInput
    data: XOR<FarmerUpdateWithoutScoreCalculationsInput, FarmerUncheckedUpdateWithoutScoreCalculationsInput>
  }

  export type FarmerUpdateWithoutScoreCalculationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUpdateManyWithoutFarmerNestedInput
    posts?: PostUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateWithoutScoreCalculationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUncheckedUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutFarmerNestedInput
    posts?: PostUncheckedUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUncheckedUpdateManyWithoutFarmerNestedInput
  }

  export type ContractorUpsertWithoutScoreCalculationsInput = {
    update: XOR<ContractorUpdateWithoutScoreCalculationsInput, ContractorUncheckedUpdateWithoutScoreCalculationsInput>
    create: XOR<ContractorCreateWithoutScoreCalculationsInput, ContractorUncheckedCreateWithoutScoreCalculationsInput>
    where?: ContractorWhereInput
  }

  export type ContractorUpdateToOneWithWhereWithoutScoreCalculationsInput = {
    where?: ContractorWhereInput
    data: XOR<ContractorUpdateWithoutScoreCalculationsInput, ContractorUncheckedUpdateWithoutScoreCalculationsInput>
  }

  export type ContractorUpdateWithoutScoreCalculationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUpdateManyWithoutContractorNestedInput
    posts?: PostUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderContractorNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverContractorNestedInput
    likes?: LikeUpdateManyWithoutContractorNestedInput
  }

  export type ContractorUncheckedUpdateWithoutScoreCalculationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutContractorNestedInput
    posts?: PostUncheckedUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderContractorNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverContractorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutContractorNestedInput
  }

  export type FarmerCreateWithoutMessagesSentInput = {
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropCreateNestedManyWithoutFarmersInput
    contracts?: ContractCreateNestedManyWithoutFarmerInput
    posts?: PostCreateNestedManyWithoutFarmerInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUncheckedCreateWithoutMessagesSentInput = {
    id?: number
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropUncheckedCreateNestedManyWithoutFarmersInput
    contracts?: ContractUncheckedCreateNestedManyWithoutFarmerInput
    posts?: PostUncheckedCreateNestedManyWithoutFarmerInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeUncheckedCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutFarmerInput
  }

  export type FarmerCreateOrConnectWithoutMessagesSentInput = {
    where: FarmerWhereUniqueInput
    create: XOR<FarmerCreateWithoutMessagesSentInput, FarmerUncheckedCreateWithoutMessagesSentInput>
  }

  export type FarmerCreateWithoutMessagesReceivedInput = {
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropCreateNestedManyWithoutFarmersInput
    contracts?: ContractCreateNestedManyWithoutFarmerInput
    posts?: PostCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageCreateNestedManyWithoutSenderFarmerInput
    likes?: LikeCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUncheckedCreateWithoutMessagesReceivedInput = {
    id?: number
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropUncheckedCreateNestedManyWithoutFarmersInput
    contracts?: ContractUncheckedCreateNestedManyWithoutFarmerInput
    posts?: PostUncheckedCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderFarmerInput
    likes?: LikeUncheckedCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutFarmerInput
  }

  export type FarmerCreateOrConnectWithoutMessagesReceivedInput = {
    where: FarmerWhereUniqueInput
    create: XOR<FarmerCreateWithoutMessagesReceivedInput, FarmerUncheckedCreateWithoutMessagesReceivedInput>
  }

  export type ContractorCreateWithoutMessagesSentInput = {
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractCreateNestedManyWithoutContractorInput
    posts?: PostCreateNestedManyWithoutContractorInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverContractorInput
    likes?: LikeCreateNestedManyWithoutContractorInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutContractorInput
  }

  export type ContractorUncheckedCreateWithoutMessagesSentInput = {
    id?: number
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutContractorInput
    posts?: PostUncheckedCreateNestedManyWithoutContractorInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverContractorInput
    likes?: LikeUncheckedCreateNestedManyWithoutContractorInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutContractorInput
  }

  export type ContractorCreateOrConnectWithoutMessagesSentInput = {
    where: ContractorWhereUniqueInput
    create: XOR<ContractorCreateWithoutMessagesSentInput, ContractorUncheckedCreateWithoutMessagesSentInput>
  }

  export type ContractorCreateWithoutMessagesReceivedInput = {
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractCreateNestedManyWithoutContractorInput
    posts?: PostCreateNestedManyWithoutContractorInput
    messagesSent?: MessageCreateNestedManyWithoutSenderContractorInput
    likes?: LikeCreateNestedManyWithoutContractorInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutContractorInput
  }

  export type ContractorUncheckedCreateWithoutMessagesReceivedInput = {
    id?: number
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutContractorInput
    posts?: PostUncheckedCreateNestedManyWithoutContractorInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderContractorInput
    likes?: LikeUncheckedCreateNestedManyWithoutContractorInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutContractorInput
  }

  export type ContractorCreateOrConnectWithoutMessagesReceivedInput = {
    where: ContractorWhereUniqueInput
    create: XOR<ContractorCreateWithoutMessagesReceivedInput, ContractorUncheckedCreateWithoutMessagesReceivedInput>
  }

  export type FarmerUpsertWithoutMessagesSentInput = {
    update: XOR<FarmerUpdateWithoutMessagesSentInput, FarmerUncheckedUpdateWithoutMessagesSentInput>
    create: XOR<FarmerCreateWithoutMessagesSentInput, FarmerUncheckedCreateWithoutMessagesSentInput>
    where?: FarmerWhereInput
  }

  export type FarmerUpdateToOneWithWhereWithoutMessagesSentInput = {
    where?: FarmerWhereInput
    data: XOR<FarmerUpdateWithoutMessagesSentInput, FarmerUncheckedUpdateWithoutMessagesSentInput>
  }

  export type FarmerUpdateWithoutMessagesSentInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUpdateManyWithoutFarmerNestedInput
    posts?: PostUpdateManyWithoutFarmerNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateWithoutMessagesSentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUncheckedUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutFarmerNestedInput
    posts?: PostUncheckedUpdateManyWithoutFarmerNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUncheckedUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUpsertWithoutMessagesReceivedInput = {
    update: XOR<FarmerUpdateWithoutMessagesReceivedInput, FarmerUncheckedUpdateWithoutMessagesReceivedInput>
    create: XOR<FarmerCreateWithoutMessagesReceivedInput, FarmerUncheckedCreateWithoutMessagesReceivedInput>
    where?: FarmerWhereInput
  }

  export type FarmerUpdateToOneWithWhereWithoutMessagesReceivedInput = {
    where?: FarmerWhereInput
    data: XOR<FarmerUpdateWithoutMessagesReceivedInput, FarmerUncheckedUpdateWithoutMessagesReceivedInput>
  }

  export type FarmerUpdateWithoutMessagesReceivedInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUpdateManyWithoutFarmerNestedInput
    posts?: PostUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderFarmerNestedInput
    likes?: LikeUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateWithoutMessagesReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUncheckedUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutFarmerNestedInput
    posts?: PostUncheckedUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderFarmerNestedInput
    likes?: LikeUncheckedUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutFarmerNestedInput
  }

  export type ContractorUpsertWithoutMessagesSentInput = {
    update: XOR<ContractorUpdateWithoutMessagesSentInput, ContractorUncheckedUpdateWithoutMessagesSentInput>
    create: XOR<ContractorCreateWithoutMessagesSentInput, ContractorUncheckedCreateWithoutMessagesSentInput>
    where?: ContractorWhereInput
  }

  export type ContractorUpdateToOneWithWhereWithoutMessagesSentInput = {
    where?: ContractorWhereInput
    data: XOR<ContractorUpdateWithoutMessagesSentInput, ContractorUncheckedUpdateWithoutMessagesSentInput>
  }

  export type ContractorUpdateWithoutMessagesSentInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUpdateManyWithoutContractorNestedInput
    posts?: PostUpdateManyWithoutContractorNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverContractorNestedInput
    likes?: LikeUpdateManyWithoutContractorNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutContractorNestedInput
  }

  export type ContractorUncheckedUpdateWithoutMessagesSentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutContractorNestedInput
    posts?: PostUncheckedUpdateManyWithoutContractorNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverContractorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutContractorNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutContractorNestedInput
  }

  export type ContractorUpsertWithoutMessagesReceivedInput = {
    update: XOR<ContractorUpdateWithoutMessagesReceivedInput, ContractorUncheckedUpdateWithoutMessagesReceivedInput>
    create: XOR<ContractorCreateWithoutMessagesReceivedInput, ContractorUncheckedCreateWithoutMessagesReceivedInput>
    where?: ContractorWhereInput
  }

  export type ContractorUpdateToOneWithWhereWithoutMessagesReceivedInput = {
    where?: ContractorWhereInput
    data: XOR<ContractorUpdateWithoutMessagesReceivedInput, ContractorUncheckedUpdateWithoutMessagesReceivedInput>
  }

  export type ContractorUpdateWithoutMessagesReceivedInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUpdateManyWithoutContractorNestedInput
    posts?: PostUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderContractorNestedInput
    likes?: LikeUpdateManyWithoutContractorNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutContractorNestedInput
  }

  export type ContractorUncheckedUpdateWithoutMessagesReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutContractorNestedInput
    posts?: PostUncheckedUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderContractorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutContractorNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutContractorNestedInput
  }

  export type LikeCreateWithoutPostInput = {
    createdAt?: Date | string
    farmer?: FarmerCreateNestedOneWithoutLikesInput
    contractor?: ContractorCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutPostInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutPostInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>
  }

  export type LikeCreateManyPostInputEnvelope = {
    data: LikeCreateManyPostInput | LikeCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type FarmerCreateWithoutPostsInput = {
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropCreateNestedManyWithoutFarmersInput
    contracts?: ContractCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUncheckedCreateWithoutPostsInput = {
    id?: number
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropUncheckedCreateNestedManyWithoutFarmersInput
    contracts?: ContractUncheckedCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverFarmerInput
    likes?: LikeUncheckedCreateNestedManyWithoutFarmerInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutFarmerInput
  }

  export type FarmerCreateOrConnectWithoutPostsInput = {
    where: FarmerWhereUniqueInput
    create: XOR<FarmerCreateWithoutPostsInput, FarmerUncheckedCreateWithoutPostsInput>
  }

  export type ContractorCreateWithoutPostsInput = {
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractCreateNestedManyWithoutContractorInput
    messagesSent?: MessageCreateNestedManyWithoutSenderContractorInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverContractorInput
    likes?: LikeCreateNestedManyWithoutContractorInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutContractorInput
  }

  export type ContractorUncheckedCreateWithoutPostsInput = {
    id?: number
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutContractorInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderContractorInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverContractorInput
    likes?: LikeUncheckedCreateNestedManyWithoutContractorInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutContractorInput
  }

  export type ContractorCreateOrConnectWithoutPostsInput = {
    where: ContractorWhereUniqueInput
    create: XOR<ContractorCreateWithoutPostsInput, ContractorUncheckedCreateWithoutPostsInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutPostInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutPostInput, LikeUncheckedUpdateWithoutPostInput>
    create: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutPostInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutPostInput, LikeUncheckedUpdateWithoutPostInput>
  }

  export type LikeUpdateManyWithWhereWithoutPostInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutPostInput>
  }

  export type FarmerUpsertWithoutPostsInput = {
    update: XOR<FarmerUpdateWithoutPostsInput, FarmerUncheckedUpdateWithoutPostsInput>
    create: XOR<FarmerCreateWithoutPostsInput, FarmerUncheckedCreateWithoutPostsInput>
    where?: FarmerWhereInput
  }

  export type FarmerUpdateToOneWithWhereWithoutPostsInput = {
    where?: FarmerWhereInput
    data: XOR<FarmerUpdateWithoutPostsInput, FarmerUncheckedUpdateWithoutPostsInput>
  }

  export type FarmerUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUncheckedUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUncheckedUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutFarmerNestedInput
  }

  export type ContractorUpsertWithoutPostsInput = {
    update: XOR<ContractorUpdateWithoutPostsInput, ContractorUncheckedUpdateWithoutPostsInput>
    create: XOR<ContractorCreateWithoutPostsInput, ContractorUncheckedCreateWithoutPostsInput>
    where?: ContractorWhereInput
  }

  export type ContractorUpdateToOneWithWhereWithoutPostsInput = {
    where?: ContractorWhereInput
    data: XOR<ContractorUpdateWithoutPostsInput, ContractorUncheckedUpdateWithoutPostsInput>
  }

  export type ContractorUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderContractorNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverContractorNestedInput
    likes?: LikeUpdateManyWithoutContractorNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutContractorNestedInput
  }

  export type ContractorUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderContractorNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverContractorNestedInput
    likes?: LikeUncheckedUpdateManyWithoutContractorNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutContractorNestedInput
  }

  export type PostCreateWithoutLikesInput = {
    content: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    farmer?: FarmerCreateNestedOneWithoutPostsInput
    contractor?: ContractorCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutLikesInput = {
    id?: number
    content: string
    imageUrl?: string | null
    farmerId?: number | null
    contractorId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostCreateOrConnectWithoutLikesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
  }

  export type FarmerCreateWithoutLikesInput = {
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropCreateNestedManyWithoutFarmersInput
    contracts?: ContractCreateNestedManyWithoutFarmerInput
    posts?: PostCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverFarmerInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUncheckedCreateWithoutLikesInput = {
    id?: number
    name: string
    address: string
    contactNo: string
    email?: string | null
    password: string
    landSize?: number
    fulfilledContracts?: number
    farmerScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    crops?: CropUncheckedCreateNestedManyWithoutFarmersInput
    contracts?: ContractUncheckedCreateNestedManyWithoutFarmerInput
    posts?: PostUncheckedCreateNestedManyWithoutFarmerInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderFarmerInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverFarmerInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutFarmerInput
  }

  export type FarmerCreateOrConnectWithoutLikesInput = {
    where: FarmerWhereUniqueInput
    create: XOR<FarmerCreateWithoutLikesInput, FarmerUncheckedCreateWithoutLikesInput>
  }

  export type ContractorCreateWithoutLikesInput = {
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractCreateNestedManyWithoutContractorInput
    posts?: PostCreateNestedManyWithoutContractorInput
    messagesSent?: MessageCreateNestedManyWithoutSenderContractorInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverContractorInput
    scoreCalculations?: ScoreCalculationCreateNestedManyWithoutContractorInput
  }

  export type ContractorUncheckedCreateWithoutLikesInput = {
    id?: number
    name: string
    contactNo: string
    password: string
    email?: string | null
    address: string
    fulfilledContracts?: number
    contractorScore?: number
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutContractorInput
    posts?: PostUncheckedCreateNestedManyWithoutContractorInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderContractorInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverContractorInput
    scoreCalculations?: ScoreCalculationUncheckedCreateNestedManyWithoutContractorInput
  }

  export type ContractorCreateOrConnectWithoutLikesInput = {
    where: ContractorWhereUniqueInput
    create: XOR<ContractorCreateWithoutLikesInput, ContractorUncheckedCreateWithoutLikesInput>
  }

  export type PostUpsertWithoutLikesInput = {
    update: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutLikesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
  }

  export type PostUpdateWithoutLikesInput = {
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmer?: FarmerUpdateOneWithoutPostsNestedInput
    contractor?: ContractorUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    farmerId?: NullableIntFieldUpdateOperationsInput | number | null
    contractorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FarmerUpsertWithoutLikesInput = {
    update: XOR<FarmerUpdateWithoutLikesInput, FarmerUncheckedUpdateWithoutLikesInput>
    create: XOR<FarmerCreateWithoutLikesInput, FarmerUncheckedCreateWithoutLikesInput>
    where?: FarmerWhereInput
  }

  export type FarmerUpdateToOneWithWhereWithoutLikesInput = {
    where?: FarmerWhereInput
    data: XOR<FarmerUpdateWithoutLikesInput, FarmerUncheckedUpdateWithoutLikesInput>
  }

  export type FarmerUpdateWithoutLikesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUpdateManyWithoutFarmerNestedInput
    posts?: PostUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverFarmerNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crops?: CropUncheckedUpdateManyWithoutFarmersNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutFarmerNestedInput
    posts?: PostUncheckedUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverFarmerNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutFarmerNestedInput
  }

  export type ContractorUpsertWithoutLikesInput = {
    update: XOR<ContractorUpdateWithoutLikesInput, ContractorUncheckedUpdateWithoutLikesInput>
    create: XOR<ContractorCreateWithoutLikesInput, ContractorUncheckedCreateWithoutLikesInput>
    where?: ContractorWhereInput
  }

  export type ContractorUpdateToOneWithWhereWithoutLikesInput = {
    where?: ContractorWhereInput
    data: XOR<ContractorUpdateWithoutLikesInput, ContractorUncheckedUpdateWithoutLikesInput>
  }

  export type ContractorUpdateWithoutLikesInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUpdateManyWithoutContractorNestedInput
    posts?: PostUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderContractorNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverContractorNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutContractorNestedInput
  }

  export type ContractorUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    contractorScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutContractorNestedInput
    posts?: PostUncheckedUpdateManyWithoutContractorNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderContractorNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverContractorNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutContractorNestedInput
  }

  export type ContractCreateManyFarmerInput = {
    id?: number
    contractorId: number
    cropId: number
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostCreateManyFarmerInput = {
    id?: number
    content: string
    imageUrl?: string | null
    contractorId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateManySenderFarmerInput = {
    id?: number
    content: string
    receiverId: number
    createdAt?: Date | string
  }

  export type MessageCreateManyReceiverFarmerInput = {
    id?: number
    content: string
    senderId: number
    createdAt?: Date | string
  }

  export type LikeCreateManyFarmerInput = {
    id?: number
    postId: number
    createdAt?: Date | string
  }

  export type ScoreCalculationCreateManyFarmerInput = {
    id?: number
    contractorId?: number | null
    score: number
    calculationDate?: Date | string
    criteria: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CropUpdateWithoutFarmersInput = {
    name?: StringFieldUpdateOperationsInput | string
    season?: EnumcropSeasonFieldUpdateOperationsInput | $Enums.cropSeason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUpdateManyWithoutCropNestedInput
  }

  export type CropUncheckedUpdateWithoutFarmersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    season?: EnumcropSeasonFieldUpdateOperationsInput | $Enums.cropSeason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutCropNestedInput
  }

  export type CropUncheckedUpdateManyWithoutFarmersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    season?: EnumcropSeasonFieldUpdateOperationsInput | $Enums.cropSeason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUpdateWithoutFarmerInput = {
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractor?: ContractorUpdateOneRequiredWithoutContractsNestedInput
    crop?: CropUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ContractUncheckedUpdateWithoutFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    contractorId?: IntFieldUpdateOperationsInput | number
    cropId?: IntFieldUpdateOperationsInput | number
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUncheckedUpdateManyWithoutFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    contractorId?: IntFieldUpdateOperationsInput | number
    cropId?: IntFieldUpdateOperationsInput | number
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUpdateWithoutFarmerInput = {
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: LikeUpdateManyWithoutPostNestedInput
    contractor?: ContractorUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contractorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contractorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutSenderFarmerInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiverFarmer?: FarmerUpdateOneWithoutMessagesReceivedNestedInput
    senderContractor?: ContractorUpdateOneWithoutMessagesSentNestedInput
    receiverContractor?: ContractorUpdateOneWithoutMessagesReceivedNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    receiverId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutSenderFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    receiverId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutReceiverFarmerInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderFarmer?: FarmerUpdateOneWithoutMessagesSentNestedInput
    senderContractor?: ContractorUpdateOneWithoutMessagesSentNestedInput
    receiverContractor?: ContractorUpdateOneWithoutMessagesReceivedNestedInput
  }

  export type MessageUncheckedUpdateWithoutReceiverFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutReceiverFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUpdateWithoutFarmerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutLikesNestedInput
    contractor?: ContractorUpdateOneWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyWithoutFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCalculationUpdateWithoutFarmerInput = {
    score?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    criteria?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractor?: ContractorUpdateOneWithoutScoreCalculationsNestedInput
  }

  export type ScoreCalculationUncheckedUpdateWithoutFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    contractorId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    criteria?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCalculationUncheckedUpdateManyWithoutFarmerInput = {
    id?: IntFieldUpdateOperationsInput | number
    contractorId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    criteria?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractCreateManyContractorInput = {
    id?: number
    farmerId: number
    cropId: number
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostCreateManyContractorInput = {
    id?: number
    content: string
    imageUrl?: string | null
    farmerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateManySenderContractorInput = {
    id?: number
    content: string
    receiverId: number
    createdAt?: Date | string
  }

  export type MessageCreateManyReceiverContractorInput = {
    id?: number
    content: string
    senderId: number
    createdAt?: Date | string
  }

  export type LikeCreateManyContractorInput = {
    id?: number
    postId: number
    createdAt?: Date | string
  }

  export type ScoreCalculationCreateManyContractorInput = {
    id?: number
    farmerId?: number | null
    score: number
    calculationDate?: Date | string
    criteria: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractUpdateWithoutContractorInput = {
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmer?: FarmerUpdateOneRequiredWithoutContractsNestedInput
    crop?: CropUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ContractUncheckedUpdateWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    farmerId?: IntFieldUpdateOperationsInput | number
    cropId?: IntFieldUpdateOperationsInput | number
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUncheckedUpdateManyWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    farmerId?: IntFieldUpdateOperationsInput | number
    cropId?: IntFieldUpdateOperationsInput | number
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUpdateWithoutContractorInput = {
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: LikeUpdateManyWithoutPostNestedInput
    farmer?: FarmerUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    farmerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    farmerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutSenderContractorInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderFarmer?: FarmerUpdateOneWithoutMessagesSentNestedInput
    receiverFarmer?: FarmerUpdateOneWithoutMessagesReceivedNestedInput
    receiverContractor?: ContractorUpdateOneWithoutMessagesReceivedNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    receiverId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutSenderContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    receiverId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutReceiverContractorInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderFarmer?: FarmerUpdateOneWithoutMessagesSentNestedInput
    receiverFarmer?: FarmerUpdateOneWithoutMessagesReceivedNestedInput
    senderContractor?: ContractorUpdateOneWithoutMessagesSentNestedInput
  }

  export type MessageUncheckedUpdateWithoutReceiverContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutReceiverContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUpdateWithoutContractorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutLikesNestedInput
    farmer?: FarmerUpdateOneWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCalculationUpdateWithoutContractorInput = {
    score?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    criteria?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmer?: FarmerUpdateOneWithoutScoreCalculationsNestedInput
  }

  export type ScoreCalculationUncheckedUpdateWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    farmerId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    criteria?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCalculationUncheckedUpdateManyWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    farmerId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    criteria?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractCreateManyCropInput = {
    id?: number
    farmerId: number
    contractorId: number
    landSize: number
    amount: number
    advancePayment: number
    expectedYield: number
    prefixedPrice: number
    startDate: Date | string
    endDate: Date | string
    insuranceFactors: string
    status?: $Enums.cropStatus
    contractStatus: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FarmerUpdateWithoutCropsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUpdateManyWithoutFarmerNestedInput
    posts?: PostUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateWithoutCropsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutFarmerNestedInput
    posts?: PostUncheckedUpdateManyWithoutFarmerNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderFarmerNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverFarmerNestedInput
    likes?: LikeUncheckedUpdateManyWithoutFarmerNestedInput
    scoreCalculations?: ScoreCalculationUncheckedUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateManyWithoutCropsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    landSize?: FloatFieldUpdateOperationsInput | number
    fulfilledContracts?: IntFieldUpdateOperationsInput | number
    farmerScore?: FloatFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUpdateWithoutCropInput = {
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmer?: FarmerUpdateOneRequiredWithoutContractsNestedInput
    contractor?: ContractorUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ContractUncheckedUpdateWithoutCropInput = {
    id?: IntFieldUpdateOperationsInput | number
    farmerId?: IntFieldUpdateOperationsInput | number
    contractorId?: IntFieldUpdateOperationsInput | number
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUncheckedUpdateManyWithoutCropInput = {
    id?: IntFieldUpdateOperationsInput | number
    farmerId?: IntFieldUpdateOperationsInput | number
    contractorId?: IntFieldUpdateOperationsInput | number
    landSize?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    advancePayment?: FloatFieldUpdateOperationsInput | number
    expectedYield?: FloatFieldUpdateOperationsInput | number
    prefixedPrice?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceFactors?: StringFieldUpdateOperationsInput | string
    status?: EnumcropStatusFieldUpdateOperationsInput | $Enums.cropStatus
    contractStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateManyPostInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type LikeUpdateWithoutPostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmer?: FarmerUpdateOneWithoutLikesNestedInput
    contractor?: ContractorUpdateOneWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use FarmerCountOutputTypeDefaultArgs instead
     */
    export type FarmerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FarmerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContractorCountOutputTypeDefaultArgs instead
     */
    export type ContractorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContractorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CropCountOutputTypeDefaultArgs instead
     */
    export type CropCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CropCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostCountOutputTypeDefaultArgs instead
     */
    export type PostCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FarmerDefaultArgs instead
     */
    export type FarmerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FarmerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContractorDefaultArgs instead
     */
    export type ContractorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContractorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CropDefaultArgs instead
     */
    export type CropArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CropDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContractDefaultArgs instead
     */
    export type ContractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContractDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScoreCalculationDefaultArgs instead
     */
    export type ScoreCalculationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScoreCalculationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostDefaultArgs instead
     */
    export type PostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikeDefaultArgs instead
     */
    export type LikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}