
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Farmer {
  id                Int         @id @default(autoincrement())
  name              String
  address           String
  landSize          Float      
  crops             Crop[]      
  contracts         Contract[]
  fulfilledContracts Int       
  farmerScore       Float      
  avatar            String?     
  posts             Post[]    
  messagesSent      Message[]   @relation("MessagesSent")  
  messagesReceived  Message[]   @relation("MessagesReceived") 
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Contractor {
  id                Int         @id @default(autoincrement())
  name              String
  address           String
  contracts         Contract[]  
  fulfilledContracts Int       
  contractorScore   Float     
  avatar            String?     
  posts             Post[]      
  messagesSent      Message[]   @relation("MessagesSent")  
  messagesReceived  Message[]   @relation("MessagesReceived") 
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Crop {
  id          Int        @id @default(autoincrement())
  name        String
  season      String   
  farmers     Farmer[]   
  contracts   Contract[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}


model Contract {
  id                Int        @id @default(autoincrement())
  farmerId          Int
  contractorId      Int
  cropId            Int
  landSize          Float      
  amount            Float      
  advancePayment    Float      
  expectedYield     Float      
  prefixedPrice     Float     
  startDate         DateTime   
  endDate           DateTime
  insuranceFactors  String    
  contractStatus    String    
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt


  farmer            Farmer     @relation(fields: [farmerId], references: [id])
  contractor        Contractor @relation(fields: [contractorId], references: [id])
  crop              Crop       @relation(fields: [cropId], references: [id])
}


model ScoreCalculation {
  id                Int        @id @default(autoincrement())
  farmerId          Int
  contractorId      Int
  score             Float
  calculationDate   DateTime   @default(now())
  criteria          String     
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt


  farmer            Farmer?    @relation(fields: [farmerId], references: [id])
  contractor        Contractor? @relation(fields: [contractorId], references: [id])
}


model Message {
  id                Int        @id @default(autoincrement())
  content           String
  senderId          Int        // Sender can be either a farmer or contractor
  receiverId        Int        // Receiver can be either a farmer or contractor
  createdAt         DateTime   @default(now())


  sender            Farmer?    @relation("MessagesSent", fields: [senderId], references: [id])
  receiver          Farmer?    @relation("MessagesReceived", fields: [receiverId], references: [id])
  senderContractor  Contractor? @relation("MessagesSent", fields: [senderId], references: [id])
  receiverContractor Contractor? @relation("MessagesReceived", fields: [receiverId], references: [id])
}


model Post {
  id                Int    
  content           String
  imageUrl          String?  
  farmerId          Int?
  contractorId      Int?
  likes             Like[]    
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  
  farmer            Farmer?    @relation(fields: [farmerId], references: [id])
  contractor        Contractor? @relation(fields: [contractorId], references: [id])
}


model Like {
  id                Int        @id @default(autoincrement())
  postId            Int
  userId            Int        // Can be a farmer or a contractor
  createdAt         DateTime   @default(now())


  post              Post       @relation(fields: [postId], references: [id])
  farmer            Farmer?    @relation(fields: [userId], references: [id])
  contractor        Contractor? @relation(fields: [userId], references: [id])
}

